<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nginx</title>
      <link href="/2023/07/11/Nginx/"/>
      <url>/2023/07/11/Nginx/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="post方法请求静态文件"><a href="#post方法请求静态文件" class="headerlink" title="post方法请求静态文件"></a>post方法请求静态文件</h1><p>默认情况下，web服务器都不允许post方法请求静态文件，会返回响应403 Not Allowed。 如果需要可以通过配置文件来改变这种设置：在需要处理静态文件的location里如下所示配置即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /<span class="keyword">static</span>/ &#123;</span><br><span class="line">    root /path/to/files/;</span><br><span class="line">    error_pages <span class="number">405</span> = <span class="number">200</span> $uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Nginx默认一次只能发送50次子请求-subrequest"><a href="#Nginx默认一次只能发送50次子请求-subrequest" class="headerlink" title="Nginx默认一次只能发送50次子请求(subrequest)"></a>Nginx默认一次只能发送50次子请求(subrequest)</h1><p>在nginx源码中，src&#x2F;http&#x2F;ngx_http_request.h文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define NGX_HTTP_MAX_SUBREQUESTS        50  </span><br></pre></td></tr></table></figure><p>在使用Openresty时，可以向configure脚本传参设置这个限制，<code> ./configure --with-cc-opt=&quot;-D NGX_HTTP_MAX_SUBREQUESTS=250&quot;</code></p><h1 id="Nginx-location匹配规则"><a href="#Nginx-location匹配规则" class="headerlink" title="Nginx location匹配规则"></a>Nginx location匹配规则</h1><p>匹配顺序：<br>a. 字符串匹配，和location块的顺序无关，根据uri匹配所有的location，从而得到一个匹配度最大的location。<br>b. 正则匹配，按照location块的顺序从前向后，如果找到匹配的location，则直接由该location处理请求。如果所有的location都不匹配，则由在字符串匹配中，匹配度最大的location处理。<br>匹配规则：<br>&#x3D; &#x2F;uri&#x2F;   ——字符串精确匹配<br>^~ &#x2F;uri&#x2F; ——字符串前缀匹配<br>~ &#x2F;uri&#x2F;   ——大小写区分的正则匹配<br><del>* &#x2F;uri&#x2F; ——大小写不区分的正则匹配<br>@ &#x2F;uri&#x2F; ——命名location，只用于内部重定向请求<br>其中，如果&#x3D;和^</del>匹配成功之后会立即停止搜索，即不再进行正则匹配。</p><h1 id="监控Nginx状态"><a href="#监控Nginx状态" class="headerlink" title="监控Nginx状态"></a>监控Nginx状态</h1><p>需要HttpStubStatusModule模块，默认情况是不开启的，所以需要编译时，指定开启这个模块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-http_stub_status_modules  </span><br></pre></td></tr></table></figure><p>nginx的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /nginx_status &#123;  </span><br><span class="line">  # copied from http://blog.kovyrin.net/2006/04/29/monitoring-nginx-with-rrdtool/  </span><br><span class="line">  stub_status on;  </span><br><span class="line">  access_log   off;  </span><br><span class="line">  allow SOME.IP.ADD.RESS;  </span><br><span class="line">  deny all;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>然后通过浏览器访问localhost&#x2F;nginx_status，浏览器显示Nginx的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Active connections: 291  </span><br><span class="line">server accepts handled requests  </span><br><span class="line">  16630948 16630948 31070465  </span><br><span class="line">Reading: 6 Writing: 179 Waiting: 106</span><br></pre></td></tr></table></figure><h1 id="Nginx启用aio"><a href="#Nginx启用aio" class="headerlink" title="Nginx启用aio"></a>Nginx启用aio</h1><p>默认Nginx是没有开启<code>aio</code>的，需要在配置编译时，加上相应选项否则启动Nginx会报错<code>unknown directive &quot;aio&quot;</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-file-aio  </span><br></pre></td></tr></table></figure><h1 id="限制请求内容的大小"><a href="#限制请求内容的大小" class="headerlink" title="限制请求内容的大小"></a>限制请求内容的大小</h1><p>指令：<code>client_max_body_size</code>，用于设置这个值，默认是1m。context可以是http，server或者location。</p><h1 id="通过echo模块合并静态文件请求"><a href="#通过echo模块合并静态文件请求" class="headerlink" title="通过echo模块合并静态文件请求"></a>通过echo模块合并静态文件请求</h1><p>正常html中包含多个js文件或者css文件，那么浏览器需要多次http请求才能完成这些文件的加载。比如html文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;/static/a.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;/static/b.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;/static/c.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">……  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>那么就需要3次请求。下面介绍echo模块实现请求合并。先修改html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;/merge?/static/a.js&amp;/static/b.js&amp;/static/c.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>nginx配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location /static/ &#123;</span><br><span class="line">    root /home/www/doc_root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /merge &#123;</span><br><span class="line">    default_type &#x27;text/javascript&#x27;;</span><br><span class="line"></span><br><span class="line">    echo_foreach_split &#x27;&amp;&#x27; $query_string; &amp;nbsp; &amp;nbsp;# 将查询字符串以&amp;分割</span><br><span class="line">        echo_location_async $echo_it; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;# 发送子请求到$echo_it对应的location</span><br><span class="line">        echo;</span><br><span class="line">    echo_end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式可以有效减少客户端请求，降低服务器端的压力。</p><h1 id="Nginx开户gzip"><a href="#Nginx开户gzip" class="headerlink" title="Nginx开户gzip"></a>Nginx开户gzip</h1><pre><code>gzip    on;    # 开启gzip，默认关闭gzip_comp_level    5;    # 压缩级别，1-9，级别越高压缩率越高，但是相应的耗cpugzip_min_length    1025;    # 当响应内容大小大于多少bytes后使用gzipgzip_types    text/plain application/x-javascript application/json text/javascript text/css    # 对于什么类型的内容使用gzip</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快手日常实习面经</title>
      <link href="/2022/10/31/%E5%BF%AB%E6%89%8B%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/"/>
      <url>/2022/10/31/%E5%BF%AB%E6%89%8B%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="快手日常实习一面"><a href="#快手日常实习一面" class="headerlink" title="快手日常实习一面"></a>快手日常实习一面</h1><ol><li>自我介绍</li><li>数据结构了解吗</li><li>栈和map区别说一下</li><li>hashmap  put()的过程</li><li>resize()的过程</li><li>hashmap的构造函数</li><li>JDBC怎么加载到java中的</li><li>SPI机制有什么其他应用吗</li><li>类加载过程</li><li>双亲加载机制</li><li>JVM的垃圾回收算法,垃圾回收器</li><li>CMS和G1了解那个</li><li>说一下CMS具体过程</li><li>CMS调优的参数了解吗</li><li>项目里用过多线程吗</li><li>项目里用过什么技术,解决了什么问题</li><li>Sychronized和ReentranLock()区别</li><li>JUC包里了解什么</li><li>ReentranLock()的底层实现</li><li>ReentranLock()公平锁和非公平锁实现</li><li>ReentranLock()在项目里用过吗</li><li>CounrDownLatch()如何使用</li><li>CounrDownLatch()如何等待子线程</li></ol><p>反问:</p><ol><li>去了做啥(财务方面的)</li><li>一共几面(两面还是三面)</li><li>啥时候有结果(很快)</li><li>表现怎么样,有啥建议吗(还行,能聊)</li></ol><h1 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h1><ol><li>自我介绍</li><li>介绍下项目</li><li>项目是在哪做的</li><li>用户关注是怎样实现的</li><li>刷新功能怎么做的</li><li>数据量怎么样</li><li>缓存用的什么</li><li>安装redis了吗</li><li>redis的分布式锁</li><li>setnx有什么问题</li><li>集群下的分布式锁用什么</li><li>超卖问题怎么解决</li><li>redis的数据结构</li><li>队列用什么</li><li>实现共同关注用什么</li><li>hashmap和concurrentHahsmap的区别</li><li>扩容的过程</li><li>写了个比较版本号代码</li></ol><p><a href="https://leetcode.cn/problems/compare-version-numbers/">165. 比较版本号 - 力扣（LeetCode）</a></p><h1 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h1><ol><li>自我介绍</li><li>能实习多久</li><li>是全日制吗</li><li>一周五天可以吗</li><li>项目紧的时候可能会到8,9点可以吗</li><li>什么时候可以到</li><li>了解过我们岗位吗</li><li>还有面其他的公司吗</li><li>给你发offer还面其他的吗</li><li>离得有点远</li><li>项目还有啥提升吗</li><li>三个词评价自己</li><li>还有一些忘了,问的还不少,跟我想的有点不一样</li></ol><p>面完两个小时说过了</p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring笔记</title>
      <link href="/2022/10/26/spring%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/26/spring%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="单例池"><a href="#单例池" class="headerlink" title="单例池"></a>单例池</h1><p>使用concurrenthashmap</p><h1 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h1><p>遍历方法判断是否有该注解,执行注解的方法</p><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>继承InitializingBean,初始化时判断Bean是否是这种类型的,强转执行注解的方法</p><h1 id="初始化和实例化"><a href="#初始化和实例化" class="headerlink" title="初始化和实例化"></a>初始化和实例化</h1><p>初始化如上,实例化执行构造方法</p><h1 id="初始化后"><a href="#初始化后" class="headerlink" title="初始化后"></a>初始化后</h1><p>可用于实现AOP,在放入单例池前执行</p><h1 id="推断构造方法"><a href="#推断构造方法" class="headerlink" title="推断构造方法"></a>推断构造方法</h1><p>多种构造方法执行无参构造方法,或@Autowire指定的构造方法,多种构造方法不指定也无无参,报错</p><h1 id="AOP底层"><a href="#AOP底层" class="headerlink" title="AOP底层"></a>AOP底层</h1><p>JDK动态代理和cjlib动态代理</p><p>在代理对象中设置一个目标对象的引用,代理对象在重写方法中,用target调用目标对象的方法</p><h1 id="事务底层"><a href="#事务底层" class="headerlink" title="事务底层"></a>事务底层</h1><ol><li>代理对象在重写方法中,先判断是否有@Transcational注解</li><li>有的话创建事务管理器,事务管理器新建一个数据库连接ThreadLocal&lt;DateSource,conn&gt;,同一个数据源拿到的是同一个连接</li><li>关闭连接的自动提交</li><li>调用普通方法中的jdbctemplate就使用这个连接</li><li>自动提交</li></ol><h2 id="事务失效"><a href="#事务失效" class="headerlink" title="事务失效"></a>事务失效</h2><p>在代理对象重写的方法中调用目标对象的方法,目标对象的方法是没有事物的</p><p>可以注入自己</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>加了@Configuration首先是一个Bean,并且是一个配置Bean</p><p>加了该注解的类也是一个代理对象,使用cglib,但调用目标对象时使用的是super.方法名(),子类重写了父类方法,执行子类方法</p><p>在事务管理器和JdbcTemplate在@Bean中都要调用datasource(),如果不加@Configuration,则每次创建新对象,加了就会去单例池找,这样数据库连接关闭自动提交就能用到了</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221027133234068.png" alt="image-20221027133234068"></p><p>@Import导入的类是配置Bean</p><h1 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h1><p>完整对象创建分两个步骤：实例化 + 初始化，只要初始化没进行完毕，就不完整<br>对象分三种类型：刚实例化的普通对象（放在三级缓存），提前进行AOP的不完整对象（放在二级缓存），完整对象（一级缓存&#x2F;单例池）</p><p>循坏依赖带来了什么问题？重复创建，如何解决？第三级缓存通过存储刚创建的实例化普通对象来打破循环，但循环依赖需要的是完成了AOP的代理对象，所以将三级缓存中的对象取出，提前进行AOP并放入二级缓存</p><p>那为什么要二级缓存？因为需要区分“已进行AOP的不完整对象”和“完整的代理对象”，并防止多次AOP（多个循环依赖叠加可导致）</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/365147/1592539097062-7912a20c-f209-47bd-bdc0-d6d4485ab395.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_43,text_5Zu-54G15a2m6ZmiLeWRqOeRnA==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10/resize,w_1125,limit_0" alt="image.png"></p><p>1.A创建将() -&gt; getEarlyBeanReference(beanName, mbd, bean)表达式放入三级缓存<strong>singletonFactories</strong></p><p>getEarlyBeanReference(beanName, mbd, bean)首先得到一个cachekey，cachekey就是beanName。然后把beanName和bean（这是原始对象）存入earlyProxyReferences中<br><strong>调用wrapIfNecessary进行AOP，得到一个代理对象</strong>。</p><p>2.A属性注入B,需要创建B</p><p>3.B创建时属性注入需要A,从三级缓存拿出表达式执行,将A的执行完AOP的代理对象放入二级缓存earlySingletonObjects中,B属性注入注入的时A的代理对象,只是未初始化完,和A最后放入单例池的是同一个对象</p><p>4.A接着生命周期,由于已经AOP因此不用再AOP,利用earlyProxyReferences判断是否已经AOP,在BeanPostProcessor的执行之后，就需要把A对应的对象放入singletonObjects中了</p><p>**注意:**earlyProxyReferences中的对象还未AOP</p><p>三级缓存用hashmap</p><h1 id="Async"><a href="#Async" class="headerlink" title="@Async"></a>@Async</h1><p>BeanPostProcessor:利用earlyProxyReferences判断是否已经AOP,根据结果返回bean</p><p>不出现循环依赖传入的bean和返回的bean不同</p><p>出现循环依赖传入的bean和返回的bean不同(不会再AOP,直接返回)</p><p>如果添加@Async,会多一个BeanPostProcessor,将传入的bean进行AOP,导致有两个代理对象,报错</p><h2 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h2><p>在属性注入上添加@Lazy,这样就不会有循环依赖,不会有两个代理对象</p><p>@Lazy是将属性生成一个代理对象赋值,在使用时再去单例池找</p><h1 id="构造方法的循环依赖"><a href="#构造方法的循环依赖" class="headerlink" title="构造方法的循环依赖"></a>构造方法的循环依赖</h1><ol><li>属性注入循环依赖</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="meta">@Autowire</span></span><br><span class="line">    B b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line">classB&#123;</span><br><span class="line"><span class="meta">@Autowire</span></span><br><span class="line">    A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>构造方法循环依赖,直接卡在创建普通对象,解决办法@Lazy,这样参数就能使用代理对象注入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"> <span class="keyword">private</span> B b;</span><br><span class="line"> <span class="meta">@Lazy</span></span><br><span class="line"> puclic <span class="title function_">A</span><span class="params">(B b)</span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.b = b</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">class B&#123;</span><br><span class="line"> private A a;</span><br><span class="line"> </span><br><span class="line"> puclic B(Aa b)&#123;</span><br><span class="line"> this.a = a</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>构造方法循环依赖加多例会导致不停循环创建</li></ol><h1 id="Vaule"><a href="#Vaule" class="headerlink" title="@Vaule"></a>@Vaule</h1><ol><li>@Value(“${key}”),赋值配置文件,环境变量等中的值,不存在直接将字符串赋值</li><li>@Value(“key}”),赋值字符串</li><li>@Value(“#{key}”),类似@Autowire,@Resource的名字注入</li><li>自定义注解,避免耦合</li></ol><h1 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Bean(autowire = Autowire.BY_TYPE)</span><br></pre></td></tr></table></figure><ol><li>使用到这个bean时利用bean的set方法进行自动注入</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Bean(autowireCandidate = false)</span><br></pre></td></tr></table></figure><ol start="2"><li>不能作为候选bean,不会用来注入</li><li>可以单独使用</li><li>自定义注解,加在自己的注解上,避免重复写</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Bean</span><br><span class="line">@Scope(&quot;prototype&quot;)</span><br></pre></td></tr></table></figure><p>**注意:**不和@Configration一起使用,调用类种方法生成对象时,会调用类中的方法,返回1个实例对象,和@Configration一起使用会从单例池返回</p><p>加@Configration会生成一个代理对象,执行对应方法时查看对应方法的bena是否创建,创建就直接使用,否则创建放入单例池</p><h1 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h1><h2 id="注解参数"><a href="#注解参数" class="headerlink" title="注解参数"></a>注解参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan(value = &quot;&quot;,includeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION,value = Zhouyu.class))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">excludeFilters = </span><br></pre></td></tr></table></figure><p>路径下的@Zhouyu注解也会被当作bean</p><h2 id="扫描索引"><a href="#扫描索引" class="headerlink" title="扫描索引"></a>扫描索引</h2><p>在资源目录下创建META-INF&#x2F;spring.components文件,key&#x3D;value,key为类全类名,value为注解类型,有了这个文件,注解会失效</p><h1 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h1><p>可以放在类或@Bean上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Conditional(value = &#123;&#125;)</span><br></pre></td></tr></table></figure><p>value存放Class&lt;? extends Condition&gt;数组</p><p>Condition类需要自定义类去实现Condition接口</p><p>通过matches返回true或false判断是否类需要加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221027104423059.png" alt="image-20221027104423059"></p><h1 id="Autowire"><a href="#Autowire" class="headerlink" title="@Autowire"></a>@Autowire</h1><ol><li><p>放在属性上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里使用的是unsafe直接将值填充到内存</span></span><br><span class="line">unsafe.putObject(var1, <span class="built_in">this</span>.fieldOffset, var2);</span><br></pre></td></tr></table></figure></li><li><p>放在set方法上(类似@PostConstruct,不过执行实际不同)</p></li><li><p>放在构造方法上</p><ul><li>解决推断构造方法</li><li>属性注入</li></ul></li><li><p>参数前(支持测试时注入)</p></li><li><p>自定义注解上,自己的注解会加上注解功能(可以加上一些参数)</p></li></ol><p><strong>注意:</strong></p><ol><li>不支持使用static,如果支持使用static会导致每次创建新的实例,static修饰的类对象会变化,其他实例由于用的时类对象,所以也会变化</li><li>require属性表示是否必须有值</li></ol><h1 id="Lazy-1"><a href="#Lazy-1" class="headerlink" title="@Lazy"></a>@Lazy</h1><ol><li>类上(创建bean的时机,创建Spring容器时或getBean时创建)</li><li>属性上,会先赋值一个代理对象,直到使用时才去单例池中找</li><li>方法上(加了@Autowire的set方法上,和属性上类似,先创建代理对象赋值)</li><li>参数上(同上类似)</li><li>构造方法上(可以解决循环依赖)</li></ol><h1 id="Autowire和-Resource"><a href="#Autowire和-Resource" class="headerlink" title="@Autowire和@Resource"></a>@Autowire和@Resource</h1><p>JDK包中的@Resource,spring提供的@Autowire</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Resource(name=&quot;&quot;)</span><br><span class="line"></span><br><span class="line">@Autowire</span><br><span class="line">@Qualifier(value = &quot;&quot;)</span><br></pre></td></tr></table></figure><h1 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h1><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221027134348814.png" alt="image-20221027134348814"></p><p>ImportSelector和DeferredImportSelector都是接口,自定义类去实现接口和相关方法,可以批量导入类</p><p>ImportBeanDefinitionRegistrar也是接口,可以重写相关方法,自己去注册bean</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221027134709636.png" alt="image-20221027134709636"></p><h1 id="Lookup"><a href="#Lookup" class="headerlink" title="@Lookup"></a>@Lookup</h1><p>在抽象类中的方法上标注@Lookup,抽象类会创建一个代理bean,被标注@Lookup的抽象方法会返回value参数中的实例对象</p><p><strong><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221027135225154.png" alt="image-20221027135225154"></strong></p><h1 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h1><p>发现多个相同的bean,使用带有@Primary的bean,不能注解多个</p><h1 id="注册一个bean的方式"><a href="#注册一个bean的方式" class="headerlink" title="注册一个bean的方式"></a>注册一个bean的方式</h1><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221027135704799.png" alt="image-20221027135704799"></p><h2 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h2><ol><li><p>自定义类实现FactoryBean</p></li><li><p>会创建两个Bean,一个是ZhouyFactoryBean的bean,启动时创建,一个是UserService的bean,获取时创建</p></li><li><p>@Component不设置名字,getBean(“zhouyuFactoryBean”)会得到UserService的Bean</p></li><li><p>加一个&amp;  getBean(“&amp;zhouyuFactoryBean”)获得ZhouyFactoryBean的bean</p></li><li><p>不会属性注入</p></li></ol><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221027140609620.png" alt="image-20221027140609620"></p><h2 id="SmartFactoryBean"><a href="#SmartFactoryBean" class="headerlink" title="SmartFactoryBean"></a>SmartFactoryBean</h2><p>可以设置spring启动时创建</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221027140955835.png" alt="image-20221027140955835"></p><h1 id="依赖注入有哪些方式"><a href="#依赖注入有哪些方式" class="headerlink" title="依赖注入有哪些方式"></a>依赖注入有哪些方式</h1><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221027135758022.png" alt="image-20221027135758022"></p><ol><li>自动注入,依赖@Bean里的autowire &#x3D; Autowre.BY_NAME</li></ol><h1 id="获取ApplicationContext的方式"><a href="#获取ApplicationContext的方式" class="headerlink" title="获取ApplicationContext的方式"></a>获取ApplicationContext的方式</h1><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221027142417581.png" alt="image-20221027142417581"></p><h1 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h1><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221027142433259.png" alt="image-20221027142433259"></p><h1 id="Spring类型有哪些转化方式"><a href="#Spring类型有哪些转化方式" class="headerlink" title="Spring类型有哪些转化方式"></a>Spring类型有哪些转化方式</h1><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221027142454244.png" alt="image-20221027142454244"></p><h1 id="SpringMVC启动"><a href="#SpringMVC启动" class="headerlink" title="SpringMVC启动"></a>SpringMVC启动</h1><ol><li><p>tomcat启动</p></li><li><p>解析web.xml  Listener中创建Spring容器(ServerletContext)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">listener</span>&gt;</span>  </span><br><span class="line"> <span class="comment">&lt;!--2、部署applicationContext的xml文件--&gt;</span>  </span><br><span class="line"> <span class="comment">&lt;!--如果在web.xml中不写任何参数配置信息，默认的路径是&quot;/WEB-INF/applicationContext.xml，  </span></span><br><span class="line"><span class="comment"> 在WEB-INF目录下创建的xml文件的名称必须是applicationContext.xml。  </span></span><br><span class="line"><span class="comment"> 如果是要自定义文件名可以在web.xml里加入contextConfigLocation这个context参数：  </span></span><br><span class="line"><span class="comment"> 在&lt;param-value&gt; &lt;/param-value&gt;里指定相应的xml文件名，如果有多个xml文件，可以写在一起并以“,”号分隔。  </span></span><br><span class="line"><span class="comment"> 也可以这样applicationContext-*.xml采用通配符，比如这那个目录下有applicationContext-ibatis-base.xml，  </span></span><br><span class="line"><span class="comment"> applicationContext-action.xml，applicationContext-ibatis-dao.xml等文件，都会一同被载入。  </span></span><br><span class="line"><span class="comment"> 在ContextLoaderListener中关联了ContextLoader这个类，所以整个加载配置过程由ContextLoader来完成。--&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">context-param</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span> </span><br></pre></td></tr></table></figure></li><li><p>DispatcherServerlet实例化化</p></li><li><p>DispatcherServerlet.init()  创建Spring容器</p></li></ol><p>在web.xml中配置拦截器,   listener,以及DispatcherServelet</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/springmvc.drawio.png" alt="springmvc.drawio"></p><h2 id="web-xml中的Listener"><a href="#web-xml中的Listener" class="headerlink" title="web.xml中的Listener"></a>web.xml中的Listener</h2><p>用来创建父容器</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱奇艺日常实习面经</title>
      <link href="/2022/10/20/%E7%88%B1%E5%A5%87%E8%89%BA%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/"/>
      <url>/2022/10/20/%E7%88%B1%E5%A5%87%E8%89%BA%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h1><ol><li>自我介绍</li><li>hashmap讲一下,具体put过程,怎样判断key值是否相等</li><li>hashmap1.7和1.8有什么区别</li><li>Object包含哪些方法</li><li>提到了wait,和Thread的sleep有什么区别</li><li>wait方法可以用在java中哪些地方</li><li>synchronized原理讲一下,锁升级</li><li>ReentrantLock讲一下,CAS介绍一下</li><li>还有没有锁能提高并发的</li><li>线程池的参数讲一下,参数具体要怎样设置</li><li>线程池在项目里用过吗</li><li>MySQL的索引讲一下,分类</li><li>索引下推</li><li>B+树,B+树里节点存的具体信息</li><li>讲一下数据库四大特性</li><li>redo log和bin log 区别</li><li>redo log 二次提交</li><li>jvm结构,线程共享和独享的部分</li><li>垃圾回收算法描述一下,分别说下优缺点</li><li>spring的IOC说一下</li><li>AOP说一下</li><li>bean的生命周期</li><li>讲一下AOP里的接入点,切面等概念</li><li>项目里用过AOP吗</li></ol><hr><p>反问:</p><ol><li>每周要实习几天</li><li>去了具体做什么</li><li>一共几面(两面),都是技术面吗(是)</li><li>大概什么时候能知道一面结果</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息中间件</title>
      <link href="/2022/10/19/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2022/10/19/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>导入依赖</p></li><li><p>生产者</p><ul><li>新建Connection工厂,设置参数</li><li>新建Connection连接</li><li>新建channel</li><li>声明一个队列</li><li>使用basicPublish发布消息</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oddfar.one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhiyuan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建一个连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;42.192.149.71&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//channel 实现了自动 close 接口 自动关闭 不需要显示关闭</span></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个队列</span></span><br><span class="line"><span class="comment">         * 1.队列名称</span></span><br><span class="line"><span class="comment">         * 2.队列里面的消息是否持久化 也就是是否用完就删除</span></span><br><span class="line"><span class="comment">         * 3.该队列是否只供一个消费者进行消费 是否进行共享 true 可以多个消费者消费</span></span><br><span class="line"><span class="comment">         * 4.是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true 自动删除</span></span><br><span class="line"><span class="comment">         * 5.其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 发送一个消息</span></span><br><span class="line"><span class="comment">         * 1.发送到那个交换机</span></span><br><span class="line"><span class="comment">         * 2.路由的 key 是哪个</span></span><br><span class="line"><span class="comment">         * 3.其他的参数信息</span></span><br><span class="line"><span class="comment">         * 4.发送消息的消息体</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送完毕&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>消费者<ul><li>新建Connection工厂,设置参数</li><li>新建Connection连接</li><li>新建channel</li><li>使用basicConsume发布消息</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oddfar.one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhiyuan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;42.192.149.71&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息.........&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//推送的消息如何进行消费的接口回调</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody());</span><br><span class="line">            System.out.println(message);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//取消消费的一个回调接口 如在消费的时候队列被删除掉了</span></span><br><span class="line">        <span class="type">CancelCallback</span> <span class="variable">cancelCallback</span> <span class="operator">=</span> (consumerTag) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消息消费被中断&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消费者消费消息 - 接受消息</span></span><br><span class="line"><span class="comment">         * 1.消费哪个队列</span></span><br><span class="line"><span class="comment">         * 2.消费成功之后是否要自动应答 true 代表自动应答 false 手动应答</span></span><br><span class="line"><span class="comment">         * 3.消费者未成功消费的回调</span></span><br><span class="line"><span class="comment">         * 4.消息被取消时的回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, deliverCallback, cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="消息应答-消费者"><a href="#消息应答-消费者" class="headerlink" title="消息应答(消费者)"></a>消息应答(消费者)</h2><p>1.自动应答,队列发出消息后默认收到,删除消息</p><p>2.手动应答,需要消费者在接收消息回调中使用basicACK确认消息,确认后才删除消息</p><ul><li><p>Channel.basicAck(用于肯定确认)</p><p>RabbitMQ 已知道该消息并且成功的处理消息，可以将其丢弃了</p></li><li><p>Channel.basicNack(用于否定确认)</p></li><li><p>Channel.basicReject(用于否定确认)</p><p>与 Channel.basicNack 相比少一个参数，不处理该消息了直接拒绝，可以将其丢弃了</p></li></ul><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>交换机持久化,声明时设置</p><p>队列持久化,声明时设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让队列持久化</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">durable</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//声明队列</span></span><br><span class="line">channel.queueDeclare(TASK_QUEUE_NAME, durable, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>消息持久化,发送消息设置参数</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/RabbitMQ-00000028.png" alt="RabbitMQ-00000028"></p><h2 id="不公平分发"><a href="#不公平分发" class="headerlink" title="不公平分发"></a>不公平分发</h2><p>给channel设置参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不公平分发</span></span><br><span class="line"><span class="comment">//能处理的消息个数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">prefetchCount</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">channel.basicQos(prefetchCount);</span><br><span class="line"><span class="comment">//采用手动应答</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">autoAck</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">channel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, cancelCallback);</span><br></pre></td></tr></table></figure><h3 id="prefetchCount预取值"><a href="#prefetchCount预取值" class="headerlink" title="prefetchCount预取值"></a>prefetchCount预取值</h3><p>仍未ack的个数,到达上限先不给它分配</p><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>创建交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//把该临时队列绑定我们的 exchange 其中 routingkey(也称之为 binding key)为空字符串</span></span><br><span class="line"><span class="comment">//第三个参数为routingkey</span></span><br><span class="line"> channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>1.fanout发送到他绑定的所有队列</p><p>2.direct发送到他绑定的指定队列,根据生产者指定的bindingKey路由</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish(EXCHANGE_NAME, bindingKey, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure><p>3.topic主要是设置的bindingKey可以为<strong>一个单词列表</strong>，<strong>以点号分隔开</strong>,根据生产者指定的bindingKey路由</p><p>其中bindingKey</p><ul><li>***(星号)可以代替一个单词**</li><li><strong>#(井号)可以替代零个或多个单词</strong></li></ul><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/RabbitMQ-00000046.png" alt="RabbitMQ-00000046"></p><h2 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h2><h3 id="死信的来源"><a href="#死信的来源" class="headerlink" title="死信的来源"></a>死信的来源</h3><ul><li><p>消息 TTL 过期</p><p>TTL是Time To Live的缩写, 也就是生存时间</p><p>生产者可以设置TTL属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">  </span><br><span class="line">channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line"><span class="comment">//设置消息的 TTL 时间 10s</span></span><br><span class="line">AMQP.<span class="type">BasicProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties().builder().expiration(<span class="string">&quot;10000&quot;</span>).build();</span><br><span class="line"><span class="comment">//该信息是用作演示队列个数限制</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;info&quot;</span> + i;</span><br><span class="line">    channel.basicPublish(NORMAL_EXCHANGE, <span class="string">&quot;zhangsan&quot;</span>, properties, message.getBytes());</span><br><span class="line">    System.out.println(<span class="string">&quot;生产者发送消息:&quot;</span> + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>队列达到最大长度</p><p>队列满了，无法再添加数据到 mq 中</p><p>在创建队列是声明最大长度</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/RabbitMQ-00000051.png" alt="RabbitMQ-00000051"></p></li><li><p>消息被拒绝</p><p>(basic.reject 或 basic.nack) 并且 requeue&#x3D;false.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicReject(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>和普通交换机和队列一样</p><p>多了队列出现死信时应该发到哪个交换机</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/RabbitMQ-00000048.png" alt="RabbitMQ-00000048"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明死信和普通交换机 类型为 direct</span></span><br><span class="line">       channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line">       channel.exchangeDeclare(DEAD_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//声明死信队列</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">deadQueue</span> <span class="operator">=</span> <span class="string">&quot;dead-queue&quot;</span>;</span><br><span class="line">       channel.queueDeclare(deadQueue, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">       <span class="comment">//死信队列绑定：队列、交换机、路由键（routingKey）</span></span><br><span class="line">       channel.queueBind(deadQueue, DEAD_EXCHANGE, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//正常队列绑定死信队列信息</span></span><br><span class="line">       Map&lt;String, Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//正常队列设置死信交换机 参数 key 是固定值</span></span><br><span class="line">       params.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE);</span><br><span class="line">       <span class="comment">//正常队列设置死信 routing-key 参数 key 是固定值</span></span><br><span class="line">       params.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//正常队列</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">normalQueue</span> <span class="operator">=</span> <span class="string">&quot;normal-queue&quot;</span>;</span><br><span class="line">       channel.queueDeclare(normalQueue, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, params);</span><br><span class="line">       channel.queueBind(normalQueue, NORMAL_EXCHANGE, <span class="string">&quot;zhangsan&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h2><ul><li><p><strong>队列设置TTL</strong></p><p>过期就扔到死信队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">       <span class="comment">//声明当前队列绑定的死信交换机</span></span><br><span class="line">       args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, Y_DEAD_LETTER_EXCHANGE);</span><br><span class="line">       <span class="comment">//声明当前队列的死信路由 key</span></span><br><span class="line">       args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;YD&quot;</span>);</span><br><span class="line">       <span class="comment">//声明队列的 TTL</span></span><br><span class="line">       args.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">       <span class="keyword">return</span> QueueBuilder.durable(QUEUE_A).withArguments(args).build();</span><br></pre></td></tr></table></figure><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/RabbitMQ-00000057.png" alt="RabbitMQ-00000057"></p></li><li><p><strong>消息设置TTL</strong></p><p>即将投递到消费者之前判定</p></li></ul><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/RabbitMQ-00000056.png" alt="RabbitMQ-00000056"></p><p>同时设置使用较小值</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>可以设置一个延迟交换机</p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/2022/10/18/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/10/18/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><p>您好,我叫XXX,现在在XXX大学读XXX,专业是计算机科学与技术,大学和研究生时间我主要利用课外时间学习了 Java 以及 Spring、MyBatis 等框架 。大学期间参与过一个新闻系统的开发，我在其中主要担任后端开发,这个系统的主要用了SSM框架,研究生期间设计项目飞鱼点评,这个系统的主要用了SpringBoot框架,数据库使用+MySQL+Redis, 平时我喜欢打打羽毛球来放松自己.</p><h1 id="反问"><a href="#反问" class="headerlink" title="反问"></a>反问</h1><p><strong>面对</strong> <strong>HR</strong> <strong>或者其他</strong> <strong>Level</strong> <strong>比较低的面试官时</strong></p><ol><li><p>能不能谈谈你作为一个公司老员工对公司的感受? </p></li><li><p>能不能问一下，你当时因为什么原因选择加入这家公司的呢或者说这家公司有哪些地方吸引你</p></li><li><p>我觉得我这次表现的不是太好，你有什么建议或者评价给我吗？</p></li><li><p>接下来我会有一段空档期，有什么值得注意或者建议学习的吗？ </p></li><li><p>这个岗位为什么还在招人？</p></li><li><p>大概什么时候能给我回复呢？</p></li></ol><h1 id="如何设计哈希函数"><a href="#如何设计哈希函数" class="headerlink" title="如何设计哈希函数"></a>如何设计哈希函数</h1><ul><li>易于计算：它应该易于计算，并且不能成为算法本身。</li><li>统一分布：它应该在哈希表中提供统一分布，不应导致群集。</li><li>较少的冲突：当元素对映射到相同的哈希值时发生冲突。应该避免这些</li></ul><p>解决冲突:</p><p>开放地址法:线性探测</p><p>链地址法</p><p>再哈希法</p><h1 id="HashMap多线程情况下会出现什么问题"><a href="#HashMap多线程情况下会出现什么问题" class="headerlink" title="HashMap多线程情况下会出现什么问题"></a>HashMap多线程情况下会出现什么问题</h1><ol><li>多线程put后可能导致get死循环(put触发多个线程resize,JDK1.7)</li><li>多线程put的时候可能导致元素丢失(两个线程拿到同一个引用,赋值给.next)</li><li>put非null元素后get出来的却是null(trancefor方法迁移数据时会先将原本索引节点置为null)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">    src[j] = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h1 id="评论回复功能设计"><a href="#评论回复功能设计" class="headerlink" title="评论回复功能设计"></a>评论回复功能设计</h1><p><a href="https://blog.csdn.net/zukxu123/article/details/109385764">评论回复功能设计与总结-Java（两层型）_zukxu的博客-CSDN博客_评论功能设计</a></p><h1 id="悲观锁和乐观锁"><a href="#悲观锁和乐观锁" class="headerlink" title="悲观锁和乐观锁"></a>悲观锁和乐观锁</h1><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>总是假设最坏的情况，每次取数据时都认为其他线程会修改,在对共享数据进行操作时先加锁再操作</p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>乐观锁总是假设最好的情况，认为共享资源每次被访问的时候不会出现问题，线程可以不停地执行，无需加锁也无需等待，只是在提交修改的时候去验证对应的资源（也就是数据）是否被其它线程修改了</p><p>CAS+版本号</p><h1 id="创建线程的方式-x2F-多线程的实现方式"><a href="#创建线程的方式-x2F-多线程的实现方式" class="headerlink" title="创建线程的方式&#x2F;多线程的实现方式"></a>创建线程的方式&#x2F;多线程的实现方式</h1><ol><li>重写Thread类的run()方法</li><li>实现Runnable接口传入线程运行<ul><li>实际上Thread类中有一个Runnable target,传入Runnable实际上是覆盖它</li></ul></li><li>实现Callable()接口(加了返回值和异常),覆盖call方法,并结合 Future 实现,</li></ol><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/zglut4qdvh.png" alt="img"></p><p>4.线程池创建</p><h1 id="ThreadLocal原理"><a href="#ThreadLocal原理" class="headerlink" title="ThreadLocal原理"></a>ThreadLocal原理</h1><p>ThreadLocal类有一个静态内部类ThreadLocalMap类,键是弱引用的Threadlocal类,值就是保存在ThreadLocal的副本对象,每一个Thread对象都会有一个ThreadLocalMap成员，记录该线程在各个ThreadLocal中保存的副本对象</p><p>哈希冲突的解决办法采用了<strong>开放地址法</strong>,ThreadLocal通常存放的数据量不会特别大，并且使用开放地址法（或叫开放寻址法）相对于拉链法而言节省了存储指针的空间</p><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>如果一个ThreadLocal不存在外部<strong>强引用</strong>时，Key(ThreadLocal)势必会被GC回收，这样就会导致ThreadLocalMap中key为null， 而value还存在着强引用，只有thead线程退出以后,value的强引用链条才会断掉。</p><p>Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry -&gt; value</p><p>对应的value在下一次ThreadLocalMap调用set(),get(),remove()的时候会被清除</p><h2 id="内存泄漏场景"><a href="#内存泄漏场景" class="headerlink" title="内存泄漏场景"></a>内存泄漏场景</h2><p><a href="https://blog.csdn.net/luzhensmart/article/details/86701039">java内存泄漏的几种情景_这瓜保熟么的博客-CSDN博客</a></p><ol><li><p>未关闭的资源类</p></li><li><p>静态集合引起的内存泄漏</p></li><li><p>监听器(在释放对象的时候却没有去删除这些监听器)</p></li><li><p>内部类和外部模块的引用</p></li><li><p>单例模式</p></li><li><p>集合里面的对象属性被修改后,再调用remove()方法时不起作用(remove()是根据hashCode进行的，但修改了对象，对象的hashCode会发生改变，但存入<a href="https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020">集合</a>时对应的hashCode没有变，所以remove（）不生效)</p></li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>代替显示的参数传递</li><li>全局存储用户信息(在拦截器的业务中， 获取到保存的用户信息，然后存入ThreadLocal)</li><li>解决线程安全问题,</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Spring项目中Dao层中装配的Connection肯定是线程安全的，其解决方案就是采用ThreadLocal方法，当每个请求线程使用Connection的时候， 都会从ThreadLocal获取一次，如果为null，说明没有进行过数据库连接，连接后存入ThreadLocal中，如此一来，每一个请求线程都保存有一份 自己的Connection。</span><br></pre></td></tr></table></figure><h2 id="子线程获取父线程ThreadLocal"><a href="#子线程获取父线程ThreadLocal" class="headerlink" title="子线程获取父线程ThreadLocal"></a>子线程获取父线程ThreadLocal</h2><p>InheritableThreadLocal</p><p>可继承的线程变量表，可以让子线程获取到父线程中ThreadLocal的值</p><h1 id="线程池运行过程"><a href="#线程池运行过程" class="headerlink" title="线程池运行过程"></a>线程池运行过程</h1><p><a href="https://juejin.cn/post/6866054685044768782">三分钟弄懂线程池执行过程 - 掘金 (juejin.cn)</a></p><p><strong>线程池调用execute</strong>—&gt;<strong>创建Worker（设置属性thead、firstTask）</strong>—&gt;**worker.thread.start()**—&gt;**实际上调用的是worker.run()**—&gt;**线程池的runWorker(worker)**—&gt;<strong>worker.firstTask.run()</strong>(如果firstTask为null就从等待队列中拉取一个)。</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/63e55d8b57ea479c82a3d8e454fe4c32~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/f9c93d91187041a3a0f33b0627b28cb2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/cd1dd21fd9aa46c9b51c67760ee17e26~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">runWorker</span><span class="params">(Worker w)</span> &#123;</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> w.firstTask;</span><br><span class="line">    <span class="comment">//这个 while 循环有个 getTask 方法，getTask 的主要作用是阻塞从队列中拿任务出来，如果队列中有任务，那么就可以拿出来执行，如果队列中没有任务，这个线程会一直阻塞到有任务为止（或者超时阻塞）</span></span><br><span class="line">    <span class="keyword">while</span> (task != <span class="literal">null</span> || (task = getTask()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            task.run();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            task = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程的锁"><a href="#线程的锁" class="headerlink" title="线程的锁"></a>线程的锁</h1><p>一种是关键字：synchronized，一种是concurrent包下的lock锁</p><ol><li>synchronized</li><li>ReentrantLock</li></ol><h2 id="Lock的底层原理"><a href="#Lock的底层原理" class="headerlink" title="Lock的底层原理"></a>Lock的底层原理</h2><p>Lock底层实现基于AQS实现，采用线程独占的方式，在硬件层面依赖特殊的CPU指令（CAS）。</p><p>简单来说，ReenTrantLock的实现是一种<strong>自旋锁</strong>，通过循环调用CAS操作来实现加锁。它的性能比较好也是因为<strong>避免了使线程进入内核态的阻塞状态。</strong>想尽办法避免线程进入内核的阻塞状态是我们去分析和理解锁设计的关键钥匙</p><h1 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h1><p>AQS是用CLH队列锁实现的，即：将暂时获取不到锁的线程加入到等待（阻塞）队列中。</p><p>AQS是将每一条请求共享资源的被阻塞的等待线程封装成一个CLH锁队列的一个节点，来实现锁的分配</p><p>AQS就是基于CLH队列，用volatile修饰共享变量state状态符，线程通过CAS去改变状态符，成功则获取锁成功，失败进入CLH队列，等待被唤醒</p><p>AQS底层使用了模板方法模式</p><p>AQS底层数据结构是双向链表，锁的存储结构就两个东西 : 双向链表 + “int类型状态”</p><h1 id="双亲委派模型好处"><a href="#双亲委派模型好处" class="headerlink" title="双亲委派模型好处"></a>双亲委派模型好处</h1><p>避免重复加载 + 避免核心类篡改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为了不让我们写System类，类加载采用委托机制，这样可以保证爸爸们优先，爸爸们能找到的类，儿子就没有机会加载。而System类是Bootstrap加载器加载的，就算自己重写，也总是使用Java系统提供的System，自己写的System类根本没有机会得到加载。</span><br></pre></td></tr></table></figure><h1 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h1><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/v2-ecf6c3d0f5146029e9693d6223d23afb_r.jpg" alt="img"></p><h2 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h2><p>●初始化阶段就是执行类构造器方法<clinit>()的过程。<br>●此方法不需定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。<br>●构造器方法中指令按语句在源文件中出现的顺序执行。<br>●<clinit>()不同于类的构造器。（关联：构造器是虚拟机视角下的<init>()）<br>●若该类具有父类，JVM会保证子类的<clinit>()执行前，父类的<clinit>()已经执行完毕。<br>●虚拟机必须保证一个类的<clinit>()方法在多线程下被同步加锁。</p><h1 id="垃圾处理器"><a href="#垃圾处理器" class="headerlink" title="垃圾处理器"></a>垃圾处理器</h1><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h3><p>好处:</p><ol><li>实现起来比较简单</li></ol><p>缺点:</p><ol><li><p>会有内存碎片,需要维护一个空闲列表</p></li><li><p>会有停顿操作</p></li><li><p>效率不是很高</p></li></ol><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>好处: </p><ol><li>没有内存碎片</li><li>不需要标记清除过程,实现高效,运行高效</li></ol><p>缺点:</p><ol><li>浪费一半的内存空间</li></ol><h3 id="标记压缩算法"><a href="#标记压缩算法" class="headerlink" title="标记压缩算法"></a>标记压缩算法</h3><p>优点:</p><ol><li>没有内存碎片</li><li>不需要浪费一半内存空间</li></ol><p>缺点:</p><ol><li>会有停顿</li><li>效率没有复制算法高</li><li>移动对象时,如果对象被引用,还要调整引用的地址</li></ol><h2 id="垃圾标记算法"><a href="#垃圾标记算法" class="headerlink" title="垃圾标记算法"></a>垃圾标记算法</h2><ol><li><p>引用计数算法</p></li><li><p>可达性分析算法</p></li></ol><h2 id="cms垃圾回收的过程"><a href="#cms垃圾回收的过程" class="headerlink" title="cms垃圾回收的过程"></a>cms垃圾回收的过程</h2><p>1.初始标记,标记GCRoot能直接关联到的对象,一旦标记完成,恢复运行</p><p>2.并发标记:从GCRoot能直接关联到的1对象出发,遍历整个对象图,这个过程不需要暂停用户线程,可以与垃圾收集线程一起并发运行</p><p>3.重新标记:有与用户线程和垃圾回收线程并发工作,因此需要重新标记并发期间发生改动的那一部分对象,会需要停顿.</p><p>4.并发清除:清理掉之前标记的已经死亡的对象,释放内存空间,也是与用户线程并发.</p><p>cms并发标记时.用户线程也需要运行,为保证应用程序有足够内存可用,因此当堆内存使用率达到某一阈值时，便开始进行回收</p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h2><ol><li>单一职责原则</li><li>依赖倒置原则</li><li>迪米特法则(一个对象应当对其他对象尽可能少的了解。不和陌生人说话。)</li><li>开闭原则</li><li>里氏替换原则</li><li>接口隔离原则</li></ol><h2 id="spring中的设计模式"><a href="#spring中的设计模式" class="headerlink" title="spring中的设计模式"></a>spring中的设计模式</h2><ol><li>工厂模式</li><li>单例模式</li><li>适配器模式</li><li>模板方法</li><li>观察者模式</li><li>代理模式</li></ol><h2 id="使用过的设计模式"><a href="#使用过的设计模式" class="headerlink" title="使用过的设计模式"></a>使用过的设计模式</h2><p>1.策略模式</p><p>不同格式的文件使用不同的解压策略</p><p>2.责任链模式</p><p>登录时判断账号为空,邮箱格式等一系列判断</p><h2 id="简单工厂模式是做什么用的"><a href="#简单工厂模式是做什么用的" class="headerlink" title="简单工厂模式是做什么用的"></a>简单工厂模式是做什么用的</h2><ol><li>step1：创建抽象产品类，并为具体产品定义好一个接口；</li><li>step2：创建具体产品类，其通过接口来继承抽象产品类，同时也要定义计划生产的每一个具体产品；</li><li>step3：创建工厂类，其创建的静态方法可以对传入的不同参数做出响应；</li><li>step4：外界使用者就能调用工厂类的静态方法了，通过传入不同参数来创建不同具体产品类的实例。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//step1:创建抽象产品类，定义具体产品的公共接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shirt</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//step2:创建具体产品类（继承抽象产品类），定义生产的具体产品</span></span><br><span class="line"><span class="comment">//具体产品类A，女款衬衫</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WomenShirt</span> <span class="keyword">extends</span> <span class="title class_">Shirt</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;展示女款衬衫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体产品类B，男款</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenShirt</span> <span class="keyword">extends</span> <span class="title class_">Shirt</span>&#123;</span><br><span class="line">    <span class="meta">@Overside</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;展示男款衬衫&quot;</span>)；</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//step3:创建工厂类，通过静态方法处理不同传入参数，从而创建不同具体产品类的实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Shirt <span class="title function_">Exhibit</span><span class="params">(String ShirtName)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(ShirtName)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;女款衬衫&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WomenShirt</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;男款衬衫&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MenShirt</span>();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//step4:外界调用工厂类的静态方法，传入不同参数创建不同具体产品类的实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactoryPattern</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Factory</span> <span class="variable">exhibitFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Factory</span>();</span><br><span class="line">        <span class="comment">//用户搜索女款衬衫</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//调用工厂类的静态方法，传入参数并创建实例</span></span><br><span class="line">            exhibitFactory.Exhibit(<span class="string">&quot;女款衬衫&quot;</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到商品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户搜索男款裤子</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            exhibitFactory.Exhibit(<span class="string">&quot;男款裤子&quot;</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到商品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户搜索男款衬衫</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            exhibitFactory.Exhibit(<span class="string">&quot;男款衬衫&quot;</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到商品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="mq之间的对比"><a href="#mq之间的对比" class="headerlink" title="mq之间的对比"></a>mq之间的对比</h1><ol><li><p>单机吞吐量</p></li><li><p>topic数量对吞吐量的影响</p></li><li><p>时效性</p></li><li><p>可用性</p></li><li><p>消息可靠性</p></li><li><p>功能支持</p></li></ol><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221031150525952.png" alt="image-20221031150525952"></p><p>实际使用场景对比：</p><p><strong>RabbitMq</strong></p><ul><li>RabbitMQ 的消息应当尽可能的小，并且只用来处理实时且要高可靠性的消息。</li><li>消费者和生产者的能力尽量对等，否则消息堆积会严重影响 RabbitMQ 的性能。</li><li>集群部署，使用热备，保证消息的可靠性。</li><li>erlang 语言开发，性能极其好，延时很低；但是不容易深入研究，无法进行扩展，只能等待社区更新。</li><li>对于中小企业，是最好的选择。</li></ul><p><strong>RocketMQ</strong></p><ul><li>Java 开发的，可以深入学习，定制自己公司的MQ，文档相对来说简单一些。</li><li>接口简单易用，阿里开发大规模应用，值得信赖。</li><li>可以支撑大规模的 topic 数量，支持复杂 MQ 业务场景</li><li>社区活跃度一般，万一不维护，需要自己公司研发。所以没有技术实力的不推荐使用。</li></ul><p><strong>Kafka</strong></p><ul><li>应当有一个非常好的运维监控系统，不单单要监控 Kafka 本身，还要监控 Zookeeper。( kafka 强烈的依赖于zookeeper，如果 zookeeper 挂掉了，那么 Kafka 也不行了)</li><li>对消息顺序不依赖，且不是那么实时的系统。</li><li>有可能消息重复消费，对消息丢失并不那么敏感的系统。</li><li>天然适合大数据实时计算以及日志收集</li></ul><h1 id="一条Update语句执行过程"><a href="#一条Update语句执行过程" class="headerlink" title="一条Update语句执行过程"></a>一条Update语句执行过程</h1><p>具体更新一条记录 UPDATE t_user SET name &#x3D; ‘xiaolin’ WHERE id &#x3D; 1; 的流程如下:</p><ol><li>执行器负责具体执行，会调用存储引擎的接口，通过主键索引树搜索获取 id &#x3D; 1 这一行记录：<ul><li>如果 id&#x3D;1 这一行所在的数据页本来就在 buffer pool 中，就直接返回给执行器更新；</li><li>如果记录不在 buffer pool，将数据页从磁盘读入到 buffer pool，返回记录给执行器。</li></ul></li><li>执行器得到聚簇索引记录后，会看一下更新前的记录和更新后的记录是否一样：<ul><li>如果一样的话就不进行后续更新流程；</li><li>如果不一样的话就把更新前的记录和更新后的记录都当作参数传给 InnoDB 层，让 InnoDB 真正的执行更新记录的操作；</li></ul></li><li>开启事务， InnoDB 层更新记录前，首先要记录相应的 undo log，因为这是更新操作，需要把被更新的列的旧值记下来，也就是要生成一条 undo log，undo log 会写入 Buffer Pool 中的 Undo 页面，不过在内存修改该 Undo 页面后，需要记录对应的 redo log。</li><li>InnoDB 层开始更新记录，会先更新内存（同时标记为脏页），然后将记录写到 redo log 里面，这个时候更新就算完成了。为了减少磁盘I&#x2F;O，不会立即将脏页写入磁盘，后续由后台线程选择一个合适的时机将脏页写入到磁盘。这就是 WAL 技术，MySQL 的写操作并不是立刻写到磁盘上，而是先写 redo 日志，然后在合适的时间再将修改的行数据写到磁盘上。</li><li>至此，一条记录更新完了。</li><li>在一条更新语句执行完成后，然后开始记录该语句对应的 binlog，此时记录的 binlog 会被保存到 binlog cache，并没有刷新到硬盘上的 binlog 文件，在事务提交时才会统一将该事务运行过程中的所有 binlog 刷新到硬盘。</li><li>事务提交（为了方便说明，这里不说组提交的过程，只说两阶段提交）：<ul><li>prepare 阶段：将 redo log 对应的事务状态设置为 prepare，然后将 redo log 刷新到硬盘；</li><li>commit 阶段：将 binlog 刷新到磁盘，接着调用引擎的提交事务接口，将 redo log 状态设置为 commit（将事务设置为 commit 状态后，刷入到磁盘 redo log 文件）；</li></ul></li></ol><h1 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a>锁升级</h1><p><a href="https://blog.csdn.net/weixin_45606067/article/details/126766885">锁升级过程（无锁、偏向锁、轻量级锁、重量级锁）_七月J的博客-CSDN博客_锁升级过程</a></p><h1 id="SpringBoot自动装配"><a href="#SpringBoot自动装配" class="headerlink" title="SpringBoot自动装配"></a>SpringBoot自动装配</h1><p>自动装配spring其实也有,springboot在其基础上,利用SPI机制,进行了进一步优化</p><p>springboot再启动时会对jar包中的META-INF&#x2F;spring.factories文件,将其中的配置类型信息加载到Spring容器</p><p>没有 Spring Boot 的情况下，如果我们需要引入第三方依赖，需要手动配置，非常麻烦。但是，Spring Boot 中，我们直接引入一个 starter 即可。</p><p>引入 starter 之后，我们通过少量注解和一些简单的配置就能使用第三方组件提供的功能了。</p><p>自动装配可以简单理解为：<strong>通过注解或者一些简单的配置就能在 Spring Boot 的帮助下实现某块功能。</strong></p><h1 id="Redis的主从复制怎么实现"><a href="#Redis的主从复制怎么实现" class="headerlink" title="Redis的主从复制怎么实现"></a>Redis的主从复制怎么实现</h1><h2 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h2><ol><li>slvae向master发送同步请求建立连接,包含自己的replacation id和offest(slave本身也是master,有自己的id和offest)</li><li>master发现不一样,将自己的replacation id和offest发送给slave,slave保存版本信息</li><li>master执行bgsave命令生成RDB文件发送给slave,同时在生成RDB文件时,将生成RDB文件时执行的命令保存到repl_backlog</li><li>RDB清空本地文件,保存RDB文件</li><li>master发送repl_backlog,slave执行repl_backlog中的命令</li></ol><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221031214430984.png" alt="image-20221031214430984"></p><h2 id="增量复制"><a href="#增量复制" class="headerlink" title="增量复制"></a>增量复制</h2><ol><li>slave发送replicaof命令发送连接请求,带着自己的replacation id和offest</li><li>master判断id一致,发送continue命令,就将repl_backlog中offset后的命令发送给slave</li><li>slave执行发送过来中的命令</li></ol><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221031214704743.png" alt="image-20221031214704743"></p><h2 id="repl-backlog"><a href="#repl-backlog" class="headerlink" title="repl_backlog"></a>repl_backlog</h2><p>是一个环形数组,master和slave都在其中有offest</p><h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><ol><li>NameServer:整个MQ集群提供服务协调与治理，具体就是记录维护Topic、Broker的信息，及监控Broker的运行状态，Name Server是一个几乎无状态节点，可集群部署，节点之间无任何信息同步，相当于注册中心.</li><li>Broker:消息服务器，作为server提供消息核心服务，每个Broker与Name Server集群中的所有节点建立长连接，定时注册Topic信息到所有Name Server；</li><li>Producer:消息生产者，业务的发起方，负责生产消息传输给broker.</li><li>Consumer:消息消费者，业务的处理方，负责从broker获取消息并进行业务逻辑处理</li></ol><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><ol><li>Exchange:交换机的作用就是根据路由规则，将消息转发到对应的队列上。</li><li>Broker:消息服务器，作为server提供消息核心服务</li><li>Channel:信道是建立在真实TCP连接内的虚拟连接</li><li>Routing key:生产者将消息发送到交换机时，会在消息头上携带一个 key，这个 key就是routing key，来指定这个消息的路由规则。</li><li>Routing key:生产者将消息发送到交换机时，会在消息头上携带一个 key，这个 key就是routing key，来指定这个消息的路由规则。</li></ol><h1 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h1><ol><li>进程是资源分配的基本单位,一个程序至少要一个进程,一个进程至少要一个线程</li><li>进程拥有独立的内存空间,多个线程共享进程的内存和资源</li><li>线程是cpu调度和分派的基本单位,是能够独立运行的基本单元</li><li>同一进程的多个线程能并发执行</li></ol><h1 id="线程池在项目中的运用"><a href="#线程池在项目中的运用" class="headerlink" title="线程池在项目中的运用"></a>线程池在项目中的运用</h1><p>1.使用线程池，将同步方法放入队列中，然后直接返回响应，会极大的提高接口的响应速度</p><h1 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h1><ul><li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li><li>GET产生的URL地址可以被Bookmark，而POST不可以。</li><li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li><li>GET请求只能进行url编码，而POST支持多种编码方式。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li><strong>GET请求在URL中传送的参数是有长度限制的，而POST没有。</strong></li><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li><li><strong>GET比POST更不安全</strong>，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li><li>GET参数通过URL传递，POST放在Request body中</li></ul><h1 id="什么是Mybatics"><a href="#什么是Mybatics" class="headerlink" title="什么是Mybatics"></a>什么是Mybatics</h1><ol><li>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。</li><li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</li><li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</li></ol><h1 id="JVM调优参数"><a href="#JVM调优参数" class="headerlink" title="JVM调优参数"></a>JVM调优参数</h1><p>-Xms12g：初始化堆内存大小为12GB。</p><p>-Xmx12g：堆内存最大值为12GB 。</p><p>-Xmn2400m：新生代大小为2400MB，包括 Eden区与2个Survivor区。</p><p>-XX:SurvivorRatio&#x3D;1：Eden区与一个Survivor区比值为1:1。</p><p>-XX:MaxDirectMemorySize&#x3D;1G：直接内存。报java.lang.OutOfMemoryError: Direct buffer memory 异常可以上调这个值。</p><p>-XX:+DisableExplicitGC：禁止运行期显式地调用 System.gc() 来触发fulll GC。</p><p>注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval&#x3D;86400来控制触发的时间。</p><p>-XX:CMSInitiatingOccupancyFraction&#x3D;60：老年代内存回收阈值，默认值为68。</p><p>-XX:ConcGCThreads&#x3D;4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。</p><p>-XX:ParallelGCThreads&#x3D;8：新生代并行收集器的线程数。</p><p>-XX:MaxTenuringThreshold&#x3D;10：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。</p><p>-XX:CMSFullGCsBeforeCompaction&#x3D;4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。</p><p>-XX:CMSMaxAbortablePrecleanTime&#x3D;500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。</p><h1 id="用spring好处"><a href="#用spring好处" class="headerlink" title="用spring好处"></a>用spring好处</h1><ol><li>方便解耦,简化开发</li><li>AOP编程支持</li><li>方便继承各种框架</li><li>支持IOC</li><li>声明事务的支持</li></ol><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><p><a href="https://blog.csdn.net/qq_41378597/article/details/102934784">Java中自定义注解的使用详解_Evan Wang的博客-CSDN博客</a></p><h1 id="Mybatis-工作原理"><a href="#Mybatis-工作原理" class="headerlink" title="Mybatis 工作原理"></a>Mybatis 工作原理</h1><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/19619362-cc4d5d6e8fa95a8b.png" alt="img"></p><ol><li>读取 Mybatis 配置文件<br>mybatis-config.xml 为 Mybatis 的全局配置文件，配置了 Mybatis 的运行环境等信息，例如数据库连接信息。</li><li>加载映射文件<br>映射文件即 SQL 映射文件，该文件中配置了操作数据库的 SQL 语句，需要在 MyBatis 配置文件 mybatis-config.xml 中加载。mybatis-config.xml 文件可以加载多个映射文件，每个文件对应数据库中的一张表。</li><li>构造会话工厂SqlSessionFactory<br>通过 Mybatis 的环境等配置信息构建会话工厂 SqlSessionFactory。</li><li>创建会话对象SqlSession<br>由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所有方法。</li><li>Executor 执行器<br>Mybatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。</li><li>MappedStatement 对象<br>在 Executor 接口的执行方法中有一个 MappedStatement 类型的参数，该参数是对映射信息的封装，用于存储要映射的 SQL 语句的 id、参数等信息。</li><li>输入参数映射<br>输入参数类型可以是 Map、List 等集合类型，也可以是基本数据类型和 POJO 类型。输入参数映射过程类似于 JDBC 对 preparedStatement 对象设置参数的过程。</li><li>输出结果映射<br>输出结果类型可以是 Map、 List 等集合类型，也可以是基本数据类型和 POJO 类型。输出结果映射过程类似于 JDBC 对结果集的解析过程</li></ol><h1 id="SQL慢查询优化"><a href="#SQL慢查询优化" class="headerlink" title="SQL慢查询优化"></a>SQL慢查询优化</h1><ol><li>sql语句优化,看看有没有用索引</li><li>可能数据量太大影响查询效率,分库分表</li><li>升级服务器,读写分离</li></ol><h1 id="常用http状态码"><a href="#常用http状态码" class="headerlink" title="常用http状态码"></a>常用http状态码</h1><p><em>1xx</em></p><p>1xx 类状态码属于<strong>提示信息</strong>，是协议处理中的⼀种中间状态，实际⽤到的⽐较少。</p><p><em>2xx</em></p><p>2xx 类状态码表示服务器<strong>成功</strong>处理了客户端的请求，也是我们最愿意看到的状态。</p><p>「<strong>200 OK</strong>」是最常⻅的成功状态码，表示⼀切正常。如果是⾮ HEAD 请求，服务器返回的响应头都会有 body</p><p>数据。</p><p>「<strong>204 No Content</strong>」也是常⻅的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。「<strong>206 Partial Content</strong>」是应⽤于 HTTP 分块下载或断点续传，表示响应返回的 body 数据并不是资源的全部，⽽</p><p>是其中的⼀部分，也是服务器处理成功的状态。</p><p><em>3xx</em></p><p>3xx 类状态码表示客户端请求的资源发送了变动，需要客户端⽤新的 URL ᯿新发送请求获取资源，也就是<strong>重定</strong></p><p><strong>向</strong>。</p><p>「<strong>301 Moved Permanently</strong>」表示永久᯿定向，说明请求的资源已经不存在了，需改⽤新的 URL 再次访问。</p><p>「<strong>302 Found</strong>」表示临时᯿定向，说明请求的资源还在，但暂时需要⽤另⼀个 URL 来访问。</p><p>301 和 302 都会在响应头⾥使⽤字段 Location ，指明后续要跳转的 URL，浏览器会⾃动᯿定向新的 URL。</p><p>「<strong>304 Not Modified</strong>」不具有跳转的含义，表示资源未修改，᯿定向已存在的缓冲⽂件，也称缓存᯿定向，⽤于缓</p><p>存控制。</p><p><em>4xx</em></p><p>4xx 类状态码表示客户端发送的<strong>报⽂有误</strong>，服务器⽆法处理，也就是错误码的含义。</p><p>「<strong>400 Bad Request</strong>」表示客户端请求的报⽂有错误，但只是个笼统的错误。</p><p>「<strong>403 Forbidden</strong>」表示服务器禁⽌访问资源，并不是客户端的请求出错。</p><p>「<strong>404 Not Found</strong>」表示请求的资源在服务器上不存在或未找到，所以⽆法提供给客户端。</p><p><em>5xx</em></p><p>5xx 类状态码表示客户端请求报⽂正确，但是<strong>服务器处理时内部发⽣了错误</strong>，属于服务器端的错误码。</p><p>「<strong>500 Internal Server Error</strong>」与 400 类型，是个笼统通⽤的错误码，服务器发⽣了什么错误，我们并不知道。</p><p>「<strong>501 Not Implemented</strong>」表示客户端请求的功能还不⽀持，类似“即将开业，敬请期待”的意思。</p><p>「<strong>502 Bad Gateway</strong>」通常是服务器作为⽹关或代理时返回的错误码，表示服务器⾃身⼯作正常，访问后端服务器</p><p>发⽣了错误。</p><p>「<strong>503 Service Unavailable</strong>」表示服务器当前很忙，暂时⽆法响应服务器，类似“⽹络服务正忙，请稍后᯿试”的意</p><p>思。</p><h1 id="JVM启动参数"><a href="#JVM启动参数" class="headerlink" title="JVM启动参数"></a>JVM启动参数</h1><p><a href="https://www.jianshu.com/p/674c3614ff34">Java VM 启动参数详解 - 简书 (jianshu.com)</a></p><h1 id="接口和抽象类区别"><a href="#接口和抽象类区别" class="headerlink" title="接口和抽象类区别"></a>接口和抽象类区别</h1><ol><li>构造方法</li><li>抽象类可以有普通成员变量,接口中不行</li><li>抽象类可以有普通方法,接口不行</li><li>抽象类可以有静态方法</li><li>一个类可以实现多个接口,只能继承一个抽象类</li><li>抽象类中的抽象方法的访问类型可以是public ，protected和默认类型，但接口中的抽象方法只能是public类型的，并且默认即为public abstract类型。</li><li>抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是public static类型</li></ol><h1 id="TCP-粘包半包问题"><a href="#TCP-粘包半包问题" class="headerlink" title="TCP 粘包半包问题"></a>TCP 粘包半包问题</h1><p><a href="https://juejin.cn/post/6998542006037413895">TCP 粘包半包问题 - 掘金 (juejin.cn)</a></p><h1 id="HTTP协议是有状态还是无状态的？Cookie和Session"><a href="#HTTP协议是有状态还是无状态的？Cookie和Session" class="headerlink" title="HTTP协议是有状态还是无状态的？Cookie和Session"></a>HTTP协议是有状态还是无状态的？Cookie和Session</h1><p><a href="https://blog.csdn.net/ambition_zhou/article/details/115565805">HTTP协议是有状态还是无状态的？Cookie和Session__ambition_的博客-CSDN博客_http协议是有状态协议</a></p><h1 id="什么是响应式处理"><a href="#什么是响应式处理" class="headerlink" title="什么是响应式处理"></a>什么是响应式处理</h1><p>响应式网站设计（Responsive Web design）是一种网络页面设计布局，页面的设计与开发应当根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的响应和调整</p><h1 id="包装类型的常量池技术了解么？"><a href="#包装类型的常量池技术了解么？" class="headerlink" title="包装类型的常量池技术了解么？"></a>包装类型的常量池技术了解么？</h1><p>Java 基本类型的包装类的大部分（Byte,Short,Integer,Long ,Character,Boolean）都实现了常量池技术</p><h1 id="为什么要有包装类型？"><a href="#为什么要有包装类型？" class="headerlink" title="为什么要有包装类型？"></a>为什么要有包装类型？</h1><p>基本类型有默认值、泛型参数不能是基本类型,数据库中取出的值为null,使用基本类型无法接受</p><h1 id="如何创建线程池"><a href="#如何创建线程池" class="headerlink" title="如何创建线程池"></a>如何创建线程池</h1><p>ThreadPoolExecutor,Executors</p><h1 id="Callable和Runnable的区别"><a href="#Callable和Runnable的区别" class="headerlink" title="Callable和Runnable的区别"></a>Callable和Runnable的区别</h1><p>返回值,Callable可以抛出异常</p><h1 id="什么是自动拆装箱？原理？"><a href="#什么是自动拆装箱？原理？" class="headerlink" title="什么是自动拆装箱？原理？"></a><strong>什么是自动拆装箱？原理？</strong></h1><p>基本类型和包装类型之间的互转。装箱其实就是调用了 包装类的valueOf()方法，拆箱其实就是调用了 xxxValue()方法。</p><h1 id="遇到过自动拆箱引发的-NPE-问题吗？"><a href="#遇到过自动拆箱引发的-NPE-问题吗？" class="headerlink" title="遇到过自动拆箱引发的 NPE 问题吗？"></a><strong>遇到过自动拆箱引发的 NPE 问题吗？</strong></h1><p>两个常见的场景：</p><ul><li>数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险</li><li>三目运算符使用不当会导致诡异的 NPE 异常</li></ul><h1 id="x3D-x3D-和-equals-的区别"><a href="#x3D-x3D-和-equals-的区别" class="headerlink" title="&#x3D;&#x3D; 和 equals() 的区别"></a><strong>&#x3D;&#x3D; 和 equals() 的区别</strong></h1><p> &#x3D;&#x3D;对于基本类型和引用类型的作用效果是不同的，equals() 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。equals() 方法存在两种使用情况：</p><ul><li>类没有重写 equals()方法 ：通过equals()比较该类的两个对象时，等价于通过“&#x3D;&#x3D;”比较这两个对象，使用的默认是 Object类equals()方法。</li><li>类重写了 equals()方法 ：一般我们都重写 equals()方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。</li></ul><h1 id="Java-反射？反射有什么优点-x2F-缺点？你是怎么理解反射的"><a href="#Java-反射？反射有什么优点-x2F-缺点？你是怎么理解反射的" class="headerlink" title="Java 反射？反射有什么优点&#x2F;缺点？你是怎么理解反射的"></a>Java 反射？反射有什么优点&#x2F;缺点？你是怎么理解反射的</h1><h1 id="Mybatis-puls原理"><a href="#Mybatis-puls原理" class="headerlink" title="Mybatis-puls原理"></a>Mybatis-puls原理</h1><h1 id="谈谈对-Java-注解的理解，解决了什么问题？"><a href="#谈谈对-Java-注解的理解，解决了什么问题？" class="headerlink" title="谈谈对 Java 注解的理解，解决了什么问题？"></a>谈谈对 Java 注解的理解，解决了什么问题？</h1><h1 id="内部类了解吗？匿名内部类了解吗？"><a href="#内部类了解吗？匿名内部类了解吗？" class="headerlink" title="内部类了解吗？匿名内部类了解吗？"></a><strong>内部类了解吗？匿名内部类了解吗？</strong></h1><p>1.成员内部类</p><p>外部类.内部类 内部类对象 &#x3D; new 外部类().new 内部类();</p><p>2.静态内部类</p><p>可以直接向外部类一样实例化</p><p>3.方法内部类</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20230413164135320.png" alt="image-20230413164135320"></p><ol start="4"><li>匿名内部类</li></ol><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20230413164308943.png" alt="image-20230413164308943"></p><h1 id="创建一个学生选课表和老师授课表"><a href="#创建一个学生选课表和老师授课表" class="headerlink" title="创建一个学生选课表和老师授课表"></a>创建一个学生选课表和老师授课表</h1><h1 id="C语言也有类似于JVM、JDK和JRE的概念。"><a href="#C语言也有类似于JVM、JDK和JRE的概念。" class="headerlink" title="C语言也有类似于JVM、JDK和JRE的概念。"></a>C语言也有类似于JVM、JDK和JRE的概念。</h1><ol><li>编译器（Compiler）：编译器是将C语言源代码转换为计算机可以执行的二进制代码的程序。编译器将源代码作为输入并生成可执行文件作为输出。</li><li>链接器（Linker）：链接器将多个二进制文件链接在一起，形成最终的可执行文件。在C语言中，我们需要将程序中使用的函数链接到相应的库文件中。</li><li>C运行时库（C Runtime Library）：C运行时库是一组库文件，包含许多函数和程序所需的其他资源。在编译和链接过程中，它们与程序一起使用，并在程序运行时提供支持。</li></ol><p>这些概念组成了C语言的基本编译和执行环境。</p><h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><p>1.根节点为黑色</p><p>2.每条路径上的黑节点相同</p><p>3.叶节点必须为黑色</p><p>4.如果一个节点是红色,那么他的子节点是黑色</p><h1 id="Arraylist-和-Vector-、HashMap-和-ConcurrentHashMap"><a href="#Arraylist-和-Vector-、HashMap-和-ConcurrentHashMap" class="headerlink" title="Arraylist 和 Vector 、HashMap 和 ConcurrentHashMap"></a>Arraylist 和 Vector 、HashMap 和 ConcurrentHashMap</h1><h1 id="HashMap-的长度为什么是-2-的幂次方"><a href="#HashMap-的长度为什么是-2-的幂次方" class="headerlink" title="HashMap 的长度为什么是 2 的幂次方"></a><strong>HashMap</strong> <strong>的长度为什么是</strong> <strong>2</strong> <strong>的幂次方</strong></h1><p>💡 提示：提高运算效率。</p><h1 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h1><p>进程是程序的一次执行过程，是系统运行程序的基本单位</p><p><strong>线程是</strong>操作系统可识别的最小执行和调度单位,每个线程有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong></p><h1 id="synchronized-关键字的作用，自己是怎么使用的"><a href="#synchronized-关键字的作用，自己是怎么使用的" class="headerlink" title="synchronized 关键字的作用，自己是怎么使用的"></a>synchronized 关键字的作用，自己是怎么使用的</h1><p>同步和互斥</p><p>单例类双重校验锁</p><p>并发编程</p><p>JDK1.5之前利用的操作系统的Mutex,JDK1.5之后利用的Monitor对象</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ol><li><p>对象头</p><ol><li><p>markword</p><ol><li><p>Hash值</p></li><li><p>GC分代年龄</p></li><li><p>锁状态标志</p></li><li><p>偏向线程ID</p></li><li><p>偏向时间戳</p></li><li><p>指向线程在栈帧中创建的锁记录的指针</p></li><li><p>指向Monitor对象的指针</p></li></ol><p>2.类型指针(指向方法区的类)</p><p>3.数组长度(可以没有)</p></li></ol></li><li><p>实例数据</p></li><li><p>对象填充</p></li></ol><h1 id="synchronized锁升级"><a href="#synchronized锁升级" class="headerlink" title="synchronized锁升级"></a>synchronized锁升级</h1><p>monitor指针指向monitor对象</p><p>monitor基于C++的<strong>ObjectMonitor类</strong>实现.</p><p>monitor对象管理一个各种队列控制获取锁的进程</p><h2 id="无锁"><a href="#无锁" class="headerlink" title="无锁"></a>无锁</h2><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><p>对象头偏向线程ID为获取到锁的ID</p><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><p>线程在栈帧创建一个锁记录,使用CAS将对象头的指向栈帧中锁记录的指针设计为自己的,设置成功则获取到锁,失败自旋获取,再失败进入重量级锁</p><h2 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h2><p>线程进入阻塞状态</p><h1 id="synchronized锁不能降级"><a href="#synchronized锁不能降级" class="headerlink" title="synchronized锁不能降级"></a>synchronized锁不能降级</h1><h1 id="Lock锁和sychronied区别"><a href="#Lock锁和sychronied区别" class="headerlink" title="Lock锁和sychronied区别"></a>Lock锁和sychronied区别</h1><ol><li>两者都是可重入锁</li><li>synchronized依赖于JVM而ReentrantLock依赖于API</li><li>Lock锁比sychronied多了一些高级功能<ol><li>可中断锁       lock.lockInterruptibly()</li><li>可实现公平锁</li><li>可实现选择性通知<ol><li>利用Condition,线程对象可以注册在指定的<code>Condition</code>中，从而可以有选择性的进行线程通知</li><li>synchronized相当于整个 <code>Lock</code> 对象中只有一个<code>Condition</code>实例</li></ol></li></ol></li></ol><h1 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h1><p>1.可见性</p><p>禁用CPU缓存,每次去主存取值</p><p>2.禁止指令重排序</p><p>使用内存屏障</p><h1 id="java对象创建"><a href="#java对象创建" class="headerlink" title="java对象创建"></a>java对象创建</h1><p>1.类加载检查</p><p>2.分配内存</p><p>3.初始化零值</p><p>4.设置对象头</p><p>5.执行init方法</p><h1 id="对象的访问定位的两种方式知道吗"><a href="#对象的访问定位的两种方式知道吗" class="headerlink" title="对象的访问定位的两种方式知道吗"></a>对象的访问定位的两种方式知道吗</h1><p>句柄池</p><p>直接指针</p><h1 id="Gcroot"><a href="#Gcroot" class="headerlink" title="Gcroot"></a>Gcroot</h1><p>1.虚拟机栈</p><p>2.方法区类静态属性</p><p>3.方法区静态常量</p><p>4.本地方法栈</p><h1 id="cms和g1垃圾回收过程"><a href="#cms和g1垃圾回收过程" class="headerlink" title="cms和g1垃圾回收过程"></a>cms和g1垃圾回收过程</h1><p>1.初始标记</p><p>2.并发标记</p><p>3.重新标记        最终标记</p><p>4,并发清理         筛选回收</p><h1 id="安全点和安全区域"><a href="#安全点和安全区域" class="headerlink" title="安全点和安全区域"></a>安全点和安全区域</h1><p>JVM进入特定的位置,记录的信息才能进能暂停用户线程进入GC流程</p><p>某一段代码片段之中，引用关系不会发生变化</p><h1 id="如何设置跨域访问"><a href="#如何设置跨域访问" class="headerlink" title="如何设置跨域访问"></a>如何设置跨域访问</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">服务端设置响应头Access-Contro-Allow-Origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">注解@CrossOrigin</span><br></pre></td></tr></table></figure><p>JSONP </p><p>niginx反向代理</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>飞鱼点评</title>
      <link href="/2022/10/13/%E9%A3%9E%E9%B1%BC%E7%82%B9%E8%AF%84/"/>
      <url>/2022/10/13/%E9%A3%9E%E9%B1%BC%E7%82%B9%E8%AF%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/1680723ca91aa57d719d5cdbc1d910a1.1680723c.jpg" alt="img"></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="跨域感知session"><a href="#跨域感知session" class="headerlink" title="跨域感知session"></a>跨域感知session</h2><p>跨域感知session需要解决两个问题，第一个是解决跨域问题，第二个是解决跨域cookie传输问题</p><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>1.在存在跨域请求问题的类前都加上一句支持跨域操作（服务端解决方式）springboot自带的crossOrigin注解</p><p>@CrossOrigin(origins &#x3D; {“*”},allowCredentials &#x3D; “true”)</p><p>2.，<strong>jQuery会有跨域限制</strong>，用ajax请求对应网页的url文件位置时，静态资源文件和jQuery动态请求是分离状态，所以在ajax请求要加上一句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhrFields:&#123;withCredentials:true&#125;</span><br></pre></td></tr></table></figure><h3 id="跨域传递cookie问题"><a href="#跨域传递cookie问题" class="headerlink" title="跨域传递cookie问题"></a>跨域传递cookie问题</h3><p>@CrossOrigin(origins &#x3D; {“<em>“},allowCredentials &#x3D; “true”,allowedHeaders &#x3D; “</em>“)</p><p>由于课程中仅仅使用了get和post的方法，而这两个方法在跨域请求中都是可以用的，因此allowedHeaders可以不加。</p><p>xhrFields:{withCredentials:true}</p><h1 id="基于Redis实现短信登录"><a href="#基于Redis实现短信登录" class="headerlink" title="基于Redis实现短信登录"></a>基于Redis实现短信登录</h1><p>验证码存储在session中</p><p>主要是session的存储,基于ngnix动态代理,tomcat集群会导致session不一致,因此使用redis存储用户登录信息,</p><p>在第一个拦截器preHandle中拦截所有的路径,当注册完成后，用户去登录会去校验用户提交的手机号和验证码，是否一致，如果一致，则根据手机号查询用户信息，不存在则新建，最后将用户数据保存到redis，并且生成token作为redis的key，将其保存到threadLocal中，并且放行,刷新令牌———-afterCompletion中移除用户</p><p>第二个拦截器只需要判断ThreadLocal中是否有用户是否存在即可</p><p>redis中数据用userdio,保护用户隐私</p><p>redis数据结构采用String存储(有内存消耗)&#x2F;Hash存储方便修改</p><h1 id="商户查询缓存"><a href="#商户查询缓存" class="headerlink" title="商户查询缓存"></a>商户查询缓存</h1><h2 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h2><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017103715235.png" alt="image-20221017103715235"></p><h2 id="数据库缓存不一致解决方案："><a href="#数据库缓存不一致解决方案：" class="headerlink" title="数据库缓存不一致解决方案："></a>数据库缓存不一致解决方案：</h2><p>Cache Aside Pattern 人工编码方式：缓存调用者在更新完数据库后再去更新缓存，也称之为双写方案</p><p>Read&#x2F;Write Through Pattern : 由系统本身完成，数据库与缓存的问题交由系统本身去处理</p><p>Write Behind Caching Pattern ：调用者只操作缓存，其他线程去异步处理数据库，实现最终一致</p><p><strong>方案一实现</strong>:</p><p>利用事务先操作数据库再删除缓存</p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><p>修改ShopController中的业务逻辑，满足下面的需求：</p><p>根据id查询店铺时，如果缓存未命中，则查询数据库，将数据库结果写入缓存，并设置超时时间</p><p>根据id修改店铺时，先修改数据库，再删除缓存</p><h2 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透 ：缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</p><p>常见的解决方案有两种：</p><ul><li>缓存空对象<ul><li>优点：实现简单，维护方便</li><li>缺点：<ul><li>额外的内存消耗</li><li>可能造成短期的不一致</li></ul></li></ul></li><li>布隆过滤<ul><li>优点：内存占用较少，没有多余key</li><li>缺点：<ul><li>实现复杂</li><li>存在误判可能</li></ul></li></ul></li></ul><p>缓存穿透的解决方案有哪些？</p><ul><li>缓存null值</li><li>布隆过滤</li><li>增强id的复杂度，避免被猜测id规律</li><li>做好数据的基础格式校验</li><li>加强用户权限校验</li><li>做好热点参数的限流</li></ul><h4 id="核心思路-1"><a href="#核心思路-1" class="headerlink" title="核心思路"></a>核心思路</h4><p>核心思路如下：</p><p>在原来的逻辑中，我们如果发现这个数据在mysql中不存在，直接就返回404了，这样是会存在缓存穿透问题的</p><p>现在的逻辑中：如果这个数据不存在，我们不会返回404 ，还是会把这个数据写入到Redis中，并且将value设置为空，当再次发起查询时，我们如果发现命中之后，判断这个value是否是null，如果是null，则是之前写入的数据，证明是缓存穿透数据，如果不是，则直接返回数据</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p>解决方案：</p><ul><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿问题也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><p>常见的解决方案有两种：</p><h4 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h4><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017144229327.png" alt="image-20221017144229327"></p><h5 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h5><p>利用redis的setnx方法来表示获取锁，该方法含义是redis中如果没有这个key，则插入成功，返回1，在stringRedisTemplate中返回true，  如果有这个key则插入失败，则返回0，在stringRedisTemplate返回false，我们可以通过true，或者是false，来表示是否有线程成功插入key，成功插入的key的线程我们认为他就是获得到锁的线程。</p><h4 id="逻辑过期"><a href="#逻辑过期" class="headerlink" title="逻辑过期"></a>逻辑过期</h4><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017144236761.png" alt="image-20221017144236761"></p><h5 id="核心思想-1"><a href="#核心思想-1" class="headerlink" title="核心思想"></a>核心思想</h5><p>当用户开始查询redis时，判断是否命中，如果没有命中则直接返回空数据，不查询数据库，而一旦命中后，将value取出，判断value中的过期时间是否满足，如果没有过期，则直接返回redis中的数据，如果过期，则在开启独立线程后直接返回之前的数据，独立线程去重构数据，重构完成后释放互斥锁</p><p>在原来基础上封装逻辑过期时间</p><h3 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h3><ul><li>方法1：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间</li><li>方法2：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置逻辑过期时间，用于处理缓</li></ul><p>存击穿问题</p><ul><li>方法3：根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题</li><li>方法4：根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</li></ul><h1 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h1><h2 id="点评索引创建"><a href="#点评索引创建" class="headerlink" title="点评索引创建"></a>点评索引创建</h2><p>一般我们在构建索引的时候是标准最大化分词模式 ，自己想要搜索词用智能模式 ， 因为它比较贴近用户的语义， 如果搜索词召回的数据比较少就再用最大化分词， 还是不行就逐字分的模式</p><p>1.需要自己先要定义好自己的索引结构、字段类型，分词器模式 ： 整数id, 智能化分词的店名， 标签，地理位置信息， 点评分数， 类目类型id, 类目类型名， 商家的分数， 商家启动或者关闭状态。</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/94bacfbe53964c829acd2fced506d72e.png" alt="在这里插入图片描述"></p><p>2.全量索引构建 ： 一般我们使用logstash-input-jdbc中间件去将数据库数据搞到es中 ， 和elk中e是一样， 起到数据收集功能。 | 这里面有个问题就是如果sql中在执行事务， logstash-input-jdbc拿到的是快照之前的数据，就会出现数据不一致， 这种是可以接受的， 因为搜索不是很强调内容的过于细节的变动，而且增量数据补偿也可以弥补。 | 还是在es中安装logstash-input-jdbc插件— 填写数据库的配置等， 放入sql语句， sql服务器地址， 放入映射关系</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/18b9cf7a1fb44b4baed203331a325a61.png" alt="在这里插入图片描述"></p><p>3.增量（实时修改）索引构建： 增量索引就是通过sql语句去搜索更新日期大于* 的内容，然后对这些数据进行更新。 | 我们也是在es中配置中， 然后在之前的全量索引sql语句中加入时间的判断，当大于自己当前的时间， 更新。 | 到这就实现了刚开始更新全量， 后面实时更新增量的工作， 但是其实这个增量还是比较慢， 而且数据量大的时候会出现更新还没更新完， 还要检测， 结果发现还有很多要更新， 我们后面继续优化。</p><h2 id="应用层接入"><a href="#应用层接入" class="headerlink" title="应用层接入"></a>应用层接入</h2><p>1.最基本的搜索模型 ： 我们根据坐标自定义es语句去计算距离， 然后和搜索的关键字一起定制化打分， 按照分数进行排序 | 这些不同打分权重是根据实际业务去调整的 | 还可以设置关键字只算召回， 排序时候只考虑距离。</p><p>2.注意下面是es的工作流程， 一般es搜索过来的内容取到id, 还要去数据库中再找详细的图片等信息的， es只是负责让你方便的搜， 实际搜索的内容需要用户拿到es返回之后请求sql数据库。</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/378da9ca8673471cb3da8fa78ce7b74d.png" alt="在这里插入图片描述"></p><p>3.java接入 ： 一般我们用restful http 去接入es集群 | 先在java项目中加入包， 然后创建配置， 给出http es client 对象， 然后服务端调用http client 服务对象操作数据 | 如下图所示， 这是一个最最简单的es搜索结果</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/fae3f99a777d4ad687fbbef841cfadcd.png" alt="在这里插入图片描述"></p><ol start="4"><li><p>复杂排序模型的java封装 ： 前面我们简单的java接入是用的高级api， 用函数封装的。 但是我们实际写的搜索模型是比较复杂的， 因此我们复制已经写好的es语句， 替换里面的变量， 以http的get请求发送过去， 最终得到结果。 | 但是这里面的es语句非常复杂， 如果后序要修改非常麻烦， 因为我们直接传入的json文档， 因此我们可以参照mybatis封装sql语句的操作， 以json对象来封装这些底层的语句。 虽然第一次写非常繁琐， 但是后序修改的时候就不用怎么改了, 能够修改部分会加else留空 | 可以看到我们还能根据目录操作进行过滤了， 整体非常流畅 |</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/29e556f6e850489ea5d42acbf34e3342.png" alt="在这里插入图片描述"></p><ol start="5"><li>将之前用sql写的标签过滤搞成es过滤 ， 用来解决无法识别空格的问题。 至此我们的这个搜索模型可以满足大部分需求的， 整个搜索非常强大了。</li><li>额外的改进空间： 分词定制化， 我们需要对凯悦等行业词汇进行专门的定制分词， 对于一些词过滤掉等等 | 相关性 ： 对于一些包含语境的词无法理解， 例如我们说休息其实是想搜住宿， 但是我们的带搜索内容中没有休息， 只有和住宿相关的， 而你搜的休息和住宿对于es而言， 没有相关性， 搜不出来。 | 索引实时性： 我们的搜索是一分钟一次， 但是对于高并发的领域太慢了。</li></ol></li></ol><h2 id="搜索相关性的改造"><a href="#搜索相关性的改造" class="headerlink" title="搜索相关性的改造"></a>搜索相关性的改造</h2><h3 id="定制化中文词库"><a href="#定制化中文词库" class="headerlink" title="定制化中文词库"></a>定制化中文词库</h3><p>   扩展专业词库： 创建新的词库， 然后配置到es中使用， 例如凯悦这个词， 单独搞成词组到词库中 ， 不过需要注意我们搜索的时候凯悦还是分开的， 我们不能重新删除所有索引再来一次全量更新， 那样太麻烦了， 所以我们可以通过自己通过update by query去创建一个凯悦的搜索分词， 这样可以去找实际存储的凯悦分词对应数据 | 注意这个扩展词库在专业领域非常常用，例如电商汽车等垂直领域都要做大量的这些专业 词修改工作 | 一般我会选热更新词库， 自动更新就不用重启去扩展词库 |</p><p>   同义词 ： 我们在词库中一个词位置写苹果，iphone就能代表同义词。 然后设置指定这个包含同义词的分词器到 商家名等关键字的搜索中， 然后更新增量索引 | 最后我们就可以通过苹果搜出iphone了</p><h3 id="重塑相关性"><a href="#重塑相关性" class="headerlink" title="重塑相关性"></a>重塑相关性</h3><p>影响召回 ： 如果我们搜索住宿， 索引里面没有住宿这个门店， 而住宿更像是一种目录， 因此我们增加目录相关性词， 把住宿和休息等词扩展到词库中连接到酒店这个目录， 然后在搜索的时候增加如果匹配到搜索的词是目录词，就把这个词不用按照name来搜， 按照目录来召回， 这样来看就影响了召回， 也更能理解人的需求 | 影响</p><p>影响排序： 将这个相关词的命中了， 写到es的function中去影响排序分数。 | 一般我们的相关词如果影响了召回， 就不太会设置影响排序， 因为根本没有意义， 一般是先开一个如果效果不好的话再开第二个 |</p><h2 id="准实时性的改进"><a href="#准实时性的改进" class="headerlink" title="准实时性的改进"></a>准实时性的改进</h2><p>canel实时增量更新： 之前我们的input_jdbc在面对大量的数据时候，难以处理， 而且每次都是遍历检查时间， 这样太慢了。 我们使用canel伪装成mysql的从库， 每次数据更新的时候master通知canel具体的更新内容， 然后canel根据通知去将数据放入es中， 这样更为方便。 | 这里面canal-adopter是比较简单的， 因此我们使用java代码实际连接canal去做消费， 然后根据不同的业务数据修改， 做出不同的查询与修改， 并更新到es中， 比如你的sql一个门店数据的修改， 就需要改好多个es的index, 因此这些逻辑还是比较复杂的</p><h1 id="优惠卷秒杀"><a href="#优惠卷秒杀" class="headerlink" title="优惠卷秒杀"></a>优惠卷秒杀</h1><h2 id="订单表唯一ID"><a href="#订单表唯一ID" class="headerlink" title="订单表唯一ID"></a>订单表唯一ID</h2><p>id不能容易被发现规律,容易爆露一些信息</p><p>分库分表ID要逻辑唯一</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017145124064.png" alt="image-20221017145124064"></p><h2 id="添加优惠卷"><a href="#添加优惠卷" class="headerlink" title="添加优惠卷"></a>添加优惠卷</h2><p>普通劵和秒杀卷(添加时增加到Redis)</p><h2 id="下单-seckillVoucher"><a href="#下单-seckillVoucher" class="headerlink" title="下单(seckillVoucher)"></a>下单(seckillVoucher)</h2><p>当用户开始进行下单，我们应当去查询优惠卷信息，查询到优惠卷信息，判断是否满足秒杀条件</p><p>比如时间是否充足，如果时间充足，则进一步判断库存是否足够，如果两者都满足，则扣减库存，创建订单，然后返回订单id，如果有一个条件不满足则直接结束。</p><h2 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h2><p>加锁:</p><p>乐观锁和悲观锁</p><p>乐观锁:</p><p>1.要我扣减库存时的库存和之前我查询到的库存是一样的，就意味着没有人在中间修改过库存，那么此时就是安全的，但是以上这种方式通过测试发现会有很多失败的情况</p><p>2.改成stock大于0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock= stock -1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update().gt(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>); <span class="comment">//where id = ? and stock &gt; 0</span></span><br></pre></td></tr></table></figure><h2 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h2><p>在seckillVoucher中增加根据优惠卷id和用户id查询是否已经下过这个订单，如果下过这个订单，则不再下单，否则进行下单</p><h3 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h3><p>在方法(createVoucherOrder)上加锁</p><h3 id="锁太大"><a href="#锁太大" class="headerlink" title="锁太大"></a>锁太大</h3><p>锁住Long userId &#x3D; UserHolder.getUser().getId();</p><p>保证同一把锁,使用synchronized(userId.toString().intern()){</p><h3 id="事务问题"><a href="#事务问题" class="headerlink" title="事务问题"></a>事务问题</h3><p>事务方法未提交锁会先释放</p><p>seckillVoucher 方法中，添加以下逻辑，这样就能保证事务的特性，同时也控制了锁的粒度</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017152406530.png" alt="image-20221017152406530"></p><h3 id="事务要使用代理对象调用"><a href="#事务要使用代理对象调用" class="headerlink" title="事务要使用代理对象调用"></a>事务要使用代理对象调用</h3><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017152436247.png" alt="image-20221017152436247"></p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>多台tomcat服务器锁会不同</p><p>使用分布式锁</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017152730970.png" alt="image-20221017152730970"></p><h4 id="redis实现分布式锁"><a href="#redis实现分布式锁" class="headerlink" title="redis实现分布式锁"></a>redis实现分布式锁</h4><ul><li>利用set nx满足互斥性</li><li>利用set ex保证故障时锁依然能释放，避免死锁，提高安全性</li><li>利用Redis集群保证高可用和高并发特性</li></ul><p>自建类实现ILock接口中的tryLock和unLock方法</p><p>我们利用redis 的setNx 方法，当有多个线程进入时，我们就利用该方法，第一个线程进入时，redis 中就有这个key 了，返回了1，如果结果是1，则表示他抢到了锁，那么他去执行业务，然后再删除锁，退出锁逻辑，没有抢到锁的哥们，等待一定时间后重试即可</p><h5 id="锁的误删1"><a href="#锁的误删1" class="headerlink" title="锁的误删1"></a>锁的误删1</h5><p>持有锁的线程在锁的内部出现了阻塞，导致他的锁自动释放，这时其他线程，线程2来尝试获得锁，就拿到了这把锁，然后线程2在持有锁执行过程中，线程1反应过来，继续执行，而线程1执行过程中，走到了删除锁逻辑，此时就会把本应该属于线程2的锁进行删除，这就是误删别人锁的情况说明</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017153320391.png" alt="image-20221017153320391"></p><p><strong>解决办法:</strong></p><p>核心逻辑：在存入锁时，放入自己线程的标识，在删除锁时，判断当前这把锁的标识是不是自己存入的，如果是，则进行删除，如果不是，则不进行删除。</p><h5 id="锁的误删2"><a href="#锁的误删2" class="headerlink" title="锁的误删2"></a>锁的误删2</h5><p>线程1删除锁时,判断完是自己的锁,删除锁之前锁超时释放,线程2拿到锁,线程1把线程2的锁删了</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017153532641.png" alt="image-20221017153532641"></p><p>主要是命令不是原子性</p><p><strong>解决办法:</strong></p><p>Lua脚本</p><h5 id="Lua脚本解决多条命令原子性问题"><a href="#Lua脚本解决多条命令原子性问题" class="headerlink" title="Lua脚本解决多条命令原子性问题"></a>Lua脚本解决多条命令原子性问题</h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这里的 KEYS[1] 就是锁的key，这里的ARGV[1] 就是当前线程标示</span></span><br><span class="line"><span class="comment">-- 获取锁中的标示，判断是否与当前线程标示一致</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;GET&#x27;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">  <span class="comment">-- 一致，则删除锁</span></span><br><span class="line">  <span class="keyword">return</span> redis.call(<span class="string">&#x27;DEL&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 不一致，则直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        UNLOCK_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">        UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>));</span><br><span class="line">        UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 调用lua脚本</span></span><br><span class="line">    stringRedisTemplate.execute(</span><br><span class="line">            UNLOCK_SCRIPT,</span><br><span class="line">            Collections.singletonList(KEY_PREFIX + name),</span><br><span class="line">            ID_PREFIX + Thread.currentThread().getId());</span><br><span class="line">&#125;</span><br><span class="line">经过以上代码改造后，我们就能够实现 拿锁比锁删锁的原子性动作了~</span><br></pre></td></tr></table></figure><h3 id="分布式锁-redission"><a href="#分布式锁-redission" class="headerlink" title="分布式锁-redission"></a>分布式锁-redission</h3><h4 id="setnx问题"><a href="#setnx问题" class="headerlink" title="setnx问题"></a>setnx问题</h4><p>重入问题,不可重试,超时释放,主从一致性</p><h4 id="Redission是什么"><a href="#Redission是什么" class="headerlink" title="Redission是什么"></a>Redission是什么</h4><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。</p><p>Redission提供了分布式锁的多种多样的功能</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017155253688.png" alt="image-20221017155253688"></p><p>使用前要在@Configuration+Bean配置</p><h4 id="redission可重入锁原理"><a href="#redission可重入锁原理" class="headerlink" title="redission可重入锁原理"></a>redission可重入锁原理</h4><p>底层的一个voaltile的一个state变量来记录重入的状态</p><h4 id="redission锁的MutiLock原理"><a href="#redission锁的MutiLock原理" class="headerlink" title="redission锁的MutiLock原理"></a>redission锁的MutiLock原理</h4><p>把锁加锁的逻辑需要写入到每一个主丛节点上，只有所有的服务器都写入成功，此时才是加锁成功</p><p>当我们去设置了多个锁时，redission会将多个锁添加到一个集合中，然后用while循环去不停去尝试拿锁，但是会有一个总共的加锁时间，这个时间是用需要加锁的个数 * 1500ms ，假设有3个锁，那么时间就是4500ms，假设在这4500ms内，所有的锁都加锁成功， 那么此时才算是加锁成功，如果在4500ms有线程加锁失败，则会再次去进行重试.</p><h2 id="秒杀优化"><a href="#秒杀优化" class="headerlink" title="秒杀优化"></a>秒杀优化</h2><p>1、查询优惠卷</p><p>2、判断秒杀库存是否足够</p><p>3、查询订单</p><p>4、校验是否是一人一单</p><p>5、扣减库存</p><p>6、创建订单</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017160811292.png" alt="image-20221017160811292"></p><p>在Redis中使用判断秒杀库存和校验一人一单,保存信息到阻塞队列,异步完成下单</p><h3 id="使用rocketmq处理异步消息"><a href="#使用rocketmq处理异步消息" class="headerlink" title="使用rocketmq处理异步消息"></a>使用rocketmq处理异步消息</h3><h3 id="库存售罄标识"><a href="#库存售罄标识" class="headerlink" title="库存售罄标识"></a>库存售罄标识</h3><p>使用redis  set一个标记</p><h2 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h2><h3 id="秒杀令牌"><a href="#秒杀令牌" class="headerlink" title="秒杀令牌"></a>秒杀令牌</h3><p>验证和下单强关联,要解耦</p><h3 id="秒杀大闸"><a href="#秒杀大闸" class="headerlink" title="秒杀大闸"></a>秒杀大闸</h3><p>设置一个以秒杀商品初始库存x倍数量作为秒杀大闸，若超出这个数量，则无法发放秒杀令牌</p><p>redisTemplate.opsForValue().set(“promo_door_count_”+promoId,itemModel.getStock().intValue()*5);</p><h3 id="队列泄洪"><a href="#队列泄洪" class="headerlink" title="队列泄洪"></a>队列泄洪</h3><ul><li><p>排队有些时候比并发更高效</p></li><li><p>依靠排队去限制并发流量</p></li><li><p>依靠排队和下游拥塞窗口程度调整队列释放流量大小</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private ExecutorService executorService;</span><br><span class="line"></span><br><span class="line"> @PostConstruct</span><br><span class="line">public void init()&#123;</span><br><span class="line">    //定义一个只有20个可工作线程的线程池</span><br><span class="line">   executorService = Executors.newFixedThreadPool(20);</span><br><span class="line">&#125;</span><br><span class="line"> //同步调用线程池的submit方法</span><br><span class="line">//拥塞窗口为20的等待队列，用来队列化泄洪</span><br><span class="line"> Future&lt;Object&gt; future = executorService.submit(new Callable&lt;Object&gt;() &#123;</span><br><span class="line">   @Override</span><br><span class="line">   public Object call() throws Exception &#123;</span><br><span class="line">      //加入库存流水init状态</span><br><span class="line">       String stockLogId = itemService.initStockLog(itemId,amount);</span><br><span class="line">       //再去完成对应的下单事务型消息机制</span><br><span class="line">       if(!mqProducer.transactionAsyncReduceStock(userModel.getId(),itemId,promoId,amount,stockLogId))&#123;</span><br><span class="line">           throw new BusinessException(EmBusinessError.UNKNOWN_ERROR,&quot;下单失败&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">          return null;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            future.get();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            throw new BusinessException(EmBusinessError.UNKNOWN_ERROR);</span><br><span class="line">        &#125; catch (ExecutionException e) &#123;</span><br><span class="line">            throw new BusinessException(EmBusinessError.UNKNOWN_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return CommonReturnType.create(null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="防刷限流"><a href="#防刷限流" class="headerlink" title="防刷限流"></a>防刷限流</h2><h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><ul><li>流量远比你想的要多</li><li>系统活着比挂了要好</li><li>宁愿只让少数人能用，也不要让所有人不能用</li></ul><h4 id="限流方法"><a href="#限流方法" class="headerlink" title="限流方法"></a>限流方法</h4><h5 id="限并发"><a href="#限并发" class="headerlink" title="限并发"></a>限并发</h5><p>对同一时间固定访问接口的线程数做限制，利用<strong>全局计数器</strong>，在下单接口OrderController处加一个全局计数器，并支持并发操作，当controller在入口的时候，计数器减1，判断计数器是否大于0，在出口时计数器加一，就可以控制同一时间访问的固定。</p><h5 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h5><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1NraXJvbllvbmcvc2tpcm9uSW1ncy9pbWcvMjAyMDA3MDQyMjUzMjYucG5n" alt="img"></p><p>令牌桶算法可以做到客户端一秒访问10个流量，下一秒就是下一个10个流量，限定某个时刻的最大值</p><h5 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h5><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1NraXJvbllvbmcvc2tpcm9uSW1ncy9pbWcvMjAyMDA3MDQyMjUzMzAucG5n" alt="img"></p><p>漏桶算法的目的用来<strong>平滑网络流量</strong>，没有办法应对突发流量</p><h1 id="附近的商户"><a href="#附近的商户" class="headerlink" title="附近的商户"></a>附近的商户</h1><p>批量写入locations</p><p>根据距离排序查询,截取距离</p><h1 id="用户签到"><a href="#用户签到" class="headerlink" title="用户签到"></a>用户签到</h1><p>Redis中是利用string类型数据结构实现BitMap</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017193820343.png" alt="image-20221017193820343"></p><p>Redis中是利用string类型数据结构实现BitMap</p><p>把年和月作为bitMap的key，然后保存到一个bitMap中，每次签到就到对应的位上把数字从0变成1，只要对应是1，就表明说明这一天已经签到了，反之则没有签到</p><h2 id="签到统计"><a href="#签到统计" class="headerlink" title="签到统计"></a>签到统计</h2><p>什么叫做连续签到天数？</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017195406010.png" alt="image-20221017195406010"></p><p>如何得到本月到今天为止的所有签到数据？</p><p>  BITFIELD key GET u[dayOfMonth] 0</p><p>如何从后向前遍历每个bit位？</p><p>num &gt;&gt;&gt;&#x3D; 1;</p><p>和1&amp;运算,1签到,0未签到</p><h2 id="hash思想"><a href="#hash思想" class="headerlink" title="hash思想"></a>hash思想</h2><p>id % bitmap.size  &#x3D; 算出当前这个id对应应该落在bitmap的哪个索引上，然后将这个值从0变成1，然后当用户来查询数据时，此时已经没有了list，让用户用他查询的id去用相同的哈希算法， 算出来当前这个id应当落在bitmap的哪一位，然后判断这一位是0，还是1，如果是0则表明这一位上的数据一定不存在，  采用这种方式来处理，需要重点考虑一个事情，就是误差率，所谓的误差率就是指当发生哈希冲突的时候，产生的误差。</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017195935373.png" alt="image-20221017195935373"></p><h1 id="好友关注"><a href="#好友关注" class="headerlink" title="好友关注"></a>好友关注</h1><p>表tb_follow</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017163730702.png" alt="image-20221017163730702"></p><ul><li>关注和取关接口</li><li>判断是否关注的接口</li></ul><h2 id="共同关注"><a href="#共同关注" class="headerlink" title="共同关注"></a>共同关注</h2><p>关注时使用放入关注set集合,取关时从set移除</p><p>利用set的求交集api查找共同关注</p><h2 id="Feed流实现方案"><a href="#Feed流实现方案" class="headerlink" title="Feed流实现方案"></a>Feed流实现方案</h2><p>Feed流产品有两种常见模式：</p><p>Timeline：不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈</p><p>智能排序：利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户</p><p>Timeline模式实现方案有三种：</p><ul><li>拉模式</li><li>推模式</li><li>推拉结合</li></ul><h2 id="推送消息到收件箱"><a href="#推送消息到收件箱" class="headerlink" title="推送消息到收件箱"></a>推送消息到收件箱</h2><p>数据结构sortset</p><p>就是我们在保存完探店笔记后，获得到当前笔记的粉丝(查数据库)，然后把数据推送到粉丝的redis中去。</p><p> stringRedisTemplate.opsForZSet().add(key, blog.getId().toString(), System.currentTimeMillis())</p><h2 id="实现分页查询收件箱"><a href="#实现分页查询收件箱" class="headerlink" title="实现分页查询收件箱"></a>实现分页查询收件箱</h2><p>从最大值开始查,查几条,不关心最小值</p><p>tringRedisTemplate.opsForZSet() .reverseRangeByScoreWithScores(key, 0, max, offset, 2);</p><p>key:</p><p>0:最小值</p><p>max:当前时间戳||lastid</p><p>offset;与lastid相同元素的个数</p><p>2:取几条</p><p>倒序返回固定条数记录,将id放入数组,计算offset,设置mintime,相同os++,不同重置</p><p>查询数据库时in字段查询无序,要使用order by fileld</p><h1 id="达人探店"><a href="#达人探店" class="headerlink" title="达人探店"></a>达人探店</h1><h2 id="发布探店笔记"><a href="#发布探店笔记" class="headerlink" title="发布探店笔记"></a>发布探店笔记</h2><p>tb_blog：探店笔记表，包含笔记中的标题、文字、图片等<br>tb_blog_comments：其他用户对探店笔记的评价</p><h2 id="查看探店笔记"><a href="#查看探店笔记" class="headerlink" title="查看探店笔记"></a>查看探店笔记</h2><h2 id="点赞功能"><a href="#点赞功能" class="headerlink" title="点赞功能"></a>点赞功能</h2><p>使用Redis的set集合</p><ul><li>给Blog类中添加一个isLike字段，标示是否被当前用户点赞</li><li>修改点赞功能，利用Redis的set集合判断是否点赞过，未点赞过则点赞数+1，已点赞过则点赞数-1</li><li>修改根据id查询Blog的业务，判断当前登录用户是否点赞过，赋值给isLike字段</li><li>修改分页查询Blog业务，判断当前登录用户是否点赞过，赋值给isLike字段</li></ul><h2 id="点赞排行榜"><a href="#点赞排行榜" class="headerlink" title="点赞排行榜"></a>点赞排行榜</h2><p>使用sortedSet</p><p>使用&#x2F;&#x2F; 1.查询top5的点赞用户 zrange key 0 4<br>    Set<String> top5 &#x3D; stringRedisTemplate.opsForZSet().range(key, 0, 4);</p><p>再从数据库查找相关用户</p><h1 id="UV统计"><a href="#UV统计" class="headerlink" title="UV统计"></a>UV统计</h1><p>Redis中的HLL是基于string结构实现的，单个HLL的内存<strong>永远小于16kb</strong>，<strong>内存占用低</strong>的令人发指！作为代价，其测量结果是概率性的，<strong>有小于0.81％的误差</strong>。不过对于UV统计来说，这完全可以忽略。</p><ul><li>UV：全称Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1天内同一个用户多次访问该网站，只记录1次。</li><li>PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录1次PV，用户多次打开页面，则记录多次PV。往往用来衡量网站的流量。</li></ul><p>使用HyperLogLog统计进UV数</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/image-20221017200311746.png" alt="image-20221017200311746"></p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h1 id="nginx反向代理-x2F-OpenResty"><a href="#nginx反向代理-x2F-OpenResty" class="headerlink" title="nginx反向代理&#x2F;OpenResty"></a>nginx反向代理&#x2F;OpenResty</h1><ul><li>设置upstream server</li><li>设置动态请求location为proxy pass 路径</li></ul><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1NraXJvbllvbmcvc2tpcm9uSW1ncy9pbWcvMjAyMDA2MTgyMjQ3MzYucG5n" alt="img"></p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1NraXJvbllvbmcvc2tpcm9uSW1ncy9pbWcvMjAyMDA2MTgyMjQ3MzMucG5n" alt="img"></p><h2 id="Nginx高性能原因"><a href="#Nginx高性能原因" class="headerlink" title="Nginx高性能原因"></a>Nginx高性能原因</h2><h3 id="epoll多路复用"><a href="#epoll多路复用" class="headerlink" title="epoll多路复用"></a>epoll多路复用</h3><h3 id="master-worker进程模型"><a href="#master-worker进程模型" class="headerlink" title="master worker进程模型"></a>master worker进程模型</h3><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1NraXJvbllvbmcvc2tpcm9uSW1ncy9pbWcvMjAyMDA2MjExNDM5NDIucG5n" alt="img"></p><h3 id="协程机制"><a href="#协程机制" class="headerlink" title="协程机制"></a>协程机制</h3><ul><li>依附于线程的内存模型，切换开销小</li></ul><p>一个线程可以有多个协程，不需要cpu切换的开销，只要内存切换。</p><ul><li>遇阻塞及归还执行权，代码同步</li><li>无需加锁</li></ul><h1 id="多级缓存"><a href="#多级缓存" class="headerlink" title="多级缓存"></a>多级缓存</h1><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ol><li>依靠文件系统存索引级的文件(将请求存成本地文件，在本地磁盘中)</li><li>依靠内存缓存文件地址       key中的value存文件地址,</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#声明一个cache缓存节点的内容</span><br><span class="line">proxy_cache_path /usr/local/openresty/nginx/tmp_cache levels=1:2 keys_zone=tmp_cache:100m inactive=7d max_size=10g;</span><br><span class="line"></span><br><span class="line">//做一个二级目录，先将对应的url做一次hash,取最后一位做一个文件目录的索引；</span><br><span class="line">//在取一位做第二级目录的索引来完成对应的操作，文件内容分散到多个目录，减少寻址的消耗</span><br><span class="line">//在nginx内存当中，开了100m大小的空间用来存储keys_zone中的所有的key</span><br><span class="line">//文件存取7天,文件系统组多存取10个G</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_cache tmp_cache;</span><br><span class="line">proxy_cache_key &amp;uri;</span><br><span class="line">proxy_cache_valid 200 206 304 302 7d;//只有后端返回的状态码是这些，对应的cache操作才会生效，缓存周期7天</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>shared dic：共享内存字典，所有worker进程可见</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lua_shared_dict my_cache 128m;</span><br><span class="line"></span><br><span class="line">location /luaitem/get &#123;</span><br><span class="line">            default_type &quot;application/json&quot;;</span><br><span class="line">            content_by_lua_file ../lua/itemsharedic.lua;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="页面静态化"><a href="#页面静态化" class="headerlink" title="页面静态化"></a>页面静态化</h1>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker搭建kafka</title>
      <link href="/2022/10/05/docker%E6%90%AD%E5%BB%BAkafka/"/>
      <url>/2022/10/05/docker%E6%90%AD%E5%BB%BAkafka/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://cloud.tencent.com/developer/article/1966444">【愚公系列】2022年03月 Docker容器 Kafka集群的搭建 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker挂载配置文件启动redis错误</title>
      <link href="/2022/09/15/docker%E6%8C%82%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%AF%E5%8A%A8redis%E9%94%99%E8%AF%AF/"/>
      <url>/2022/09/15/docker%E6%8C%82%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%AF%E5%8A%A8redis%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="腾讯云使用docker直接启动redis没有问题-使用挂载方式无法启动"><a href="#腾讯云使用docker直接启动redis没有问题-使用挂载方式无法启动" class="headerlink" title="腾讯云使用docker直接启动redis没有问题,使用挂载方式无法启动"></a><strong>腾讯云使用docker直接启动redis没有问题,使用挂载方式无法启动</strong></h1><ol><li>按照流程重新安装启动仍旧报错</li><li>安装网上方法修改配置文件将守护进程设置为no仍不可以</li><li>最终找到解决办法<a href="https://juejin.cn/post/7083872789580480525">记一次docker 启动redis无报错无法启动问题 - 掘金 (juejin.cn)</a></li></ol><p><strong>挂载的redis.conf需要使用chmod 777命令设置读写权限</strong></p><p><strong>使用springdata-redis时yaml配置文件redis的密码要加英文引号</strong></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet是什么?</title>
      <link href="/2022/08/31/Servlet%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2022/08/31/Servlet%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Servlet是什么"><a href="#Servlet是什么" class="headerlink" title="Servlet是什么"></a>Servlet是什么</h1><p>servlet就是Server Applet（运行在服务端的小程序）,浏览器请求到达服务器端端口后,请求就交给Servlet处理.</p><h1 id="Servlet怎么来的"><a href="#Servlet怎么来的" class="headerlink" title="Servlet怎么来的"></a>Servlet怎么来的</h1><p>服务端处理请求分三个步骤:</p><p>1.接受请求 2.处理请求 3. 响应请求</p><p>处理请求都要做因此服务器专门设置servlet处理这些请求,后来将业务分离,多出了service和Dao</p><p><img src="https://pic1.zhimg.com/v2-f41587429ebde63225029b0c235960c1_r.jpg?source=1940ef5c"></p><h1 id="javaweb没有main函数怎么运行"><a href="#javaweb没有main函数怎么运行" class="headerlink" title="javaweb没有main函数怎么运行"></a>javaweb没有main函数怎么运行</h1><p><strong>不知道从什么时候开始,我们已经不在关心,甚至根本不知道到底谁调用了我写的这个程序,反正我写了这么一个类,甚至根本没有new过,他就跑起来了….</strong></p><p>从tomcat开始我们再也没写过main方法</p><p><img src="https://pic3.zhimg.com/v2-ce6e39bb02e3c6a2f4eb1e5afaa6e4e6_r.jpg?source=1940ef5c" alt="img"></p><p><img src="https://pic4.zhimg.com/v2-14c18b69b5fb642f8d56698d2df20171_r.jpg?source=1940ef5c" alt="img"></p><p><img src="https://pic2.zhimg.com/v2-d473a8662d758859e75c3f9afce9e982_r.jpg?source=1940ef5c" alt="img"></p><h1 id="Servlet的具体实现"><a href="#Servlet的具体实现" class="headerlink" title="Servlet的具体实现"></a>Servlet的具体实现</h1><p>连接数据库涉及Tcp连接socket使用大多数厂商都是封装了驱动供我们使用,而Sevlet却留给我们接口</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/v2-1a911529c489ebdcb2a17a8e19d87290_r.jpg" alt="img"></p><p>tomcat已经为我们解决了ServletConfig,ServletRequest,ServletResponse参数</p><h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><p>利用xml中的配置通过反射创建Servlet和解析加载xml配置到</p><p><img src="https://picx.zhimg.com/v2-3dd656100783b3e9e62621ad8e2e9b04_r.jpg?source=1940ef5c" alt="img"></p><h2 id="Request-x2F-Response"><a href="#Request-x2F-Response" class="headerlink" title="Request&#x2F;Response"></a>Request&#x2F;Response</h2><p>tomcat通过字符串解析将请求头,请求地址,请求参数都封装到Request中</p><p>serivce()方法每当有请求都要调用</p><p><img src="https://pic1.zhimg.com/v2-7405fb1912570c73de8dd76da725b17c_r.jpg?source=1940ef5c" alt="img"></p><h2 id="区分浏览器Get-x2F-Post"><a href="#区分浏览器Get-x2F-Post" class="headerlink" title="区分浏览器Get&#x2F;Post"></a>区分浏览器Get&#x2F;Post</h2><p>GenericServlet继承Servlet</p><p><img src="https://picx.zhimg.com/v2-b9f65e77009de2832d721cb28d5ae6f1_r.jpg?source=1940ef5c" alt="img"></p><p><strong>HttpServlet继承GenericServlet</strong></p><p><img src="https://pic1.zhimg.com/v2-73b703e690ce018ffe88280376a67dc0_r.jpg?source=1940ef5c" alt="img"></p><p><strong>HttpServlet使用模板方法模式</strong></p><p>HttpServlet设置为抽象类不允许实例化</p><p><img src="https://pica.zhimg.com/v2-b33c2c238803958be0bfa70d0f40c211_r.jpg?source=1940ef5c" alt="img"></p><img src="https://pic2.zhimg.com/v2-250e370a7548fa65ed70d73ff82f2829_r.jpg?source=1940ef5c" alt="img" style="zoom:25%;" /><h1 id="ServletContext是什么"><a href="#ServletContext是什么" class="headerlink" title="ServletContext是什么"></a>ServletContext是什么</h1><p>ServletContext是个容器,服务器启动时创建,关闭时销毁</p><p>两个servlet之间可以共享数据</p><p><img src="https://pic1.zhimg.com/80/v2-291c4b8583663764b091fa2acd37e724_1440w.jpg" alt="img"></p><p>每一个动态web工程，都应该在WEB-INF下创建一个web.xml，它代表当前整个应用。Tomcat会根据这个配置文件创建ServletContext对象</p><p><img src="https://pic2.zhimg.com/v2-40ed984999cab23bc4e9e17a39e84839_r.jpg" alt="img"></p><h1 id="Servlet映射器"><a href="#Servlet映射器" class="headerlink" title="Servlet映射器"></a>Servlet映射器</h1><p>映射器，其实就是Tomcat中一个叫Mapper的类</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/v2-ff68a99ab3c8a9d9b2bffbc51e22608b_r.jpg" alt="img"></p><p>对于静态资源，Tomcat最后会交由一个叫做DefaultServlet的类来处理<br>对于Servlet ，Tomcat最后会交由一个叫做 InvokerServlet的类来处理<br>对于JSP，Tomcat最后会交由一个叫做JspServlet的类来处理</p><p><img src="https://scf-deploy-ap-guangzhou-1301571523.cos.ap-guangzhou.myqcloud.com//blog/v2-42c3d43b3b7dd56851d1018d2186d1f0_r.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2022/04/06/2022-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/04/06/2022-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="TCP-x2F-IP网络模型"><a href="#TCP-x2F-IP网络模型" class="headerlink" title="TCP&#x2F;IP网络模型"></a>TCP&#x2F;IP网络模型</h2><p>应⽤层是⼯作在操作系统中的⽤户态，传输层及以下则⼯作在内核态.</p><p>TCP 相⽐ UDP 多了很多特性，比如流量控制、超时重传、拥塞控制等</p><p>UDP 也可以实现可靠传输，把 TCP 的特性在应⽤层上实现就可以</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客</title>
      <link href="/2022/03/30/2022-hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/03/30/2022-hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="git客户端密码位置要用token登录才可以"><a href="#git客户端密码位置要用token登录才可以" class="headerlink" title="git客户端密码位置要用token登录才可以"></a>git客户端密码位置要用token登录才可以</h2><h3 id="生成自己的token"><a href="#生成自己的token" class="headerlink" title="生成自己的token"></a>生成自己的token</h3><ol><li><p>在<code>个人设置页面</code>，找到<code>Setting</code></p></li><li><p>选择开发者设置<code>Developer setting</code></p></li><li><p>选择个人访问令牌<code>Personal access tokens</code>，然后选中生成令牌<code>Generate new token</code></p></li><li><p>设置token的有效期，访问权限等</p></li><li><p>设置token的有效期，访问权限等</p></li><li><p>在git客户端输入    git config –system –unset credential.helper即可重新输入密码</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口</title>
      <link href="/2022/03/28/2022-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
      <url>/2022/03/28/2022-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(right &lt; s.size())&#123;</span><br><span class="line"><span class="comment">//扩大窗口</span></span><br><span class="line">window.add(s[right]);</span><br><span class="line">right++;</span><br><span class="line"><span class="keyword">while</span>(windos need shrink)&#123;</span><br><span class="line">window.remove(s[left]);</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm学习</title>
      <link href="/2022/03/20/2022-ssm%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/20/2022-ssm%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><h2 id="学习遇到的问题"><a href="#学习遇到的问题" class="headerlink" title="学习遇到的问题"></a>学习遇到的问题</h2><ol><li><p><strong>mysql导的包</strong>的版本要和用的版本一致</p></li><li><p>没有<strong>resource文件夹</strong>要在File菜单下创建</p></li><li><p>JSP  EL表达式无效在jsp页面设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; isELIgnored=&quot;false&quot; %&gt;</span><br></pre></td></tr></table></figure></li><li><p>新建文件夹可能是因为maven项目的原因,要clean一下</p></li></ol><p><img src="https://s2.loli.net/2022/03/23/anTMmDPqQhkj9cW.png" alt="image-20220323210931233"></p><p>5.遇到解决不了的问题先clean再重启</p><p>6.Mysql5和8驱动不一样</p><p>7.pagehelper插件4.0.0以后的版本支持自动识别使用的数据库，可以不用配置数据库方言</p><p>8.在mybatis中添加插件时，interceptor属性指定的类与版本不匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4:interceptor=&quot;com.github.pagehelper.PageHelper&quot;</span><br><span class="line">5:interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;</span><br></pre></td></tr></table></figure><p>9.mybatics一对多xml配置resultmap -&gt;collection时要注意左连接还是右连接</p><p>10.解决Intellij IDEA Tomcat启动项目报错：java.lang.ClassNotFoundException:org.springframework.web.context.ContextLoaderListener</p><p><a href="https://www.jianshu.com/p/18d068f47b09">解决Intellij IDEA Tomcat启动项目报错：java.lang.ClassNotFoundException:org.springframework.web.context.ContextLoaderListener - 简书 (jianshu.com)</a></p><h2 id="web-xml中配置Listener监听器的作用"><a href="#web-xml中配置Listener监听器的作用" class="headerlink" title="web.xml中配置Listener监听器的作用"></a>web.xml中配置Listener监听器的作用</h2><p>目的就是将spring容器交给web容器，随着web容器的创建与销毁</p><p>ContextLoaderListener监听器的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。在ContextLoaderListener中关联了ContextLoader这个类，所以整个加载配置过程由ContextLoader来完成</p>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> springmvc </tag>
            
            <tag> mybatics </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法思想</title>
      <link href="/2022/03/19/2022-%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
      <url>/2022/03/19/2022-%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol><li>有时HashMap,HashSet能帮助我们处理一些无序数组的问题</li><li>排序后考虑下重复问题</li></ol><h1 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h1><h2 id="普通"><a href="#普通" class="headerlink" title="普通"></a>普通</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length;</span><br><span class="line">       <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right -left)/<span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">               <span class="keyword">return</span> mid;</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">               left = mid + <span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               right = mid;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="搜索左侧边界"><a href="#搜索左侧边界" class="headerlink" title="搜索左侧边界"></a>搜索左侧边界</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binartSearch</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>  -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= nums.length || nums[left] != target)&#123;</span><br><span class="line">        <span class="keyword">return</span>  -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="搜索右侧边界"><a href="#搜索右侧边界" class="headerlink" title="搜索右侧边界"></a>搜索右侧边界</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binartSearch</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>  -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注意最后终止时为left == right,right侧为开区间,因此要减1.</span></span><br><span class="line">    <span class="keyword">if</span>(nums[right - <span class="number">1</span>] != target)&#123;</span><br><span class="line">        <span class="keyword">return</span>  -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象二分搜索"><a href="#抽象二分搜索" class="headerlink" title="抽象二分搜索"></a>抽象二分搜索</h2><p><strong>1、确定 <code>x, f(x), target</code> 分别是什么，并写出函数 <code>f</code> 的代码</strong>。</p><p><strong>2、找到 <code>x</code> 的取值范围作为二分搜索的搜索区间，初始化 <code>left</code> 和 <code>right</code> 变量</strong>。</p><p><strong>3、根据题目的要求，确定应该使用搜索左侧还是搜索右侧的二分搜索算法，写出解法代码</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数 f 是关于自变量 x 的单调函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数，在 f(x) == target 的约束下求 x 的最值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">solution</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 问自己：自变量 x 的最小值是多少？</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> ...;</span><br><span class="line">    <span class="comment">// 问自己：自变量 x 的最大值是多少？</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> ... + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (f(mid) == target) &#123;</span><br><span class="line">            <span class="comment">// 问自己：题目是求左边界还是右边界？</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f(mid) &lt; target) &#123;</span><br><span class="line">            <span class="comment">// 问自己：怎么让 f(x) 大一点？</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f(mid) &gt; target) &#123;</span><br><span class="line">            <span class="comment">// 问自己：怎么让 f(x) 小一点？</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFS算法</title>
      <link href="/2022/03/19/2022-BFS%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/19/2022-BFS%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="BFS算法"><a href="#BFS算法" class="headerlink" title="BFS算法"></a>BFS算法</h1><h2 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">BFS</span><span class="params">(Node start, Node target)</span>&#123;</span><br><span class="line">    Queue&lt;Node&gt; q;</span><br><span class="line">    Set&lt;Node&gt; visited;</span><br><span class="line">    </span><br><span class="line">    q.offer(start);</span><br><span class="line">    visited.add(start);</span><br><span class="line">    <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sz</span> <span class="operator">=</span> q.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; sz;i++)&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            <span class="keyword">if</span>(cur == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> step;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(Node x : cur.adj())&#123;</span><br><span class="line">                <span class="keyword">if</span>(!visited.containsKey(x))&#123;</span><br><span class="line">                    q.offer(x);</span><br><span class="line">                    visited.add(x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/2022/03/17/2022-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2022/03/17/2022-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="算法框架"><a href="#算法框架" class="headerlink" title="算法框架"></a>算法框架</h1><p><strong>灵魂三问:</strong></p><ol><li>函数是干什么的</li><li>函数的变量是什么</li><li>得到递归的结果应该做什么</li></ol><p><font color=red>可以对左子树和右子树得到的结果进行处理,根据问题选择遍历的位置</font></p><h2 id="原始"><a href="#原始" class="headerlink" title="原始"></a>原始</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line">traverse(root.left);</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line">traverse(root.right);</span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BST框架"><a href="#BST框架" class="headerlink" title="BST框架"></a>BST框架</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">BST</span><span class="params">(TreeNode root,<span class="type">int</span> target)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root.val == target)&#123;</span><br><span class="line">        <span class="comment">//做什么</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.val &lt; target)&#123;</span><br><span class="line">       BST(root.left,target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.val &gt; target)&#123;</span><br><span class="line">        BST(root.right,target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完全二叉树节点个数"><a href="#完全二叉树节点个数" class="headerlink" title="完全二叉树节点个数"></a>完全二叉树节点个数</h2><p>普通二叉树+满二叉树</p><h2 id="层级遍历"><a href="#层级遍历" class="headerlink" title="层级遍历"></a>层级遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(TreeNode root,<span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> q.poll();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//中序遍历代码</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(cur.left != <span class="literal">null</span>)&#123;</span><br><span class="line">             q.offer(cur.left);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">if</span>(cur.right != <span class="literal">null</span>)&#123;</span><br><span class="line">           q.offer(cur.right);</span><br><span class="line">       &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="/2022/03/17/2022-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/17/2022-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><p>返回值要搞清楚,当索引变为负值返回,当达到目标时也要记得返回.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backrack</span>(<span class="params">路径,选择列表</span>):</span><br><span class="line"><span class="keyword">if</span> 满足结束条件:</span><br><span class="line">result.add(路径)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">    <span class="comment">#少的话可以直接穷举</span></span><br><span class="line"><span class="keyword">for</span> 选择 <span class="keyword">in</span> 选择列表</span><br><span class="line">做选择</span><br><span class="line">backtrace(路径,选择列表)</span><br><span class="line">撤销选择</span><br></pre></td></tr></table></figure><h1 id="和动态规划的关系"><a href="#和动态规划的关系" class="headerlink" title="和动态规划的关系"></a>和动态规划的关系</h1><p>把上边的这部分展开一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def backrack(游标,一路选择后的结果):</span><br><span class="line">...</span><br><span class="line">for 选择 in 选择列表</span><br><span class="line">做选择</span><br><span class="line">backtrace(游标,一路选择后的结果)</span><br><span class="line">撤销选择</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def backtrack(int i,int trace):</span><br><span class="line">backtrace(i + 1,trace + nums[i]);</span><br><span class="line">backtrace(i + 1,trace - nums[i]);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>当nums[i] &#x3D; 0时有重复子问题,发现一个必然有很多个因此可以使用备忘录优化</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm笔记</title>
      <link href="/2022/03/17/2022-jvm%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/17/2022-jvm%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="类中赋初值时间"><a href="#类中赋初值时间" class="headerlink" title="类中赋初值时间"></a>类中赋初值时间</h1><ul><li><strong>static修饰</strong>:</li></ul><p>​        准备阶段赋默认值,初始化阶段赋初值</p><ul><li><p><strong>final static&#x2F;final修饰:</strong></p></li><li><p>准备阶段赋值</p><p>编译阶段值已经确定,并且字面量和常量都会在class常量池出现,创建实例时在队中创建,如果可以将字面量存入缓存.eg:Integer缓存池.</p></li><li><p><strong>实例变量:</strong></p><p>创建实例时创建.</p></li></ul><h1 id="JVM类加载器"><a href="#JVM类加载器" class="headerlink" title="JVM类加载器"></a>JVM类加载器</h1><p><strong>启动类加载器:</strong></p><p>java、javax、sun等开头的类</p><p><strong>扩展类加载器:</strong></p><p>JDK的安装目录的jjre&#x2F;lib子目录下的ext的子目录的类库</p><p><strong>应用程序类加载器:</strong></p><p>它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库</p><h1 id="栈帧的返回值"><a href="#栈帧的返回值" class="headerlink" title="栈帧的返回值"></a>栈帧的返回值</h1><p>invoke2()调用invoke1()</p><p>invoke1()的返回值压入invoke2()的操作数栈</p><p><img src="https://s2.loli.net/2022/03/19/YEwpA1vedOoLXbZ.png" alt="image-20220319123007769"></p><h1 id="关于符号引用和直接引用"><a href="#关于符号引用和直接引用" class="headerlink" title="关于符号引用和直接引用"></a>关于符号引用和直接引用</h1><ol><li>在类加载链接中的解析中,将符号引用转化为直接引用(运行时常量池中的地址)</li><li>动态连接:<font color='red'>用来解决多态问题</font>虚拟机栈中的栈帧指向运行时常量池的方法引用</li></ol><h1 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h1><p><strong>每个栈帧都包含一个执行运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接（Dynamic Linking）。</strong></p><p>Class 文件中存放了大量的符号引用，字节码中的方法调用指令就是以常量池中指向方法的符号引用作为参数。这些符号引用一部分会在类加载阶段或第一次使用时转化为直接引用，这种转化称为静态解析。另一部分将在每一次运行期间转化为直接引用，这部分称为动态连接。</p><p><a href="https://www.yuque.com/wanghuaihoho/aw880k/zsgm3i">解析与分派 · 语雀 (yuque.com)</a></p><ol><li>执行invokevirtual&#x2F;invokedynamic调用方法</li><li>去方法区中的虚方法表找方法真正的入口地址</li><li>创建栈帧</li><li>栈帧中的动态链接指向调用方法类中的运行时常量池</li></ol><h2 id="解析的目的"><a href="#解析的目的" class="headerlink" title="解析的目的"></a><strong>解析的目的</strong></h2><p><em>将符号引用转为直接引用。</em></p><p><strong>类加载阶段的解析</strong>是<strong>连接</strong>阶段的最后一步:将能确定了的东西合并到jvm运行环境中去</p><p>**运行期的解析:**将确定了多态使用子类还是父类方法后的方法地址合并到jvm运行环境中去</p><h2 id="分派的目的"><a href="#分派的目的" class="headerlink" title="分派的目的"></a><strong>分派的目的</strong></h2><p><em>确定方法的接收者。</em></p><p><strong>静态分派</strong>：<strong>编译期</strong>间确定方法的接收者(没有多态的那些)。在类加载阶段<strong>解析</strong>。</p><p><strong>动态分派</strong>：<strong>运行期</strong>间确定多态使用子类还是父类方法后的方法。在运行期第一次使用时<strong>解析</strong>。</p><h1 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h1><p>每个JVM只有一个Runtime实例。即为运行时环境</p><h1 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h1><p>定义为一个数字数组,存储方法参数和定义在方法体内的局部变量</p><h2 id="Slot"><a href="#Slot" class="headerlink" title="Slot"></a>Slot</h2><ol><li>在局部变量表里，32位以内的类型只占用一个slot（包括returnAddress类型），64位的类型（long和double）占用两个slot。</li><li>byte、short、char 在存储前被转换为int，boolean也被转换为int，0表示false，非0表示true。</li><li>JVM会为局部变量表中的每一个Slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值 </li><li>如果当前帧是由构造方法或者实例方法创建的，那么该对象引用this将会存放在index为0的slot处</li></ol><h3 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">localVar2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此时的就会复用a的槽位</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/23/eh5BwATPuQYsmvy.png" alt="image-20220323102838243"></p><h2 id="静态变量与局部变量的对比"><a href="#静态变量与局部变量的对比" class="headerlink" title="静态变量与局部变量的对比"></a>静态变量与局部变量的对比</h2><p>局部变量必须显式初始化</p><p>局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收</p><h1 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h1><p>所需的最大深度在编译期就定义好了，保存在方法的Code属性中，为max_stack的值</p><ul><li><p>32bit的类型占用一个栈单位深度</p></li><li><p>64bit的类型占用两个栈单位深度</p></li></ul><h1 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h1><ol><li><p>找到操作数栈顶的第一个元素所执行的对象的实际类型，记作C。</p></li><li><p>如果在类型C中找到与<strong>常量中的描述符和简单名称</strong>都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回java.lang.IllegalAccessError 异常。</p></li><li><p>否则，按照继承关系从下往上依次对C的各个父类进行第2步的搜索和验证过程。</p></li><li><p>如果始终没有找到合适的方法，则抛出java.1ang.AbstractMethodsrror异常。</p></li></ol><h1 id="虚方法表"><a href="#虚方法表" class="headerlink" title="虚方法表"></a>虚方法表</h1><p>虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM会把该类的方法表也初始化完毕</p><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续</p><ul><li><p>初始内存大小：物理电脑内存大小 &#x2F; 64</p></li><li><p>最大内存大小：物理电脑内存大小 &#x2F; 4</p></li><li><p>一般-Xms和-Xmx设为相同的</p></li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>-XX:NewRatio &#x3D; 2 表示新生代1,老年代2</p><p>-XX:SurvivorRatio &#x3D; 8 表示Eden区8</p><p>-XX:MaxTenuringThreshold &#x3D; N   去养老区</p><p>-XX:UseTLAB:设置是否开启TLAB空间</p><p>-XX:TLABWasteTargetPercent:设置TLAB空间所占用Eden空间的百分比大小</p><p>-XX:+DoEscapeAnalysis:显式开启逃逸分析</p><p>-XX:+PrintEscapeAnalysis:查看逃逸分析的筛选结果</p><p>-XX:EliminateAllocations：开启了标量替换（默认打开），允许将对象打散分配到栈上</p><h2 id="老年代GC"><a href="#老年代GC" class="headerlink" title="老年代GC"></a>老年代GC</h2><p>出现了Major Gc，经常会伴随至少一次的Minor GC(但非绝对的，在Paralle1 Scavenge收集器的收集策略里就有直接进行MajorGC的策略选择过程） </p><ul><li>也就是在老年代空间不足时，会先尝试触发Minor Gc。如果之后空间还不足，则触发Major GC</li></ul><h2 id="不同年龄段的对象分配原则"><a href="#不同年龄段的对象分配原则" class="headerlink" title="不同年龄段的对象分配原则"></a>不同年龄段的对象分配原则</h2><p>动态对象年龄判断：如果survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到<code>MaxTenuringThreshold</code>中要求的年龄。</p><h2 id="Minor-GC安全"><a href="#Minor-GC安全" class="headerlink" title="Minor GC安全"></a>Minor GC安全</h2><p>在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。</p><ul><li><p>如果大于，则此次Minor GC是安全的</p></li><li><p>如果小于，则虚拟机会查看<code>-XX:HandlePromotionFailure</code>设置值是否允担保失败。 </p></li><li><ul><li>如果<code>HandlePromotionFailure=true</code>，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。</li></ul></li><li><ul><li><ul><li>如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；</li></ul></li></ul></li><li><ul><li><ul><li>如果小于，则改为进行一次Full GC。</li></ul></li></ul></li><li><ul><li>如果<code>HandlePromotionFailure=false</code>，则改为进行一次Full Gc。</li></ul></li></ul><p>在JDK6 Update24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，观察openJDK中的源码变化，虽然源码中还定义了HandlePromotionFailure参数，但是在代码中已经不会再使用它。JDK6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行FullGC。</p><h2 id="逃逸分析：代码优化"><a href="#逃逸分析：代码优化" class="headerlink" title="逃逸分析：代码优化"></a>逃逸分析：代码优化</h2><p>一、栈上分配：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会发生逃逸，对象可能是栈上分配的候选，而不是堆上分配</p><p>二、同步省略：如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</p><p>三、分离对象或标量替换：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>普通的对象会被分配在TLAB上；如果对象较大，JVM会试图直接分配在Eden其他位置上</p><h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><h2 id="栈、堆、方法区的交互关系"><a href="#栈、堆、方法区的交互关系" class="headerlink" title="栈、堆、方法区的交互关系"></a>栈、堆、方法区的交互关系</h2><p><img src="https://s2.loli.net/2022/03/24/q64Dh3JptG5lVNz.png" alt="img"></p><h2 id="方法区的基本理解"><a href="#方法区的基本理解" class="headerlink" title="方法区的基本理解"></a>方法区的基本理解</h2><ul><li><p>方法区在JVM启动的时候被创建，并且它的实际的物理内存空间中和Java堆区一样都可以是不连续的。</p></li><li><p>方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展。</p></li><li><p>关闭JVM就会释放这个区域的内存</p></li></ul><h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><p><strong>jdk7及以前</strong></p><p>-XX:Permsize:永久代初始分配空间。默认值是20.75M</p><p>-XX:MaxPermsize:永久代最大可分配空间。32位机器默认是64M，64位机器模式是82M</p><p><strong>JDK8以后</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:MetaspaceSize` 和 `-XX:MaxMetaspaceSize</span><br></pre></td></tr></table></figure><p>为避免频繁GC,建议将<code>-XX:MetaspaceSize</code>设置为一个相对较高的值</p><p>直接内存大小可以通过<code>MaxDirectMemorySize</code>设置。如果不指定，默认与堆的最大值-Xmx参数值一致</p><h2 id="解决OOM"><a href="#解决OOM" class="headerlink" title="解决OOM"></a>解决OOM</h2><ol><li>要解决OOM异常或heap space的异常，一般的手段是首先通过内存映像分析工具（如Eclipse Memory Analyzer）对dump出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢出（Memory Overflow） </li><li>如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots的引用链。于是就能找到泄漏对象是通过怎样的路径与GCRoots相关联并导致垃圾收集器无法自动回收它们的。掌握了泄漏对象的类型信息，以及GCRoots引用链的信息，就可以比较准确地定位出泄漏代码的位置。 </li><li>如果不存在内存泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数（<code>-Xmx</code>与<code>-Xms</code>），与机器物理内存对比看是否还可以调大，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</li></ol><h2 id="方法区的内部结构"><a href="#方法区的内部结构" class="headerlink" title="方法区的内部结构"></a>方法区的内部结构</h2><h3 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h3><p>对每个加载的类型（类class、接口interface、枚举enum、注解annotation），JVM必须在方法区中存储以下类型信息：</p><ol><li>这个类型的完整有效名称（全名&#x3D;包名.类名）</li><li>这个类型直接父类的完整有效名（对于interface或是java.lang.object，都没有父类）</li><li>这个类型的修饰符（public，abstract，final的某个子集）</li><li>这个类型直接接口的一个有序列表</li></ol><h3 id="域（Field）信息-字段"><a href="#域（Field）信息-字段" class="headerlink" title="域（Field）信息(字段)"></a>域（Field）信息(字段)</h3><p>JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。</p><p>域的相关信息包括：域名称、域类型、域修饰符（public，private，protected，static，final，volatile，transient的某个子集）</p><h3 id="方法（Method）信息"><a href="#方法（Method）信息" class="headerlink" title="方法（Method）信息"></a>方法（Method）信息</h3><p>JVM必须保存所有方法的以下信息，同域信息一样包括声明顺序：</p><ol><li>方法名称</li><li>方法的返回类型（或void）</li><li>方法参数的数量和类型（按顺序）</li><li>方法的修饰符（public，private，protected，static，final，synchronized，native，abstract的一个子集）</li><li>方法的字节码（bytecodes）、操作数栈、局部变量表及大小（abstract和native方法除外）</li><li>异常表（abstract和native方法除外）</li></ol><ul><li><ul><li>每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li></ul></li></ul><h3 id="non-final的类变量"><a href="#non-final的类变量" class="headerlink" title="non-final的类变量"></a>non-final的类变量</h3><ul><li><p>静态变量和类关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分</p></li><li><p>类变量被类的所有实例共享，即使没有类实例时，你也可以访问它</p></li></ul><h3 id="补充说明：全局常量（static-final）"><a href="#补充说明：全局常量（static-final）" class="headerlink" title="补充说明：全局常量（static final）"></a>补充说明：全局常量（static final）</h3><p>被声明为final的类变量的处理方法则不同，每个全局常量在编译的时候就会被分配了。</p><h2 id="JIT代码缓存放在方法区哪里"><a href="#JIT代码缓存放在方法区哪里" class="headerlink" title="JIT代码缓存放在方法区哪里"></a>JIT代码缓存放在方法区哪里</h2><p>转-&gt;12.9</p><h2 id="几种常量池内存储的数据类型"><a href="#几种常量池内存储的数据类型" class="headerlink" title="几种常量池内存储的数据类型"></a>几种常量池内存储的数据类型</h2><ul><li><p>数量值</p></li><li><p>字符串值</p></li><li><p>类引用</p></li><li><p>字段引用</p></li><li><p>方法引用</p></li></ul><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><ul><li>池中的数据项像数组项一样，是通过索引访问的。</li><li>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则JVM会抛OutOfMemoryError异常。</li></ul><h2 id="静态变量和字符串常量池位置"><a href="#静态变量和字符串常量池位置" class="headerlink" title="静态变量和字符串常量池位置"></a>静态变量和字符串常量池位置</h2><table><thead><tr><th>JDK1.6及之前</th><th>有永久代（permanet），静态变量存储在永久代上</th></tr></thead><tbody><tr><td><strong>JDK1.7</strong></td><td><strong>有永久代，但已经逐步 “去永久代”，字符串常量池，静态变量移除，保存在堆中</strong></td></tr><tr><td><strong>JDK1.8</strong></td><td><strong>无永久代，类型信息，字段，方法，常量保存在本地内存的元空间，但字符串常量池、静态变量仍然在堆中。</strong></td></tr></tbody></table><p><img src="https://s2.loli.net/2022/03/24/o1SC4n6tAiTVkYa.png" alt="img"></p><p><img src="https://s2.loli.net/2022/03/24/EVK7k91ogJycBtD.png" alt="img"></p><p><img src="https://s2.loli.net/2022/03/24/3twpS6f1GrBZnJY.png" alt="img"></p><h2 id="方法区的垃圾收集"><a href="#方法区的垃圾收集" class="headerlink" title="方法区的垃圾收集"></a>方法区的垃圾收集</h2><p>主要回收两部分内容：常量池中废弃的常量和不再使用的类型</p><h2 id="StringTable为什么要调整位置"><a href="#StringTable为什么要调整位置" class="headerlink" title="StringTable为什么要调整位置"></a>StringTable为什么要调整位置</h2><p>StringTable会存放方法名,包名之类的字符串字面量</p><p>方法区不怎么进行垃圾回收</p><h2 id="判定一个类型是否属于“不再被使用的类”"><a href="#判定一个类型是否属于“不再被使用的类”" class="headerlink" title="判定一个类型是否属于“不再被使用的类”"></a>判定一个类型是否属于“不再被使用的类”</h2><ul><li><p>该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。 </p></li><li><p>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的。 </p></li><li><p>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</p></li></ul><h1 id="对象实例化及直接内存"><a href="#对象实例化及直接内存" class="headerlink" title="对象实例化及直接内存"></a>对象实例化及直接内存</h1><h2 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h2><ul><li><p>new：最常见的方式、Xxx的静态方法，XxxBuilder&#x2F;XxxFactory的静态方法</p></li><li><p>Class的newInstance方法：反射的方式，只能调用空参的构造器，权限必须是public</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//先使用加载器加载类</span><br><span class="line">Class c = Class.forName(“A”);</span><br><span class="line">//只能调用无参构造</span><br><span class="line">factory = (AInterface)c.newInstance(); </span><br></pre></td></tr></table></figure></li><li><p>Constructor的newInstance(XXX)：反射的方式，可以调用空参、带参的构造器，权限没有要求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//能够调用无参有参构造</span><br><span class="line">Constructor c1=c.getDeclaredConstructor(new Class[]&#123;int.class,int.class&#125;); </span><br><span class="line">c1.setAccessible(true); </span><br><span class="line">A a1=(A)c1.newInstance(new Object[]&#123;5,6&#125;); </span><br></pre></td></tr></table></figure></li><li><p>使用clone()：不调用任何的构造器，要求当前的类需要实现<strong>Cloneable接口</strong>，实现clone()</p></li><li><p>使用序列化：从文件中、从网络中获取一个对象的二进制流</p></li><li><p>第三方库 Objenesis</p></li></ul><h2 id="创建对象的步骤"><a href="#创建对象的步骤" class="headerlink" title="创建对象的步骤"></a>创建对象的步骤</h2><p><img src="https://s2.loli.net/2022/03/25/erqT7gQ3CMUOAjf.png" alt="img"></p><p><a href="https://www.yuque.com/u21195183/jvm/rdng01#3ea7094c">https://www.yuque.com/u21195183/jvm/rdng01#3ea7094c</a></p><h2 id="堆里分配引用变量大小"><a href="#堆里分配引用变量大小" class="headerlink" title="堆里分配引用变量大小"></a>堆里分配引用变量大小</h2><p>4个字节</p><h2 id="什么时候将分配的空间给引用"><a href="#什么时候将分配的空间给引用" class="headerlink" title="什么时候将分配的空间给引用"></a>什么时候将分配的空间给引用</h2><p>初始化执行<init>(包括静态代码块和构造方法)以后</p><h2 id="给对象属性赋值的操作"><a href="#给对象属性赋值的操作" class="headerlink" title="给对象属性赋值的操作"></a>给对象属性赋值的操作</h2><ul><li><p>属性的默认初始化</p><hr></li><li><p>显式初始化</p></li><li><p>代码块中初始化</p></li><li><p>构造器中初始化</p></li></ul><h2 id="对象内存布局"><a href="#对象内存布局" class="headerlink" title="对象内存布局"></a>对象内存布局</h2><p><img src="https://s2.loli.net/2022/03/25/Ho1FvstXgLd2EVJ.png" alt="img"></p><p><img src="https://s2.loli.net/2022/03/25/CKE4yVol3GvM1AN.png" alt="img"></p><h2 id="JVM是如何通过栈帧中的对象引用访问到其内部的对象实例"><a href="#JVM是如何通过栈帧中的对象引用访问到其内部的对象实例" class="headerlink" title="JVM是如何通过栈帧中的对象引用访问到其内部的对象实例"></a>JVM是如何通过栈帧中的对象引用访问到其内部的对象实例</h2><p>句柄访问</p><p><img src="https://s2.loli.net/2022/03/25/9CtfrOGmUNY6VnF.png" alt="img"></p><p>直接访问(hotspot采用)</p><p><img src="https://s2.loli.net/2022/03/25/LY4UubXpOe9qDK1.png" alt="img"></p><h2 id="阈值参数"><a href="#阈值参数" class="headerlink" title="阈值参数"></a>阈值参数</h2><p>-XX:CompileThreshold</p><p>方法调用计数器就用于统计方法被调用的次数，它的默认阀值在Client模式下是1500次，在Server模式下是10000次。超过这个阈值，就会触发JIT编译</p><h2 id="HotSpotVM-可以设置程序执行方法"><a href="#HotSpotVM-可以设置程序执行方法" class="headerlink" title="HotSpotVM 可以设置程序执行方法"></a>HotSpotVM 可以设置程序执行方法</h2><p>缺省情况下HotSpot VM是采用解释器与即时编译器并存的架构，当然开发人员可以根据具体的应用场景，通过命令显式地为Java虚拟机指定在运行时到底是完全采用解释器执行，还是完全采用即时编译器执行。如下所示：</p><ul><li><p><code>-Xint</code>：完全采用解释器模式执行程序；</p></li><li><p><code>-Xcomp</code>：完全采用即时编译器模式执行程序。如果即时编译出现问题，解释器会介入执行</p></li><li><p><code>-Xmixed</code>：采用解释器+即时编译器的混合模式共同执行程序。</p></li></ul><h1 id="StringTable"><a href="#StringTable" class="headerlink" title="StringTable"></a>StringTable</h1><h2 id="String的基本特性"><a href="#String的基本特性" class="headerlink" title="String的基本特性"></a>String的基本特性</h2><ul><li><p>String在jdk8及以前内部定义了final char[] value用于存储字符串数据。JDK9时改为byte[]</p></li><li><p>String声明为final的，不可被继承</p></li></ul><h2 id="字符串拼接操作"><a href="#字符串拼接操作" class="headerlink" title="字符串拼接操作"></a>字符串拼接操作</h2><ul><li>常量与常量的拼接结果在常量池，原理是编译期优化</li><li>只要其中有一个是变量，结果就在堆中。变量拼接的原理是StringBuilder</li><li>在实际开发中，能够使用final的，尽量使用</li><li>那么，在实际开发中，对于需要多次或大量拼接的操作，在不考虑线程安全问题时，我们就应该尽可能使用StringBuilder进行append操作</li><li>StringBuilder空参构造器的初始化大小为16。那么，如果提前知道需要拼接String的个数，就应该直接使用带参构造器指定capacity，以减少扩容的次数</li></ul><h2 id="intern"><a href="#intern" class="headerlink" title="intern"></a>intern</h2><p>intern是一个native方法，调用的是底层C的方法</p><p><img src="https://s2.loli.net/2022/03/29/tXpPgc3UJOseNoY.png" alt="img"></p><h2 id="intern的使用：JDK6-vs-JDK7-x2F-82"><a href="#intern的使用：JDK6-vs-JDK7-x2F-82" class="headerlink" title="intern的使用：JDK6 vs JDK7&#x2F;82"></a>intern的使用：JDK6 vs JDK7&#x2F;82</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * ① String s = new String(&quot;1&quot;)</span><br><span class="line"> * 创建了两个对象</span><br><span class="line"> * 堆空间中一个new对象</span><br><span class="line"> * 字符串常量池中一个字符串常量&quot;1&quot;（注意：此时字符串常量池中已有&quot;1&quot;）</span><br><span class="line"> * ② s.intern()由于字符串常量池中已存在&quot;1&quot;</span><br><span class="line"> * </span><br><span class="line"> * s  指向的是堆空间中的对象地址</span><br><span class="line"> * s2 指向的是堆空间中常量池中&quot;1&quot;的地址</span><br><span class="line"> * 所以不相等</span><br><span class="line"> */</span><br><span class="line">String s = new String(&quot;1&quot;);</span><br><span class="line">s.intern();</span><br><span class="line">String s2 = &quot;1&quot;;</span><br><span class="line">System.out.println(s==s2); // jdk1.6 false jdk7/8 false</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * ① String s3 = new String(&quot;1&quot;) + new String(&quot;1&quot;)</span><br><span class="line"> * 等价于new String（&quot;11&quot;），但是，常量池中并不生成字符串&quot;11&quot;；</span><br><span class="line"> *</span><br><span class="line"> * ② s3.intern()</span><br><span class="line"> * 由于此时常量池中并无&quot;11&quot;，所以把s3中记录的对象的地址存入常量池</span><br><span class="line"> * 所以s3 和 s4 指向的都是一个地址</span><br><span class="line">*/</span><br><span class="line">String s3 = new String(&quot;1&quot;) + new String(&quot;1&quot;);</span><br><span class="line">s3.intern();</span><br><span class="line">String s4 = &quot;11&quot;;</span><br><span class="line">System.out.println(s3==s4); //jdk1.6 false jdk7/8 true</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/29/2wNy78M35jnSiTE.png" alt="img"></p><p><img src="https://s2.loli.net/2022/03/29/RZ4ecw3DsQa7pC1.png" alt="img"></p><p>总结String的intern()的使用：</p><p>JDK1.6中，将这个字符串对象尝试放入串池。</p><ul><li><p>如果串池中有，则并不会放入。返回已有的串池中的对象的地址</p></li><li><p>如果没有，会把此对象复制一份，放入串池，并返回串池中的对象地址</p></li></ul><p>JDK1.7起，将这个字符串对象尝试放入串池。</p><ul><li><p>如果串池中有，则并不会放入。返回已有的串池中的对象的地址</p></li><li><p>如果没有，则会把对象的引用地址复制一份，放入串池，并返回串池中的引用地址</p></li></ul><p><img src="https://s2.loli.net/2022/03/29/eS1RsN3TBuMrjVw.png" alt="img"></p><p><strong>s2中直接把0x1122复制过来</strong></p><h2 id="G1中的String去重操作"><a href="#G1中的String去重操作" class="headerlink" title="G1中的String去重操作"></a>G1中的String去重操作</h2><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol><li><p>当垃圾收集器工作的时候，会访问堆上存活的对象。对每一个访问的对象都会检查是否是候选的要去重的String对象</p></li><li><p>如果是，把这个对象的一个引用插入到队列中等待后续的处理。一个去重的线程在后台运行，处理这个队列。处理队列的一个元素意味着从队列删除这个元素，然后尝试去重它引用的string对象。</p></li><li><p>使用一个hashtable来记录所有的被String对象使用的不重复的char数组。当去重的时候，会查这个hashtable，来看堆上是否已经存在一个一模一样的char数组。</p></li><li><p>如果存在，String对象会被调整引用那个数组，释放对原来的数组的引用，最终会被垃圾收集器回收掉。</p></li><li><p>如果查找失败，char数组会被插入到hashtable，这样以后的时候就可以共享这个数组了。</p></li></ol><h3 id="命令行选项"><a href="#命令行选项" class="headerlink" title="命令行选项"></a>命令行选项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 开启String去重，默认是不开启的，需要手动开启。 </span><br><span class="line">UseStringDeduplication(bool)  </span><br><span class="line"># 打印详细的去重统计信息 </span><br><span class="line">PrintStringDeduplicationStatistics(bool)  </span><br><span class="line"># 达到这个年龄的String对象被认为是去重的候选对象</span><br><span class="line">StringpeDuplicationAgeThreshold(uintx)</span><br></pre></td></tr></table></figure><h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><h2 id="垃圾回收相关算法"><a href="#垃圾回收相关算法" class="headerlink" title="垃圾回收相关算法"></a>垃圾回收相关算法</h2><p><a href="https://www.yuque.com/u21195183/jvm/fkl9x7#0dc8ebb2">https://www.yuque.com/u21195183/jvm/fkl9x7#0dc8ebb2</a></p><h1 id="垃圾回收相关概念"><a href="#垃圾回收相关概念" class="headerlink" title="垃圾回收相关概念"></a>垃圾回收相关概念</h1><h2 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h2><p>没有空闲内存，并且垃圾收集器也无法提供更多内存</p><p>在抛出OutOfMemoryError之前，通常垃圾收集器会被触发，尽其所能去清理出空间</p><p>也不是在任何情况下垃圾收集器都会被触发的</p><ul><li>比如，我们去分配一个超大对象，类似一个超大数组超过堆的最大值，JVM可以判断出垃圾收集并不能解决这个问题，所以直接抛出OutOfMemoryError。</li></ul><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>但实际情况很多时候一些不太好的实践（或疏忽）会导致对象的生命周期变得很长甚至导致00M，也可以叫做宽泛意义上的“内存泄漏”</p><p><strong>举例</strong></p><ol><li><p>单例模式<br>   单例的生命周期和应用程序是一样长的，所以单例程序中，如果持有对外部对象的引用的话，那么这个外部对象是不能被回收的，则会导致内存泄漏的产生。 </p></li><li><p>一些提供close的资源未关闭导致内存泄漏<br>数据库连接（dataSourse.getConnection() ），网络连接（socket）和io连接必须手动close，否则是不能被回收的。</p></li></ol><h2 id="Stop-The-World"><a href="#Stop-The-World" class="headerlink" title="Stop The World"></a>Stop The World</h2><p>可达性分析算法中枚举根节点（GC Roots）会导致所有Java执行线程停顿。</p><ul><li><p>分析工作必须在一个能确保一致性的快照中进行</p></li><li><p>一致性指整个分析期间整个执行系统看起来像被冻结在某个时间点上</p></li><li><p>如果出现分析过程中对象引用关系还在不断变化，则分析结果的准确性无法保证</p></li></ul><p>开发中不要用System.gc() 会导致Stop-the-World的发生。</p><h2 id="安全点与安全区域"><a href="#安全点与安全区域" class="headerlink" title="安全点与安全区域"></a>安全点与安全区域</h2><p>安全点主动式中断</p><p>设置一个中断标志，各个线程<strong>运行到Safe Point的时候</strong>主动轮询这个标志，如果中断标志为真，则将自己进行中断挂起。（有轮询的机制）</p><p><a href="https://www.yuque.com/u21195183/jvm/nwkhey#68cf3419">https://www.yuque.com/u21195183/jvm/nwkhey#68cf3419</a></p><h3 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h3><p>在安全区域内(例如线程睡眠)的对象引用关系不会发生变化,因此在GC时忽略这些线程(进安全区域时会给它一个标识),</p><p>当这些线程要出安全区域的时候看GC是否结束,如果完成了，则继续运行，否则线程必须等待直到收到可以安全离开Safe Region的信号为止；</p><h2 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h2><p>高速缓存就有用到软引用</p><h2 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h2><p>弱引用和软引用一样，在构造弱引用时，也可以指定一个引用队列，当弱引用对象被回收时，就会加入指定的引用队列，通过这个队列可以跟踪对象的回收情况。</p><p>软引用、弱引用都非常适合来保存那些可有可无的缓存数据</p><h2 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h2><p>虚引用必须和引用队列一起使用。虚引用在创建时必须提供一个引用队列作为参数。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象后，将这个虚引用加入引用队列，以通知应用程序对象的回收情况。</p><h2 id="终结器引用"><a href="#终结器引用" class="headerlink" title="终结器引用"></a>终结器引用</h2><p><a href="https://www.yuque.com/u21195183/jvm/nwkhey#9e3135f0">https://www.yuque.com/u21195183/jvm/nwkhey#9e3135f0</a></p><h1 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h1><h2 id="7种经典的垃圾收集器"><a href="#7种经典的垃圾收集器" class="headerlink" title="7种经典的垃圾收集器"></a>7种经典的垃圾收集器</h2><ul><li><p>串行回收器：Serial、Serial Old</p></li><li><p>并行回收器：ParNew、Parallel Scavenge、Parallel old</p></li><li><p>并发回收器：CMS、G1</p></li></ul><p><img src="https://s2.loli.net/2022/03/31/m8PzFpKu7f5b9Ud.png" alt="img"></p><h2 id="如何查看默认垃圾收集器"><a href="#如何查看默认垃圾收集器" class="headerlink" title="如何查看默认垃圾收集器"></a>如何查看默认垃圾收集器</h2><p><code>-XX:+PrintCommandLineFlags</code>：查看命令行相关参数（包含使用的垃圾收集器）</p><p>使用命令行指令：<code>jinfo -flag 相关垃圾回收器参数 进程ID</code></p><h2 id="Serial回收器：串行回收"><a href="#Serial回收器：串行回收" class="headerlink" title="Serial回收器：串行回收"></a>Serial回收器：串行回收</h2><p>Serial收集器作为HotSpot中client模式下的默认新生代垃圾收集器。</p><p>Serial收集器采用复制算法、串行回收和”stop-the-World”机制的方式执行内存回收。</p><p>Serial Old收集器采用了标记-压缩算法,串行回收和”Stop the World”机制，只不过内存回收算法使用的是。</p><p>在HotSpot虚拟机中，使用<code>-XX:+UseSerialGC</code>参数可以指定年轻代和老年代都使用串行收集器。等价于新生代用Serial GC，且老年代用Serial Old GC</p><h2 id="ParNew回收器：并行回收"><a href="#ParNew回收器：并行回收" class="headerlink" title="ParNew回收器：并行回收"></a>ParNew回收器：并行回收</h2><p>ParNew 是很多JVM运行在Server模式下新生代的默认垃圾收集器</p><p>Par是Parallel的缩写，New：只能处理的是新生代</p><p>ParNew 收集器:复制算法,并行运行,stw机制</p><p>可以搭配serial old(废弃)和cms</p><p>在程序中，开发人员可以通过选项”<code>-XX:+UseParNewGC</code>“手动指定使用ParNew收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。</p><h2 id="Parallel回收器：吞吐量优先"><a href="#Parallel回收器：吞吐量优先" class="headerlink" title="Parallel回收器：吞吐量优先"></a>Parallel回收器：吞吐量优先</h2><p>多用于交互不多的应用场景</p><p>复制算法、并行回收和”Stop the World”机制</p><h3 id="那么Parallel-收集器的出现是否多此一举？"><a href="#那么Parallel-收集器的出现是否多此一举？" class="headerlink" title="那么Parallel 收集器的出现是否多此一举？"></a>那么Parallel 收集器的出现是否多此一举？</h3><ul><li><p>和ParNew收集器不同，ParallelScavenge收集器的目标则是达到一个可控制的吞吐量（Throughput），它也被称为吞吐量优先的垃圾收集器。</p></li><li><p>自适应调节策略也是Parallel Scavenge与ParNew一个重要区别。</p></li></ul><h2 id="2Parallel-Old收集器"><a href="#2Parallel-Old收集器" class="headerlink" title="2Parallel Old收集器"></a>2Parallel Old收集器</h2><p>标记压缩,并行回收和stw</p><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><ul><li><p><code>-XX:+UseParallelGC</code> 手动指定年轻代使用Parallel并行收集器执行内存回收任务。 </p></li><li><p><code>-XX:+UseParallelOldGC</code> 手动指定老年代都是使用并行回收收集器。 </p></li><li><ul><li>分别适用于新生代和老年代。默认jdk8是开启的。</li></ul></li><li><ul><li>上面两个参数，默认开启一个，另一个也会被开启。（互相激活）</li></ul></li></ul><p><a href="https://www.yuque.com/u21195183/jvm/kpugvm#86eb8b14">https://www.yuque.com/u21195183/jvm/kpugvm#86eb8b14</a></p><p> <code>-XX:+UseAdaptivesizePolicy</code> 设置Parallel Scavenge收集器具有自适应调节策略</p><ul><li><ul><li>在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点。</li></ul></li><li><ul><li>在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（<code>GCTimeRatio</code>）和停顿时间（<code>MaxGCPauseMills</code>），让虚拟机自己完成调优工作。</li></ul></li></ul><h2 id="CMS回收器：低延迟"><a href="#CMS回收器：低延迟" class="headerlink" title="CMS回收器：低延迟"></a>CMS回收器：低延迟</h2><p>标记清除算法,并行并发,stw</p><p>无法和parllel 搭配</p><h3 id="收集过程"><a href="#收集过程" class="headerlink" title="收集过程"></a>收集过程</h3><p>整个过程分为4个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段</p><p><img src="https://s2.loli.net/2022/03/31/dm7R635arheHgZl.png" alt="img"></p><ul><li><p><strong>初始标记</strong>（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为“Stop-the-World”机制而出现短暂的暂停，这个阶段的主要任务仅仅只是标记出GCRoots能直接关联到的对象。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的速度非常快。</p></li><li><p><strong>并发标记</strong>（Concurrent-Mark）阶段：从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</p></li><li><p><strong>重新标记</strong>（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。</p></li><li><p><strong>并发清除</strong>（Concurrent-Sweep）阶段：此阶段清理删除掉标记阶段判断的已经死亡的对象，释放内存空间。<strong>由于不需要移动存活对象</strong>，所以这个阶段也是可以与用户线程同时并发的</p></li></ul><h3 id="什么时候收集"><a href="#什么时候收集" class="headerlink" title="什么时候收集"></a>什么时候收集</h3><p>由于在垃圾收集阶段用户线程没有中断，所以在CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用.因此，CMS收集器不能像其他收集器那样等到<strong>老年代几乎完全被填满</strong>了再进行收集，而是当堆内存使用率达到某一阈值时，便开始进行回收(如果留的内存不够,启用serial old收集器进行收集)</p><h3 id="设置的参数"><a href="#设置的参数" class="headerlink" title="设置的参数"></a>设置的参数</h3><p><a href="https://www.yuque.com/u21195183/jvm/kpugvm#5052fd67">https://www.yuque.com/u21195183/jvm/kpugvm#5052fd67</a></p><h2 id="G1回收器：区域化分代式-并行和并发"><a href="#G1回收器：区域化分代式-并行和并发" class="headerlink" title="G1回收器：区域化分代式(并行和并发)"></a>G1回收器：区域化分代式(并行和并发)</h2><p>为了适应现在不断扩大的内存和不断增加的处理器数量，进一步降低暂停时间（pause time），同时兼顾良好的吞吐量。</p><p><strong>在延迟可控的情况下尽可能高的提高吞吐量</strong></p><p><strong>延迟可控</strong>:在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大(垃圾占比最多,所以叫garbage-first)的Region</p><h3 id="空间整合"><a href="#空间整合" class="headerlink" title="空间整合"></a>空间整合</h3><ul><li><p>CMS：“标记-清除”算法、内存碎片、若干次Gc后进行一次碎片整理</p></li><li><p>将内存划分为一个个的region。内存的回收是以region作为基本单位的。Region之间是复制算法，但整体上实际可看作是标记-压缩（Mark-Compact）算法</p></li></ul><h3 id="G1垃圾收集器的缺点"><a href="#G1垃圾收集器的缺点" class="headerlink" title="G1垃圾收集器的缺点"></a>G1垃圾收集器的缺点</h3><p>G1 需要记忆集 (具体来说是卡表)来记录新生代和老年代之间的引用关系，这种数据结构在 G1 中需要占用大量的内存，可能达到整个堆内存容量的 20% 甚至更多。而且 G1 中维护记忆集的成本较高，带来了更高的执行负载，影响效率。</p><p>从经验上来说，在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用上则发挥其优势。平衡点在6-8GB之间。</p><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><ul><li><p><code>-XX:+UseG1GC</code>：手动指定使用G1垃圾收集器执行内存回收任务</p></li><li><p><code>-XX:G1HeapRegionSize</code> 设置每个Region的大小。值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1&#x2F;2000。</p></li><li><p><code>-XX:MaxGCPauseMillis</code> 设置期望达到的最大GC停顿时间指标（JVM会尽力实现，但不保证达到）。默认值是200ms（人的平均反应速度）</p></li><li><p><code>-XX:+ParallelGCThread</code> 设置STW工作线程数的值。最多设置为8（上面说过Parallel回收器的线程计算公式，当CPU_Count &gt; 8时，ParallelGCThreads 也会大于8）</p></li><li><p><code>-XX:ConcGCThreads</code> 设置并发标记的线程数。将n设置为并行垃圾回收线程数（ParallelGCThreads）的1&#x2F;4左右。</p></li><li><p><code>-XX:InitiatingHeapOccupancyPercent</code> 设置触发并发GC周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。</p></li></ul><h3 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h3><ol><li>开启G1垃圾回收器</li><li>设置堆的最大内存</li><li>设置最大的停顿时间</li></ol><h3 id="三种垃圾回收模式"><a href="#三种垃圾回收模式" class="headerlink" title="三种垃圾回收模式"></a>三种垃圾回收模式</h3><p>Young GC、Mixed GC和Full GC</p><h3 id="G1收集器的适用场景"><a href="#G1收集器的适用场景" class="headerlink" title="G1收集器的适用场景"></a>G1收集器的适用场景</h3><p>面向服务端应用，针对具有大内存、多处理器的机器。（在普通大小的堆里表现并不惊喜）</p><p>最主要的应用是需要低GC延迟，并具有大堆的应用程序提供解决方案；如：在堆大小约6GB或更大时，可预测的暂停时间可以低于0.5秒；（G1通过每次只清理一部分而不是全部的Region的增量式清理来保证每次GC停顿时间不会过长）。</p><p>用来替换掉JDK1.5中的CMS收集器；在下面的情况时，使用G1可能比CMS好：</p><ul><li><p>超过50%的Java堆被活动数据占用；</p></li><li><p>对象分配频率或年代提升频率变化很大；</p></li><li><p>GC停顿时间过长（长于0.5至1秒）</p></li></ul><p>HotSpot垃圾收集器里，除了G1以外，其他的垃圾收集器使用内置的JVM线程执行GC的多线程操作，而G1 GC可以采用应用线程承担后台运行的GC工作，即当JVM的GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。</p><h3 id="H区"><a href="#H区" class="headerlink" title="H区"></a>H区</h3><p>设置H的原因：对于堆中的对象，默认直接会被分配到老年代，但是如果它是一个短期存在的大对象就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个Humongous区，它用来专门存放大对象。如果一个H区装不下一个大对象，那么G1会寻找连续的H区来存储。为了能找到连续的H区，有时候不得不启动Full GC。G1的大多数行为都把H区作为老年代的一部分来看待。</p><p>每个Region都是通过指针碰撞来分配空间</p><p><img src="https://s2.loli.net/2022/03/31/r1Yl9dskpcCLxRZ.png" alt="img"></p><h3 id="回收过程"><a href="#回收过程" class="headerlink" title="回收过程"></a>回收过程</h3><p>当堆内存使用达到一定值（默认45%）时，开始老年代并发标记过程</p><p>标记完成后开始四到五次的混合回收</p><p>混合回收并不一定要进行8次。有一个阈值<code>-XX:G1HeapWastePercent</code>，默认值为10%，意思是允许整个堆内存中有10%的空间被浪费，意味着如果发现可以回收的垃圾占堆内存的比例低于10%，则不再进行混合回收。因为GC会花费很多的时间但是回收到的内存却很少。</p><p><img src="https://s2.loli.net/2022/03/31/oyNER1DZHKGWp7U.jpg" alt="img"></p><p>1）G1执行的第一阶段：初始标记(Initial Marking )</p><p>这个阶段是STW(Stop the World )的，所有应用线程会被暂停，标记出从GC Root开始直接可达的对象。</p><p>2）G1执行的第二阶段：并发标记</p><p>从GC Roots开始对堆中对象进行可达性分析，找出存活对象，耗时较长。当并发标记完成后，开始最终标记(Final Marking )阶段</p><p>3）最终标记（标记那些在并发标记阶段发生变化的对象，将被回收）</p><p>4）筛选回收（首先对各个Regin的回收价值和成本进行排序，根据用户所期待的GC停顿时间指定回收计划，回收一部分Region）</p><p><a href="https://www.yuque.com/u21195183/jvm/kpugvm#8038353d">https://www.yuque.com/u21195183/jvm/kpugvm#8038353d</a></p><h3 id="7种经典垃圾回收器总结"><a href="#7种经典垃圾回收器总结" class="headerlink" title="7种经典垃圾回收器总结"></a>7种经典垃圾回收器总结</h3><p><a href="https://www.yuque.com/u21195183/jvm/kpugvm#db9e4939">https://www.yuque.com/u21195183/jvm/kpugvm#db9e4939</a></p><h3 id="eden区不够时"><a href="#eden区不够时" class="headerlink" title="eden区不够时"></a>eden区不够时</h3><p>先进行minorGC</p><h2 id="class文件结构"><a href="#class文件结构" class="headerlink" title="class文件结构"></a>class文件结构</h2><h3 id="常量池计数器"><a href="#常量池计数器" class="headerlink" title="常量池计数器"></a>常量池计数器</h3><p>为了满足后面某些指向常量池的索引值的数据在特定情况下需要表达“不引用任何一个常量池项目”的含义，这种情况可用索引值0来表示。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springdataRedis</title>
      <link href="/2022/03/17/2022-springdataRedis/"/>
      <url>/2022/03/17/2022-springdataRedis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="初识springdataRedis"><a href="#初识springdataRedis" class="headerlink" title="初识springdataRedis"></a>初识springdataRedis</h1><ol><li><p>创建springdata项目</p></li><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--common-pool--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Jackson依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置application.properties</p><p><font color=red>springboot2.5使用yaml会有问题,连接不上Redis</font></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#===========Redis配置===========</span></span><br><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="attr">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">101.42.252.51</span></span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment"># Redis服务器连接密码</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=<span class="string">000415</span></span><br><span class="line"><span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">spring.redis.pool.max-active</span>=<span class="string">200</span></span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">spring.redis.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="attr">spring.redis.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line"><span class="attr">spring.redis.pool.min-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="attr">spring.redis.timeout</span>=<span class="string">2000ms</span></span><br><span class="line"><span class="attr">spring.redis.jedis.pool.max-wait</span>=<span class="string">-1ms</span></span><br><span class="line"><span class="comment">#===========Redis配置===========</span></span><br></pre></td></tr></table></figure><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>springdataRedis写入Redis时会自动采用JDK序列化工具,需要去配置(不配置直接在创建时标注泛型也可以eg:RedisTemplate&lt;String,String&gt; redisTemplate;)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  说明：Redis</span></span><br><span class="line"><span class="comment"> * from：www.fhadmin.org</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String, Object&gt;();</span><br><span class="line">template.setConnectionFactory(factory);</span><br><span class="line"><span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line"><span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance , ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"><span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line"><span class="comment">// key采用String的序列化方式</span></span><br><span class="line">template.setKeySerializer(stringRedisSerializer);</span><br><span class="line"><span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line"><span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"><span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">template.afterPropertiesSet();</span><br><span class="line"><span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora图片自动上传</title>
      <link href="/2022/03/17/2022-Typora%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/"/>
      <url>/2022/03/17/2022-Typora%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>1.打开配置文件<img src="https://s2.loli.net/2022/03/17/xvQ6si4nSFLytHD.png" alt="image-20220317150115991"></p><ol start="2"><li><p>注册smms账号</p><p><a href="https://sm.ms/">Image Upload - SM.MS - Simple Free Image Hosting</a></p></li><li><p>smms获取token</p><p><img src="https://s2.loli.net/2022/03/17/KNG53kPJUI7yLWD.png" alt="image-20220317150327628"></p><p><img src="https://s2.loli.net/2022/03/17/7NF8I2UKGlMWTcH.png" alt="image-20220317150355035"></p></li><li><p>gitee获取token</p><p><img src="https://gitee.com/dzh86/img/raw/master/mdPic/486f8409e3ed3f16504f2932371f18a1.png" alt="image-20200924224338594"></p><p><img src="https://gitee.com/dzh86/img/raw/master/mdPic/4054f46ecc8f6bdde151340a7c428c55.png" alt="image-20200924224425306"></p></li><li><p>设置配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;picBed&quot;: &#123;</span><br><span class="line">    &quot;uploader&quot;: &quot;smms&quot;,</span><br><span class="line">    &quot;smms&quot;: &#123;</span><br><span class="line">      &quot;token&quot;: &quot;你获得的token&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;picgoPlugins&quot;: &#123;</span><br><span class="line">    &quot;picgo-plugin-gitee-uploader&quot;: true,</span><br><span class="line">    &quot;picgo-plugin-smms-user&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;current&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gitee&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gitee&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;gitee&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;master&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;customPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yearMonth&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;customUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mdPic&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dzh86/img&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的token&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;picgo-plugin-gitee-uploader&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;picgo-plugin-smms-user&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Typera </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typera </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA创建各种项目</title>
      <link href="/2022/03/17/2022-IDEA%E5%88%9B%E5%BB%BA%E5%90%84%E7%A7%8D%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/03/17/2022-IDEA%E5%88%9B%E5%BB%BA%E5%90%84%E7%A7%8D%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h1><p><img src="https://s2.loli.net/2022/03/17/z5kWfINYBEp3JbU.png" alt="image-20220317145000095"></p><h1 id="创建springboot"><a href="#创建springboot" class="headerlink" title="创建springboot"></a>创建springboot</h1><p><img src="https://s2.loli.net/2022/03/17/gzuLiwcDUBeaQKV.png" alt="image-20220317150610303"></p><p><strong>按需要选择功能,直接finish</strong></p><p><img src="https://s2.loli.net/2022/03/17/eLSrqnjmWaIVxDt.png" alt="image-20220317150735554"></p><h1 id="创建maven-web项目"><a href="#创建maven-web项目" class="headerlink" title="创建maven  web项目"></a>创建maven  web项目</h1><p><img src="https://s2.loli.net/2022/03/21/krexiS8IFAfwbJ4.png" alt="image-20220321190909851"></p><h1 id="改Tomcat启动后访问路径"><a href="#改Tomcat启动后访问路径" class="headerlink" title="改Tomcat启动后访问路径"></a>改Tomcat启动后访问路径</h1><p><img src="https://s2.loli.net/2022/03/21/aHEnpNJkOev2DqL.png" alt="image-20220321215605297"></p><h1 id="Spring环境搭建"><a href="#Spring环境搭建" class="headerlink" title="Spring环境搭建"></a>Spring环境搭建</h1><p>① 创建工程</p><p>② 导入静态页面</p><p>③ 导入需要pom.xml</p><p>④ 创建包结构（controller、service、dao、domain、utils） </p><p>⑤ 导入数据库脚本</p><p>⑥ 创建POJO类</p><p>⑦ 创建配置文件（applicationContext.xml、spring-mvc.xml、jdbc.properties、log4j.properties）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--加载jdbc.properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource2&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/dzh&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jdbc模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/pages/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    静态资源权限开放--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/test</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--全局的初始化参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Spring监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jedis学习</title>
      <link href="/2022/03/17/2022-jedis%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/17/2022-jedis%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="初识Jedis"><a href="#初识Jedis" class="headerlink" title="初识Jedis"></a>初识Jedis</h1><ol><li><p>创建maven项目</p></li><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jedis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><p>使用测试单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">        jedis = JedisPoolTest.getJedis();</span><br><span class="line">        jedis.auth(<span class="string">&quot;000415&quot;</span>);</span><br><span class="line">        jedis.select(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span>  <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map  = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lihua&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;13&quot;</span>);</span><br><span class="line">        jedis.hmset(<span class="string">&quot;doc:1&quot;</span>,map);</span><br><span class="line">    System.out.println(jedis.hgetAll(<span class="string">&quot;doc:1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(jedis != <span class="literal">null</span>)&#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jedis </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装docker</title>
      <link href="/2022/03/17/2022-%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85docker/"/>
      <url>/2022/03/17/2022-%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="树莓派安装docker"><a href="#树莓派安装docker" class="headerlink" title="树莓派安装docker"></a>树莓派安装docker</h1><h2 id="安装docker需要的依赖"><a href="#安装docker需要的依赖" class="headerlink" title="安装docker需要的依赖"></a>安装docker需要的依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common</span><br></pre></td></tr></table></figure><h2 id="添加docker源"><a href="#添加docker源" class="headerlink" title="添加docker源"></a>添加docker源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/raspbian/gpg | sudo apt-key add -</span><br><span class="line">echo &quot;deb [arch=armhf] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure><h2 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure><h2 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker --version</span><br></pre></td></tr></table></figure><h2 id="设置docker国内镜像"><a href="#设置docker国内镜像" class="headerlink" title="设置docker国内镜像"></a>设置docker国内镜像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><h2 id="添加如下内容"><a href="#添加如下内容" class="headerlink" title="添加如下内容"></a>添加如下内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker.service</span><br></pre></td></tr></table></figure><h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker.service</span><br></pre></td></tr></table></figure><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><h2 id="无uuid"><a href="#无uuid" class="headerlink" title="无uuid"></a>无uuid</h2><p><img src="https://s2.loli.net/2022/01/10/xj8OYVDWRpriMB4.png" alt="image-20220110105524516"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install uuid-runtime</span><br></pre></td></tr></table></figure><h2 id="无ifconfig"><a href="#无ifconfig" class="headerlink" title="无ifconfig"></a>无ifconfig</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update//ifconfig apt-get install net-tools //pingapt-get install iputils-ping </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker常用命令</title>
      <link href="/2022/03/17/2022-docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/03/17/2022-docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --net=none --privileged=true --name=xxx 镜像名</span><br><span class="line">docker run -it  --privileged=true --name=host1 ubuntu:16.04</span><br><span class="line">-it就相当于是运行容器后进入容器的命令行  如果不加这个选项的话容器默认是运行在后台</span><br><span class="line"></span><br><span class="line">--net=none 则是指定容器运行在自己的命名空间，但是并不对容器进行网络配置，比如网卡，IP地址等 关于这个选项的说明可以参考https://blog.csdn.net/liuliuzi_hz/article/details/50504176这篇文章</span><br><span class="line"></span><br><span class="line">--privileged=true 当我们进入容器的时候，默认是root用户，然而这个root用户还是没有很多权限，其实也就相当于宿主机的普通用户，加上privileged=true这个选项可以让容器内的用户权限提升</span><br><span class="line"></span><br><span class="line">--name=xxx给容器起个名字</span><br></pre></td></tr></table></figure><h2 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker image</span><br><span class="line"></span><br><span class="line">下载镜像位置https://hub.docker.com/_/ubuntu?tab=tags&amp;page=1</span><br><span class="line">docker pull busybox:latest</span><br></pre></td></tr></table></figure><h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看运行中容器</span><br><span class="line">docker ps</span><br><span class="line">#查看所有容器</span><br><span class="line">docker p</span><br></pre></td></tr></table></figure><h2 id="进入已有容器"><a href="#进入已有容器" class="headerlink" title="进入已有容器"></a>进入已有容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker start 容器名</span><br><span class="line">sudo docker exec -it 容器名 /bin/bash  </span><br></pre></td></tr></table></figure><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rm 容器名</span><br></pre></td></tr></table></figure><h2 id="为ovs绑定容器"><a href="#为ovs绑定容器" class="headerlink" title="为ovs绑定容器"></a>为ovs绑定容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ovs-docker add-port s1 eth0 host1</span><br><span class="line">sudo ovs-docker add-port s1 eth0 host2</span><br></pre></td></tr></table></figure><h1 id="史上最详细Docker安装Redis"><a href="#史上最详细Docker安装Redis" class="headerlink" title="史上最详细Docker安装Redis"></a>史上最详细Docker安装Redis</h1><p><a href="https://blog.csdn.net/weixin_45821811/article/details/116211724">史上最详细Docker安装Redis （含每一步的图解）实战_北-CSDN博客_docker redis</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql学习</title>
      <link href="/2022/03/17/2022-mysql%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/17/2022-mysql%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li><p>查询表增删改查次数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global status like &#x27;com_______&#x27; </span><br></pre></td></tr></table></figure></li><li><p>查询慢查询日志开关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;slow_query_log&#x27;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://s2.loli.net/2022/03/12/KlAsi8woT5j37Pf.png" alt="image-20220312194853793"></p><ul><li><p>查看sql时间都去哪了,通过havae_profiling参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查看是否支持</span><br><span class="line">select @@have_profiling</span><br><span class="line">#查看是否打开</span><br><span class="line">select @@profiling</span><br><span class="line">#打开</span><br><span class="line">set profiling=1</span><br><span class="line">#查看sql耗时</span><br><span class="line">show profiles</span><br><span class="line">#查看指定query各阶段耗时</span><br><span class="line">show profile for query query_id</span><br></pre></td></tr></table></figure></li><li><p>索引失效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">联合索引:必须1.要有第一索引,2.不能跳3.进行范围查询右侧列会失效,尽量使用&lt;=,&gt;=这样的</span><br><span class="line"></span><br><span class="line">索引:1.字符串不加&#x27;&#x27;</span><br><span class="line">    2.模糊匹配左侧可以,右侧不可以</span><br><span class="line">    3.不能计算</span><br><span class="line">    4.or  类似于&amp;&amp;</span><br><span class="line">    5.全局搜索比索引快</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>optee操作命令</title>
      <link href="/2022/03/17/2022-optee%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/03/17/2022-optee%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="optee操作命令"><a href="#optee操作命令" class="headerlink" title="optee操作命令"></a>optee操作命令</h1><h2 id="启动optee"><a href="#启动optee" class="headerlink" title="启动optee"></a>启动optee</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make QEMU_VIRTFS_ENABLE=y QEMU_USERNET_ENABLE=y -f qemu.mk run-only</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> /host &amp; mount -t 9p -o trans=virtio host /host</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDN </tag>
            
            <tag> optee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ovs操作指令</title>
      <link href="/2022/03/17/2022-ovs%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/03/17/2022-ovs%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ovs操作指令"><a href="#ovs操作指令" class="headerlink" title="ovs操作指令"></a>ovs操作指令</h1><h2 id="开启ovs数据库"><a href="#开启ovs数据库" class="headerlink" title="开启ovs数据库"></a>开启ovs数据库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo ovsdb-server --remote=punix:/usr/local/var/run/openvswitch/db.sock \</span><br><span class="line">                     --remote=db:Open_vSwitch,Open_vSwitch,manager_options \</span><br><span class="line">                     --private-key=db:Open_vSwitch,SSL,private_key \</span><br><span class="line">                     --certificate=db:Open_vSwitch,SSL,certificate \</span><br><span class="line">                     --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \</span><br><span class="line">                     --pidfile --detach</span><br><span class="line">sudo ovs-vsctl --no-wait init</span><br><span class="line">sudo ovs-vswitchd --pidfile --detach</span><br></pre></td></tr></table></figure><h2 id="利用网络明明空间实现内部通信"><a href="#利用网络明明空间实现内部通信" class="headerlink" title="利用网络明明空间实现内部通信"></a>利用网络明明空间实现内部通信</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建ovs (相当于搬来一台openflow交换机)</span></span><br><span class="line">ovs-vsctl add-br br-int</span><br><span class="line"><span class="comment">#创建端口</span></span><br><span class="line">ovs-vsctl add-port br-int vnet1 -- <span class="built_in">set</span> Interface vnet1 <span class="built_in">type</span>=internal</span><br><span class="line">ovs-vsctl add-port br-int vnet2 -- <span class="built_in">set</span> Interface vnet2 <span class="built_in">type</span>=internal</span><br><span class="line">ovs-vsctl add-port br-int vnet3 -- <span class="built_in">set</span> Interface vnet3 <span class="built_in">type</span>=internal</span><br><span class="line"><span class="comment">#1.创建网络命名空间(相当于搬来四台主机)</span></span><br><span class="line">ip netns add ns1</span><br><span class="line">ip netns add ns2</span><br><span class="line">ip netns add ns3</span><br><span class="line"></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> vnet1 netns ns1</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> vnet2 netns ns2</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> vnet3 netns ns3</span><br><span class="line"></span><br><span class="line">ip netns <span class="built_in">exec</span> ns1 ip <span class="built_in">link</span> <span class="built_in">set</span> lo up</span><br><span class="line">ip netns <span class="built_in">exec</span> ns1 ip <span class="built_in">link</span> <span class="built_in">set</span> vnet1 up</span><br><span class="line">ip netns <span class="built_in">exec</span> ns1 ip addr add 10.23.4.4/24 dev vnet1</span><br><span class="line">ip netns <span class="built_in">exec</span> ns2 ip <span class="built_in">link</span> <span class="built_in">set</span> lo up</span><br><span class="line">ip netns <span class="built_in">exec</span> ns2 ip <span class="built_in">link</span> <span class="built_in">set</span> vnet2 up</span><br><span class="line">ip netns <span class="built_in">exec</span> ns2 ip addr add 10.23.4.5/24 dev vnet2</span><br><span class="line">ip netns <span class="built_in">exec</span> ns3 ip <span class="built_in">link</span> <span class="built_in">set</span> lo up</span><br><span class="line">ip netns <span class="built_in">exec</span> ns3 ip <span class="built_in">link</span> <span class="built_in">set</span> vnet3 up</span><br><span class="line">ip netns <span class="built_in">exec</span> ns3 ip addr add 10.23.4.6/24 dev vnet3</span><br><span class="line"></span><br><span class="line">ovs-vsctl add-port br-int vnet0 -- <span class="built_in">set</span> Interface vnet0 <span class="built_in">type</span>=internal</span><br><span class="line">ip netns add ns0</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> vnet0 netns ns0</span><br><span class="line">ip netns <span class="built_in">exec</span> ns0 ip <span class="built_in">link</span> <span class="built_in">set</span> lo up</span><br><span class="line">ip netns <span class="built_in">exec</span> ns0 ip <span class="built_in">link</span> <span class="built_in">set</span> vnet0 up</span><br><span class="line">ip netns <span class="built_in">exec</span> ns0 ip addr add 10.23.4.7/24 dev vnet0</span><br><span class="line"></span><br><span class="line">ovs-vsctl <span class="built_in">set</span> Port vnet0 tag=100</span><br><span class="line">ovs-vsctl <span class="built_in">set</span> Port vnet1 tag=200</span><br><span class="line">ovs-vsctl <span class="built_in">set</span> Port vnet2 tag=200</span><br><span class="line">ip netns <span class="built_in">exec</span> ns1 ping 10.23.4.4</span><br></pre></td></tr></table></figure><h2 id="物理网卡绑定"><a href="#物理网卡绑定" class="headerlink" title="物理网卡绑定"></a>物理网卡绑定</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl add-port br-int ens33</span><br><span class="line">ifconfig ens33 0 up &amp;&amp; ifconfig br-int 192.168.159.128/24 up</span><br><span class="line">route add default gw 192.168.159.2 br-int</span><br></pre></td></tr></table></figure><h2 id="设置vxlan"><a href="#设置vxlan" class="headerlink" title="设置vxlan"></a>设置vxlan</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl add-port br-int vx1 -- <span class="built_in">set</span> interface vx1 <span class="built_in">type</span>=vxlan option:local_ip=172.16.25.129</span><br></pre></td></tr></table></figure><h2 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-ofctl show br-int -O OpenFlow13</span><br></pre></td></tr></table></figure><h2 id="查看流表"><a href="#查看流表" class="headerlink" title="查看流表"></a>查看流表</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-ofctl -O OpenFlow13 dump-flows br-int</span><br></pre></td></tr></table></figure><h2 id="查看组"><a href="#查看组" class="headerlink" title="查看组"></a>查看组</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-ofctl dump-groups br-int -O openflow13</span><br></pre></td></tr></table></figure><h2 id="查看交换机"><a href="#查看交换机" class="headerlink" title="查看交换机"></a>查看交换机</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl show</span><br></pre></td></tr></table></figure><h2 id="删除交换机"><a href="#删除交换机" class="headerlink" title="删除交换机"></a>删除交换机</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl  del-br br-int</span><br></pre></td></tr></table></figure><h2 id="删除端口"><a href="#删除端口" class="headerlink" title="删除端口"></a>删除端口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl del-port br-int vnet0</span><br></pre></td></tr></table></figure><h2 id="设置vxlan端口"><a href="#设置vxlan端口" class="headerlink" title="设置vxlan端口"></a>设置vxlan端口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl add-port br-int vxlan1 -- set interface vxlan1 type=vxlan  options:remote_ip=192.168.169.169 option:local_ip=192.168.159.128 options:key=100ovs-vsctl add-port br-local vxlan1 -- set interface vxlan1 type=vxlan  options:remote_ip=192.168.159.128  options:key=100</span><br></pre></td></tr></table></figure><h2 id="创建group"><a href="#创建group" class="headerlink" title="创建group"></a>创建group</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#创建group，并把vxlan1加入group中,vxlan1的端口是6ovs-ofctl -O OpenFlow13 add-group br-int  group_id=5566,type=select,bucket=output:6#创建入口为vnet0转发到group的流表,vnet0的端口号是1ovs-ofctl -O OpenFlow13 add-flow br-int in_port=1,actions=group:5566</span><br></pre></td></tr></table></figure><h2 id="开启upcall负载均衡"><a href="#开启upcall负载均衡" class="headerlink" title="开启upcall负载均衡"></a>开启upcall负载均衡</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl set open_vswitch . other_config:pmd-auto-lb=&quot;true&quot;</span><br></pre></td></tr></table></figure><h2 id="添加控制器"><a href="#添加控制器" class="headerlink" title="添加控制器"></a>添加控制器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl set-controller s1 tcp:&lt;controller IP&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><h2 id="删除控制器"><a href="#删除控制器" class="headerlink" title="删除控制器"></a>删除控制器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl del-controllers</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ovs </tag>
            
            <tag> SDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ryu命令</title>
      <link href="/2022/03/17/2022-ryu%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/03/17/2022-ryu%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><p><img src="https://s2.loli.net/2022/03/17/obagEe4TRDYfSLl.png" alt="image-20220106215416473"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line"></span><br><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/07/U27ulgRtbBHFNes.png" alt="image-20220106221356254"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install &#x27;oslo.config&lt;2.0.0&#x27;</span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装一些python的套件："><a href="#安装一些python的套件：" class="headerlink" title="安装一些python的套件："></a>安装一些<a href="https://so.csdn.net/so/search?q=python">python</a>的套件：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-eventlet python-routes python-webob python-paramiko</span><br></pre></td></tr></table></figure><h2 id="安装ryu"><a href="#安装ryu" class="headerlink" title="安装ryu"></a>安装ryu</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/osrg/ryu.git</span><br><span class="line">cd ryu</span><br><span class="line">git tag</span><br><span class="line">git checkout v3.16</span><br><span class="line">sudo pip install -i https://pypi.douban.com/simple --ignore-installed  -r tools/pip-requires</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><h2 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ryu --version</span><br><span class="line">ryu-manager</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/17/ALpNxXQrWg6Ucvy.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> SDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDN </tag>
            
            <tag> ryu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ryu安装</title>
      <link href="/2022/03/17/2022-ryu%E5%AE%89%E8%A3%85/"/>
      <url>/2022/03/17/2022-ryu%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><p><img src="https://s2.loli.net/2022/01/07/BKOV26PewoaRhYz.png" alt="image-20220106215416473"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line"></span><br><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/07/U27ulgRtbBHFNes.png" alt="image-20220106221356254"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install &#x27;oslo.config&lt;2.0.0&#x27;</span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装一些python的套件："><a href="#安装一些python的套件：" class="headerlink" title="安装一些python的套件："></a>安装一些<a href="https://so.csdn.net/so/search?q=python">python</a>的套件：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-eventlet python-routes python-webob python-paramiko</span><br></pre></td></tr></table></figure><h2 id="安装ryu"><a href="#安装ryu" class="headerlink" title="安装ryu"></a>安装ryu</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/osrg/ryu.git</span><br><span class="line">cd ryu</span><br><span class="line">git tag</span><br><span class="line">git checkout v3.16</span><br><span class="line">sudo pip install -i https://pypi.douban.com/simple --ignore-installed  -r tools/pip-requires</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><h2 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ryu --version</span><br><span class="line">ryu-manager</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190406205820297.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> SDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDN </tag>
            
            <tag> ryu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/2022/03/17/2022-java%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/17/2022-java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol><li>String字符使用加号拼接，实际上是新建一个StringBuffer对象，调用apped方法，最后再转为String方法。</li><li>StringBuff的append方法添加数据并返回对象本身（链式编程）</li><li>ArrayList&lt;&gt;在指定位置添加元素不会替换，指定元素之后的所有元素后移</li><li><strong>继承</strong>：变量先看方法内部有没有，没有到本类成员变量去找，再没有到父类成员变量去找，不考虑父亲的父亲。</li><li>this代表本类对象的引用，super表示父类对象引用（二者都可以访问构造方法）</li><li>子类可能需要用到父类，所以子类初始化，父类也初始化 ，子类第一句默认super（）</li><li>视频super内存图</li><li>方法重写（注解Override）可以用super.调用父类方法,私有方法不能重写，子类方法访问权限不能更低（public&gt;默认&gt;私有） </li><li>Java只支持单继承，不支持多继承，还支持多层继承</li><li>final修饰基本数据类型，基本数据类型不能改变，修饰引用类型，引用变量的地址值不能改变。</li><li>static表示共享，静态，被static修饰的成员变量建议使用类名来访问。</li><li><strong>多态</strong>：同一个对象在不同时刻表现出来不同的不同形态，例如：猫 cat &#x3D; new 猫();动物 animal &#x3D; new 猫();多态的前提和体现：1.有继承&#x2F;实现关系，2.有方法重写，3.有父类引用指向子类引用。</li><li>多态的成员变量编译和运行都看左边，成员方法的编译看左边，运行看右边。</li><li>多态传形参传父类，实参为子类，父类有的方法才能调用，不能调用子类特有的方法，规则参考上一条。</li><li><strong>多态转型</strong>：  <em>向上转型</em>：父类引用指向子类对象Animal a &#x3D; new Cat（），<em>向下转型</em>：父类引用转为子类对象，Cat c &#x3D; new (Cat)a;</li><li>有抽象方法必须是抽象类，抽象类不一定需要抽象方法</li><li>抽象子类要么是抽象子类要么重写抽象类中的所有方法。</li><li>多态的形式：具体类多态，抽象类多态，接口类多态</li><li>接口类的实现类要么重写接口中的所有抽象方法，要么是抽象类。</li><li>接口成员变量只能是常量，默认修饰符：public  static  final，成员方法只能是抽象方法，默认修饰符public  abstract。</li><li>类实现关系可以单实现也可以多实现，还可以继承一个类的同时实现多个接口</li><li>接口和接口是继承关系，可以单继承，也可以多继承。</li><li>抽象类成员变量有常量，变量，构造方法，抽象方法，非抽象方法。接口只有常量和抽象方法。</li><li>设计理念，抽象类对 对象抽象包括属性和行为，接口对行为抽象主要是行为。</li><li>抽象类是对事物的抽象，接口是对行为的抽象。</li><li>抽象类名作为形参和返回值需要的是该抽象类的子类对象。</li><li>接口名作为形参和返回值需要的是该接口的实现类对象。</li><li>内部类（在类中定义一个类）可以直接访问外部类的成员，包括私有，外部类访问内部类的成员必须创建对象</li><li>成员内部类public修饰，创建对象例子：Outer.Inter oi &#x3D; new Outer().new Inter(),private修饰需要在外部类使用方法调用。</li><li>局部内部类，在方法内部中定义的类，要在方法内部定义使用。</li><li>匿名内部类本质是继承子类或接口的实现类</li><li>接口名作为形参时可以不创建实现类对象，而是使用匿名内部类</li><li>没有构造方法看方法是不是static修饰的，如果是可以用类名修饰。</li><li>所有类建议重写tostring方法。</li><li>工具类（例：Math，System）构造方法用private修饰，方法类用public static修饰，方便使用类名调用。</li><li><strong>装箱</strong>：将基本数据类型转换成对应的包装类型。<strong>拆箱</strong>：将包装类类型准换成对应的基本数据类型。</li><li>只要是对象（包装类对象）在使用前就要判是否为null。</li><li>使用包装类有更多方法操作该对象，更多使用是基本数据类型和字符串之间的转换。</li><li>int转string：valueof</li><li>string转int：parseInt</li><li>try-catch在try中异常时创建一个异常对象，去catch中匹配处理。</li><li>编译时异常用try-catch或throws，用throws处理需要谁调用谁处理，运行时异常可以不处理。</li><li>throws跟在方法名后，后跟异常类名；throw放在方法体中，后跟异常对象名。</li><li><img src="https://img-blog.csdnimg.cn/1ac89f6887db4480882dec30e2e1f2c1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW96auY6aqb6L-caQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>集合的遍历用迭代器</li><li>迭代器遍历过程中，通过集合对象修改了集合中的元素，造成迭代器获取元素中判断预期修改值和实际修改值不一样。</li><li>列表迭代器（ListIterator）有add方法（迭代器没有），不会产生并发修改异常</li><li><img src="https://img-blog.csdnimg.cn/031c1fa2f5b943639cf9ad49469ceef4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW96auY6aqb6L-caQ==,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>set集合没有索引，不能用普通for遍历。</li><li>默认情况下（Objiect中的hasCode）不同对象的哈希值是不同的，但通过方法重写可以使不同对象的哈希值相同。</li><li>java中哈希表的实现是数组加链表。</li><li>hashSet存储类对象要重写equals和hashcode方法（可自动生成）。</li><li>LinkedHashSet（继承HashSet）元素有序且唯一。</li><li><a href="https://blog.csdn.net/zhanshixiang/article/details/82492872?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163196197416780357212154%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163196197416780357212154&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-82492872.first_rank_v2_pc_rank_v29&utm_term=TreeSet&spm=1018.2226.3001.4187">Set集合之TreeSet集合</a>.</li><li>泛型可用在类，方法和接口中，被称为泛型类，泛型方法和泛型接口</li><li>泛型类在类名后加<T>,用到变量类型时用&lt;代替&gt;</li><li>泛型方法：public <T> void demo(T t){}</li><li>泛型创建时类似ArrayList</li><li>泛型接口在接口名后加 <T>，实现类在实现类名后加 <T>接口名后加 <T>。</li><li>接口方法不要加任何修饰符</li><li>可变参数例子：**public  static  int sum(int… a){}**。在数据类型后加…</li><li>可变参数是一个数组，包含可变参数，可变参数要放到后边。</li><li>map获取所有key： Set<K> keySet()</li><li>map获取所有值的集合： Collection<V> values()</li><li>File就是文件和目录路径名的抽象表示</li><li>字节输出流做了三件事：1.  调用系统功能创建了对象。2. 创建了字节输出流对象。       3. 字节输出流对象指向文件</li><li>字节输出流write()方法写的是字节，可使用getBytes()获得字符串对应的字节码。</li><li>windows中”\r\n”表示换行</li><li>字节缓冲输入&#x2F;输出流只是提供一个缓冲区。</li><li>汉字gbk编码2个字节，utf-8编码三个字节，而字节流输入输出只能输出一个字节，所以要字符流输入输出。</li><li>汉字存储的时候编码是负数。</li><li>字符流&#x3D;字节流+编码表（类似字节缓冲区，都需要传参字节流对象）</li><li>GBK中文编码，utf-8万国码，用什么规则编码就要用什么规则解码</li><li>字符流有flush()刷新流方法,字符流中close()方法先刷新再关闭。</li><li>字符缓冲流BufferedWriter和BufferedReader两个方法，newLine()和readLine(),后一个方法已经到结尾则为null，且不包含终止符号</li><li>字节打印流printStream继承父亲的write()方法会转码，而自己的write()方法会原样输出。</li><li>对象序列化流序列化对象，对象需要实现serializable接口，serializable接口是个标记接口，不需要重写任何方法。</li><li>properties不能写泛型，和io流结合的方法load和store</li><li>线程优先级范围1-10。</li><li>继承Thread类有getName()方法，实现Runnable接口没有getName()方法，这也是实现多线程的两种方法。</li><li>非静态同步方法锁对象是this，静态同步方法的锁对象是类名.calss</li><li>StringBuffer线程安全对应StringBuider不线程安全，Vector线程安全，ArrayList不线程安全，HashTable线程安全HashMap不线程安全。三个线程安全的类也不多用，常用Collections类中的方法来返回安全对象。</li><li>lock和unlock方法常结合try—finally方法使用</li><li>使用wait要在synchronized方法中使用，记得使用notifyAll方法。</li><li>lambda方法使用（）-&gt;{ },小括号里可以有参数，用逗号隔开，有且仅有一个参数，小括号可以省略；有且仅有一条代码，大括号和分号可以省略；如果有return且包含return只有一条代码块，return要省略；实现的是接口中的方法，不用再去写一个实现类。</li><li>lambda方法使用条件有一个接口，且只有一个抽象方法，使用在方法参数的地方。</li><li>匿名内部类会生成字节码(class)文件，而lambda不会生成字节码文件。</li><li>接口的组成：常量（public static final）,抽象方法（public abstract）；java8新增默认方法和静态方法，java9新增私有方法。</li><li>lambda表达式被类的实例方法替代的时候，第一个参数作为调用者，后边的参数全部传递给该方法做参数。</li><li>函数式接口Consum注意andThen()方法，Predicate有and和or方法。</li><li>Collections集合默认方法生成流，Map间接方法生成流，数组使用静态方法Stream.of()生成流。.</li><li>向下转型使用强制转型,后边跟个父类对象:例:Cat c &#x3D; (Cat)animal,且只能转同类型,猫转猫,狗转狗</li><li>没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类</li><li>Java中的接口更多的体现在对行为的抽象</li><li>接口与接口继承关系，可以单继承，也可以多继承内部类可以直接访问外部类的成员，包括私有</li><li>工具类设计思想:1.构造方法用 private 修饰2.成员用 public static 修饰</li><li>Calendar的set方法年需要手动减一,月份需要手动加一.</li><li>修改迭代器中的元素会发生异常,使用for</li><li>列表有专用的迭代器,ListIterator</li><li>增强for不能用于迭代器.</li><li>Set没有索引、只能通过迭代器或增强for循环遍历</li><li>重写equal方法还要重写hashCode方法,否则equal无效,hashSet表内容相同的对象哈希值不103. 同会存到不同的位置,达不到元素不重复的目的.</li><li>重写Comparable接口的compareTo方法this在前从小到大,this在后从大到小</li><li>对象反序列化流ObjectInputStream要抛出IOException ,ClassNotFoundException异常.</li><li>private final static long serialVersionUID &#x3D; 42L修改了对象所属的类文件，读取数据会不会出问题呢</li><li>transient关键字修饰，该关键字标记的成员变量不参与序列化过程</li><li>Properties的store方法备注没有写null.</li><li>Function&lt;T,R&gt;接口通常用于对参数进行处理，转换(处理逻辑由Lambda表达式实现)，然后<strong>返回一个新的值</strong>,这个值在andthen方法时才有用.</li><li>Stream的count()方法返回值是long.</li><li>transient 只能修饰变量，不能修饰类和方法</li><li>static 变量因为不属于任何对象(Object)，所以无论有没有 transient 关键字修饰，均不会被序列化</li><li>静态代码块对于定义在它之后的静态变量，可以赋值，但是不能访问</li><li>非静态代码块与构造函数的区别是： 非静态代码块是给所有对象进行统一初始化，而构造函数是给对应的对象初始化，因为构造函数是可以多个的，运行哪个构造函数就会建立什么样的对象，但无论建立哪个对象，都会先执行相同的构造代码块。也就是说，构造代码块中定义的是不同对象共性的初始化内容。</li><li>File的mkdirs方法只能创建文件夹,即使你的后缀是文件格式.</li><li>Deque 还提供有 push() 和 pop() 等其他方法，可用于模拟栈</li><li><img src="https://img-blog.csdnimg.cn/0ec46b539d204e11ac90640536cf0b81.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW96auY6aqb6L-caQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>ArrayDeque 是基于可变长的数组和双指针来实现</li><li>ArrayDeque 不支持存储 NULL 数据，但 LinkedList 支持</li><li>PriorityQueue 是非线程安全的，且不支持存储 NULL 和 non-comparable 的对象</li><li>PriorityQueue 默认是小顶堆</li><li>HashMap 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个</li><li>String拼接两个字符串对象会在堆上创建一个新对象.</li><li>String s1 &#x3D; new String(“abc”)创建了两个对象.</li><li>两种浮点数类型没有浮点数技术.</li><li>sleep不释放锁,wait释放锁</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习-封装</title>
      <link href="/2022/03/17/2022-Python%E5%AD%A6%E4%B9%A0-%E5%B0%81%E8%A3%85/"/>
      <url>/2022/03/17/2022-Python%E5%AD%A6%E4%B9%A0-%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment">#这里的self是实例化对象,例如下边的t</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sname</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br><span class="line"></span><br><span class="line">t=T(<span class="string">&quot;王子&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#t.__dict__里存的是实例化对象的属性</span></span><br><span class="line"><span class="comment">#&#123;&#x27;name&#x27;: &#x27;王子&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(t.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#t.__class__存的是创建实例化对象的类</span></span><br><span class="line"><span class="comment">#&lt;class &#x27;__main__.T&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(t.__class__)</span><br><span class="line"></span><br><span class="line">t.sname()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习-多任务</title>
      <link href="/2022/03/17/2022-Python%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/03/17/2022-Python%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="直接使用线程模块"><a href="#直接使用线程模块" class="headerlink" title="直接使用线程模块"></a>直接使用线程模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入线程模块</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我在唱歌&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"><span class="comment">#创建线程对象</span></span><br><span class="line">t=threading.Thread(target=sing)</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以带参,传元组,只传一个后边带逗号</span></span><br><span class="line"><span class="comment">#t=threading.Thread(target=sing,args=(,))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建执行线程</span></span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有线程</span></span><br><span class="line">threading.<span class="built_in">enumerate</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看线程数量</span></span><br><span class="line"><span class="built_in">len</span>(threading.<span class="built_in">enumerate</span>())</span><br></pre></td></tr></table></figure><h3 id="继承线程类"><a href="#继承线程类" class="headerlink" title="继承线程类"></a>继承线程类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#继承threading模块的Thread类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(threading.Thread):</span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    t=MyThread()</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h2 id="共享全局变量"><a href="#共享全局变量" class="headerlink" title="共享全局变量"></a>共享全局变量</h2><ol><li>当只修改全局变量的值不需在函数中使用 global声明</li><li>修改了全局变量指向的内容要在函数中使用global声明</li><li>用来传递的参数也共享</li></ol><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建锁</span></span><br><span class="line">mutex=threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment">#上锁</span></span><br><span class="line">mutex.acquire()</span><br><span class="line"></span><br><span class="line"><span class="comment">#解锁</span></span><br><span class="line">mutex.release()</span><br></pre></td></tr></table></figure><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;菊花台&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;化蝶&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p1=multiprocessing.Process(target=sing1)</span><br><span class="line">    p2=multiprocessing.Process(target=sing2)</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="队列实现进程间通信"><a href="#队列实现进程间通信" class="headerlink" title="队列实现进程间通信"></a>队列实现进程间通信</h2><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing </span><br><span class="line"></span><br><span class="line"><span class="comment">#判空</span></span><br><span class="line"><span class="comment">#q.empty()</span></span><br><span class="line"><span class="comment">#判满</span></span><br><span class="line"><span class="comment">#q.qull()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_from_web</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="comment">#模拟数据</span></span><br><span class="line">    data=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> data:</span><br><span class="line">        q.put(temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analysis_data</span>(<span class="params">q</span>):</span><br><span class="line">    watting_analysis_data=<span class="built_in">list</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#从队列中拿数据</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        data=q.get()</span><br><span class="line">        watting_analysis_data.append(data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> q.empty():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(watting_analysis_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#创建队列</span></span><br><span class="line">    q=multiprocessing.Queue(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建进程通信</span></span><br><span class="line">    p1=multiprocessing.Process(target=down_from_web,args=(q,))</span><br><span class="line">    p2=multiprocessing.Process(target=analysis_data,args=(q,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br></pre></td></tr></table></figure><h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">woker</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">#进程池放3个进程</span></span><br><span class="line">po=multiprocessing.Pool(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="comment">#使用apply_async调用进程运行</span></span><br><span class="line">    <span class="comment">#放入进程的函数,参数(元组)</span></span><br><span class="line">    po.apply_async(woker,(i))</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭进程池,po不再有新的请求</span></span><br><span class="line">po.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#主进程等待po中进程结束,放在close之后</span></span><br><span class="line">po.join()</span><br></pre></td></tr></table></figure><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p>一条线程时间片轮转实现多任务<br>在一条线程执行某函数需耗时切换另一个函数</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p><strong>迭代器</strong>:存储的是生成数据的方式,占用很小的空间<br><strong>例如</strong>:python2版本的range直接生成一个列表,python3版本的range存放生成数据的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断一个类是否可以迭代</span></span><br><span class="line"><span class="comment">#1.实现iter方法的类才可以迭代</span></span><br><span class="line"><span class="comment">#2.iter返回一个迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实现iter方法的类才可以迭代(可以使用for)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Classmate</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">         self.names=<span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.names.append(name)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#返回一个迭代器,将自己当参数传过去(为了在迭代器中调用next方法迭代自己的值)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> ClassIterator(self)</span><br><span class="line"></span><br><span class="line"><span class="comment">#有iter和next方法的类为迭代器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassIterator</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span>  <span class="title function_">__init__</span>(<span class="params">self,obj</span>):</span><br><span class="line">        self.obj=obj</span><br><span class="line">        self.current_num=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.current_num&lt;<span class="built_in">len</span>(self.obj.names):</span><br><span class="line">            ret=self.obj.names[self.current_num]</span><br><span class="line">            self.current_num+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="comment">#抛出异常不会在for循环可迭代对象为空时继续循环</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br></pre></td></tr></table></figure><p><strong>迭代器本身就可以迭代</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Classmate</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">         self.names=<span class="built_in">list</span>()</span><br><span class="line">         self.current_num=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.names.append(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.current_num&lt;<span class="built_in">len</span>(self.obj.names):</span><br><span class="line">            ret=self.obj.names[self.current_num]</span><br><span class="line">            self.current_num+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="comment">#抛出异常不会在for循环可迭代对象为空时继续循环</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>生成器是一种特殊的迭代器(没有iter和next方法)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">creat_num</span>(<span class="params">all_num</span>):</span><br><span class="line">    a,b=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    current_num=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> current_num&lt;all_num:</span><br><span class="line">        <span class="comment">#函数中有yield,这个函数就是一个生成器的模版</span></span><br><span class="line">        <span class="comment">#有yield停止,并返回yield后的值</span></span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a,b=b,a+b</span><br><span class="line">        current_num+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用生成器的模版,创建一个生成器对象,只创建不执行</span></span><br><span class="line">obj=creat_num(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#for循环生成器时,输出第一个时执行生成器模版到yield处停止,之后的输出从yield后继续执行</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> obj:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><p>注意:</p><ol><li>可以使用next()调用生成器的next方法</li><li>生成多个生成器互不干扰</li><li>生成器对象有send方法可以传参数一般开始先用next(),如果第一个运行可以传None作为参数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">用<span class="built_in">next</span>取值时要抛异常</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ret=<span class="built_in">next</span>(obj)</span><br><span class="line">        <span class="built_in">print</span>(ret)</span><br><span class="line">    <span class="comment">#except StopIteration</span></span><br><span class="line">    <span class="comment">#生成器模版中的return值可以通过异常获得</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(ret.value)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">creat_num</span>(<span class="params">all_num</span>):</span><br><span class="line">    a,b=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    current_num=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> current_num&lt;all_num:</span><br><span class="line">        ret=<span class="keyword">yield</span> a</span><br><span class="line">        a,b=b,a+b</span><br><span class="line">        current_num+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">obj=creat_num(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行到yield左边,将a的值返回</span></span><br><span class="line">ret=<span class="built_in">next</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">#接着next运行,将参数赋值给yield右边,运行到下一次yield,将将a的值返回</span></span><br><span class="line"><span class="comment">#obj.send(None)</span></span><br><span class="line">ret=obj.send(<span class="string">&quot;123&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="yeild实现多任务"><a href="#yeild实现多任务" class="headerlink" title="yeild实现多任务"></a>yeild实现多任务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_2</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>()</span><br><span class="line">    <span class="comment">#创建生成器对象</span></span><br><span class="line">    t1=task_1()</span><br><span class="line">    t1=task_1()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment">#类似时间片轮转,遇到yeild去执行另一个</span></span><br><span class="line">        <span class="built_in">next</span>(t1)</span><br><span class="line">        <span class="built_in">next</span>(t2)</span><br></pre></td></tr></table></figure><h3 id="gevent实现多任务"><a href="#gevent实现多任务" class="headerlink" title="gevent实现多任务"></a>gevent实现多任务</h3><p>gevent一条线程时间片轮转实现多任务<br>在执行等待操作时切换任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#有耗时操作需要</span></span><br><span class="line"><span class="comment">#将程序中的耗时操作代码换成gevent中自己实现的模块</span></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coroutine_work</span>(<span class="params">coroutine_name</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(coroutine_name,i)</span><br><span class="line">        <span class="comment">#实际程序不一定需要使用sleep来耗时</span></span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment">#封转好的协程操作,前一个参数为函数,后一个为传入的参数</span></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(coroutine_work,<span class="string">&quot;work1&quot;</span>),</span><br><span class="line">    gevent.spawn(coroutine_work,<span class="string">&quot;work1&quot;</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>进程切换资源消耗大,效率一般</li><li>线程切换需要资源一般,效率一般</li><li>协程切换任务资源很小,效率高</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习-socket</title>
      <link href="/2022/03/17/2022-Python%E5%AD%A6%E4%B9%A0-socket/"/>
      <url>/2022/03/17/2022-Python%E5%AD%A6%E4%B9%A0-socket/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="socket简介"><a href="#socket简介" class="headerlink" title="socket简介"></a>socket简介</h1><pre><code>大部分网络应用都是用socket收发信息，例如聊天软件和浏览器。</code></pre><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>socket套接字为全双工</li><li>当socket接收数据时操作系统会对socket未读取的信息进行缓存</li></ol><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><ol><li>创建套接字</li><li>使用套接字收数据</li><li>关闭套接字</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment">#前边参数表示使用IPV4还是IPV6，后边表示使用TCP还是UDP</span></span><br><span class="line">s=socket.socket（socket.AF_INET,socket.SOCK_DGRAM）</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以绑定端口</span></span><br><span class="line">s.bind((<span class="string">&#x27;&#x27;</span>,<span class="number">7890</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#前边参数为字节信息,后边为一个元组，包括对方ip和端口信息,首先要能ping的通.</span></span><br><span class="line"><span class="comment">#前边参数也可以使用.encode(utf-8)</span></span><br><span class="line">s.sendto(<span class="string">b&quot;hello&quot;</span>,(<span class="string">&quot;192.168.33.5&quot;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭套接字</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h3 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h3><ol><li>创建套接字</li><li>绑定自己信息</li><li>接收信息</li><li>关闭套接字</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment">#前边参数表示使用IPV4还是IPV6，后边表示使用TCP还是UDP</span></span><br><span class="line">s=socket.socket（socket.AF_INET,socket.SOCK_DGRAM）</span><br><span class="line"></span><br><span class="line"><span class="comment">#绑定本地信息</span></span><br><span class="line"><span class="comment">#前边为ip,空字符串表示本机ip,后边是端口号</span></span><br><span class="line">localaddr(<span class="string">&#x27;&#x27;</span>,<span class="number">7788</span>)</span><br><span class="line">s.bind(localaddr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#接收数据,参数表示限制最大字数.</span></span><br><span class="line">recv_data=s.recvfrom(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#recv_data中收到的是一个元祖(接收到的数据,(发送方的ip,端口))</span></span><br><span class="line">recv_msg=recv_data[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出接受的信息,注意编码格式</span></span><br><span class="line"><span class="built_in">print</span>(recv_msg.decode(<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭套接字</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="发送数据-1"><a href="#发送数据-1" class="headerlink" title="发送数据"></a>发送数据</h3><ol><li>创建套接字</li><li>链接服务器</li><li>发送数据</li><li>关闭套接字</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建套接字</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment">#链接服务器</span></span><br><span class="line">s.connect((<span class="string">&#x27;192.168.33.11&#x27;</span>,<span class="number">7890</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#发送数据</span></span><br><span class="line">send_data=<span class="built_in">input</span>(<span class="string">&quot;请输入要发送的数据:&quot;</span>)</span><br><span class="line">s.send(send_data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭套接字</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h3 id="接收数据-1"><a href="#接收数据-1" class="headerlink" title="接收数据"></a>接收数据</h3><ol><li>创建套接字</li><li>绑定本地信息ip+端口</li><li>设置监听端口</li><li>等待客户端请求(accept会新建一个套接字)</li><li>接收客户端请求(使用新建的套接字接收请求)</li><li>响应客户端请求</li><li>关闭套接字</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建套接字</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment">#绑定本地ip</span></span><br><span class="line">s.bind((<span class="string">&#x27;&#x27;</span>,<span class="number">7890</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#让默认套接字由主动变为被动listen,参数一般是默认值,对同时链接的客户端有一点关系</span></span><br><span class="line">s.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#等待客户端的链接 accept</span></span><br><span class="line"><span class="comment">#前边为新建一个处理客户端请求的套接字,后边是客户端ip+端口</span></span><br><span class="line">new_client_socket,client_addr=s.accept()</span><br><span class="line"></span><br><span class="line"><span class="comment">#接收请求(会堵塞)</span></span><br><span class="line">recv_data=new_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#发数据给客户端</span></span><br><span class="line">new_client_socket.send(<span class="string">&#x27;hello&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭套接字</span></span><br><span class="line">s.close()</span><br><span class="line">new_client_socket.close()</span><br></pre></td></tr></table></figure><h1 id="下载器案例"><a href="#下载器案例" class="headerlink" title="下载器案例"></a>下载器案例</h1><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><ol><li>with在新建文件时用,在对文件操作异常时不用抛异常,可以直接close()</li><li>在打开文件时要使用try抛异常</li></ol><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="服务器a"><a href="#服务器a" class="headerlink" title="服务器a"></a>服务器a</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据分析之matplotlib</title>
      <link href="/2022/03/17/2022-Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bmatplotlib/"/>
      <url>/2022/03/17/2022-Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bmatplotlib/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>﻿# Python数据分析之matplotlib</p><h1 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h1><p><strong>matplotlib</strong>是模仿MATLAB构建,是最流行的Python<strong>底层绘图库</strong>,主要做数据可视化图表</p><h1 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h1><ol><li>将数据可视化,更直观的呈现</li><li>是数据更客观,更具说服力</li><li>虽然不常用,但在后序学习中经常用到</li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="基础绘图和调整x轴的刻度"><a href="#基础绘图和调整x轴的刻度" class="headerlink" title="基础绘图和调整x轴的刻度"></a>基础绘图和调整x轴的刻度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span>  plt </span><br><span class="line"></span><br><span class="line"><span class="comment">#range函数左闭右开,最后一个参数为步长</span></span><br><span class="line"></span><br><span class="line">x=<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">26</span>,<span class="number">2</span>)                          </span><br><span class="line">y=[<span class="number">15</span>,<span class="number">13</span>,<span class="number">14.5</span>,<span class="number">17</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">26</span>,<span class="number">24</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">15</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图片大小,figsize长和高,dpi为清晰程度,每英寸上像素点的个数</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#绘图</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置x轴的刻度,参数为数组,y同理</span></span><br><span class="line"><span class="comment">#ticks数组,表示在x轴的什么位置</span></span><br><span class="line"><span class="comment">#[label]数组.在对应的ticks处显示什么</span></span><br><span class="line"><span class="comment">#ratation为旋转角度,实际此处可为多个参数,只是ratation使用较多</span></span><br><span class="line">plt.xticks(ticks,[lable].ratation=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#取步长</span></span><br><span class="line">plt.xticks(x[::<span class="number">2</span>])</span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="built_in">min</span>(y),<span class="built_in">max</span>(y)+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存,也可保存为svg矢量图,放大不会有锯齿</span></span><br><span class="line"><span class="comment">#plt.savefig(&quot;./p1.png&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#展示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h2><p><a href="https://blog.csdn.net/weixin_45476836/article/details/102495457">设置中文的多种方法</a></p><h2 id="添加轴和标题描述信息"><a href="#添加轴和标题描述信息" class="headerlink" title="添加轴和标题描述信息"></a>添加轴和标题描述信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.xlable(<span class="string">&quot;&quot;</span>)</span><br><span class="line">plt.ylable(<span class="string">&quot;&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="绘制网格"><a href="#绘制网格" class="headerlink" title="绘制网格"></a>绘制网格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#参数为透明度</span></span><br><span class="line">plt.grid(alpha =<span class="number">0.4</span>)</span><br></pre></td></tr></table></figure><h2 id="绘制多条折线"><a href="#绘制多条折线" class="headerlink" title="绘制多条折线"></a>绘制多条折线</h2><p>只需多次调用plot()方法<br><strong>plot方法参数:</strong></p><ol><li>x,y</li><li>lable&#x3D;””,线名</li><li>color&#x3D;””,线的颜色</li><li>linestyle&#x3D;””,线的样式(虚线,实线等)</li><li>linewith&#x3D;5,线的粗细</li><li>alpha&#x3D;0.4,透明度</li></ol><h2 id="对比常用统计图"><a href="#对比常用统计图" class="headerlink" title="对比常用统计图"></a>对比常用统计图</h2><p><a href="https://blog.csdn.net/leidashuaige/article/details/88809539">常用统计图</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow安装</title>
      <link href="/2022/03/17/2022-TensorFlow%E5%AE%89%E8%A3%85/"/>
      <url>/2022/03/17/2022-TensorFlow%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>﻿# TensorFlow安装</p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p><a href="https://blog.csdn.net/ITLearnHall/article/details/81708148">教安装Anaconda的博客</a><br>在Anaconda中安装的python和电脑中原有的python不冲突</p><h2 id="安装tensorflow"><a href="#安装tensorflow" class="headerlink" title="安装tensorflow"></a>安装tensorflow</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.bilibili.com/video/BV19h411Z7Ft?share_source=copy_web">教安装tensorflow的视频</a><br>安装完Anaconda,Anaconda自带Anaconda prompt<br>降低python版本(Anaconda prompt中使用)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install python=xxx(版本号)</span><br></pre></td></tr></table></figure><p>2.问题</p><p><strong>conda安装环境报错</strong>：Solving environment: failed with initial frozen solve.<br><a href="https://blog.csdn.net/weixin_41622348/article/details/100582862">解决办法</a></p><h2 id="在jupyter上运行"><a href="#在jupyter上运行" class="headerlink" title="在jupyter上运行"></a>在jupyter上运行</h2><p>Anaconda自带jupyter,运行后在new选择python3,即可使用tensorflow,<br>jupyter报错可以尝试在Anaconda的可视化界面更新jupyter.</p>]]></content>
      
      
      <categories>
          
          <category> TensorFlow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy重构壁纸爬虫</title>
      <link href="/2022/03/17/2022-scrapy%E9%87%8D%E6%9E%84%E5%A3%81%E7%BA%B8%E7%88%AC%E8%99%AB/"/>
      <url>/2022/03/17/2022-scrapy%E9%87%8D%E6%9E%84%E5%A3%81%E7%BA%B8%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="scrapy重构壁纸爬虫"><a href="#scrapy重构壁纸爬虫" class="headerlink" title="scrapy重构壁纸爬虫"></a>scrapy重构壁纸爬虫</h1><h2 id="Spider"><a href="#Spider" class="headerlink" title="Spider"></a>Spider</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> spider_test.items <span class="keyword">import</span> ImgItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CsdnSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;2717.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.2717.com/ent/meinvtupian/list_11_1.html&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        lis = response.xpath(<span class="string">&quot;//div[@class=&#x27;MeinvTuPianBox&#x27;]//li&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">            item = ImgItem()</span><br><span class="line">            a = li.xpath(<span class="string">&#x27;.//a&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            href = a.css(<span class="string">&#x27;::attr(href)&#x27;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            href = <span class="string">&#x27;https://www.2717.com&#x27;</span> + href</span><br><span class="line">            url = href[<span class="number">0</span>:href.rfind(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>]</span><br><span class="line">            item[<span class="string">&#x27;url&#x27;</span>] = url</span><br><span class="line">            <span class="keyword">yield</span> Request(url=href, callback=self.parser_img, meta=&#123;<span class="string">&#x27;item&#x27;</span>: item&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parser_img</span>(<span class="params">self, response</span>):</span><br><span class="line">        imgitem = ImgItem()</span><br><span class="line">        title = response.css(<span class="string">&#x27;#picBody img::attr(alt)&#x27;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        img_href = response.css(<span class="string">&#x27;#picBody img::attr(src)&#x27;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        imgitem[<span class="string">&#x27;title&#x27;</span>] = title</span><br><span class="line">        imgitem[<span class="string">&#x27;url&#x27;</span>] = img_href</span><br><span class="line">        next_url = response.css(<span class="string">&#x27;#nl a::attr(href)&#x27;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> (next_url != <span class="string">&#x27;##&#x27;</span>):</span><br><span class="line">            item = response.meta[<span class="string">&#x27;item&#x27;</span>]</span><br><span class="line">            url = item[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">            <span class="keyword">yield</span> Request(url=url + next_url, callback=self.parser_img, meta=&#123;<span class="string">&#x27;item&#x27;</span>: item&#125;)</span><br><span class="line">        <span class="keyword">yield</span> imgitem</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>字符串截取+寻找字符串位置</p><p>rfind()函数从右往左发现第一个括号里的字符位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://www.jianshu.com/p/854393ec0fb3</span><br><span class="line">url = href[<span class="number">0</span>:href.rfind(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span></span><br><span class="line">https://www.jianshu.com/p/           </span><br></pre></td></tr></table></figure><p>使用meta参数完成,函数间参数值的传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//发送  必须是实例化的item</span><br><span class="line"><span class="keyword">yield</span> Request(url=href, callback=self.parser_img, meta=&#123;<span class="string">&#x27;item&#x27;</span>: item&#125;)</span><br><span class="line">//接收</span><br><span class="line">item = response.meta[<span class="string">&#x27;item&#x27;</span>]</span><br></pre></td></tr></table></figure><h1 id="Item"><a href="#Item" class="headerlink" title="Item"></a>Item</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line">class ImgItem(scrapy.Item):</span><br><span class="line">    # define the fields for your item here like:</span><br><span class="line">    # name = scrapy.Field()</span><br><span class="line">    #图片标题</span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    #图片链接</span><br><span class="line">    url = scrapy.Field()</span><br></pre></td></tr></table></figure><h2 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</span><br><span class="line"><span class="keyword">from</span> scrapy.pipelines.images <span class="keyword">import</span> ImagesPipeline</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SaveImagePipeline</span>(<span class="title class_ inherited__">ImagesPipeline</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_media_requests</span>(<span class="params">self, item, info</span>):</span><br><span class="line">        <span class="comment"># 下载图片，如果传过来的是集合需要循环下载</span></span><br><span class="line">        <span class="comment"># meta里面的数据是从spider获取，然后通过meta传递给下面方法：file_path</span></span><br><span class="line">        <span class="keyword">yield</span> Request(url=item[<span class="string">&#x27;url&#x27;</span>], meta=&#123;<span class="string">&#x27;name&#x27;</span>: item[<span class="string">&#x27;title&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">item_completed</span>(<span class="params">self, results, item, info</span>):</span><br><span class="line">        <span class="comment"># 是一个元组，第一个元素是布尔值表示是否成功</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> results[<span class="number">0</span>][<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">raise</span> DropItem(<span class="string">&#x27;下载失败&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重命名，若不重写这函数，图片名为哈希，就是一串乱七八糟的名字</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">file_path</span>(<span class="params">self, request, response=<span class="literal">None</span>, info=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 接收上面meta传递过来的图片名称</span></span><br><span class="line">        name = request.meta[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        <span class="comment"># 提取url前面名称作为图片名</span></span><br><span class="line">        image_name = request.url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 清洗Windows系统的文件夹非法字符，避免无法创建目录</span></span><br><span class="line">        folder_strip = re.sub(<span class="string">r&#x27;[？\\*|“&lt;&gt;:/]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="built_in">str</span>(name))</span><br><span class="line">        <span class="comment"># 分文件夹存储的关键：&#123;0&#125;对应着name；&#123;1&#125;对应着image_guid</span></span><br><span class="line">        filename = <span class="string">u&#x27;&#123;0&#125;/&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(folder_strip, image_name)</span><br><span class="line">        <span class="keyword">return</span> filename</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>setting设置里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    &#x27;spider_test.pipelines.SaveImagePipeline&#x27;: 300,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">IMAGES_STORE = &#x27;./image&#x27;     文件根目录</span><br></pre></td></tr></table></figure><h2 id="DownladerMiddlewares"><a href="#DownladerMiddlewares" class="headerlink" title="DownladerMiddlewares"></a>DownladerMiddlewares</h2><p>设置随机useragent</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RandomUserAgentMiddlware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment">#随机更换user-agent</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,crawler</span>):</span><br><span class="line">        <span class="built_in">super</span>(RandomUserAgentMiddlware,self).__init__()</span><br><span class="line">        self.ua = UserAgent()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls,crawler</span>):</span><br><span class="line">        <span class="keyword">return</span> cls(crawler)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self,request,spider</span>):</span><br><span class="line">        request.headers.setdefault(<span class="string">&quot;User-Agent&quot;</span>,self.ua.random)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy爬虫框架</title>
      <link href="/2022/03/17/2022-scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/03/17/2022-scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="scrapy爬虫框架"><a href="#scrapy爬虫框架" class="headerlink" title="scrapy爬虫框架"></a>scrapy爬虫框架</h1><h2 id="创建一个scrapy项目"><a href="#创建一个scrapy项目" class="headerlink" title="创建一个scrapy项目"></a>创建一个scrapy项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject 项目名称</span><br></pre></td></tr></table></figure><p><img src="https://img.hipyt.cn/imgs/2022/03/958b3453ace58b91.png"></p><p>  scrapy.cfg：爬虫项目的配置文件。</p><p>  <strong>init</strong>.py：爬虫项目的初始化文件，用来对项目做初始化工作。</p><p>  items.py：爬虫项目的数据容器文件，用来定义要获取的数据。</p><p>  pipelines.py：爬虫项目的管道文件，用来对items中的数据进行进一步的加工处理。</p><p>  settings.py：爬虫项目的设置文件，包含了爬虫项目的设置信息。</p><p>  middlewares.py：爬虫项目的中间件文件，</p><p><img src="https://s2.loli.net/2022/03/17/KkHtWo7VIOE3h5f.png"></p><p><strong>运作流程</strong><br>1.Engine首先会打开一个起始url，并找到相对应的Spider来处理这个url访问返回的响应结果。</p><p>2.在Spider的处理过程中，会将接下来要访问的url包装成Request，Engine会将Request从Spider取出，交给Scheduler进行调度。</p><p>3.Engine从Scheduler获取一个Request。</p><p>4.Engine将获取到的Request经由下载器中间件（Downloader Middleware）发送给Downloader进行下载并生成相应的Response。</p><p>5.Engine从Downloader获取一个Response。</p><p>6.Engine将获取的Response经由爬虫中间件（Spider Middleware）发送给相对应的Spider，由Spider来对Response进行解析。在解析过程中，可能会产生两种产物，一种是Item，一种是Request。产生的Request会再次沿着步骤1的流程运行下去，而产生的Item则会进入下一步。</p><p>7.Engine从Spider获取一个Item。</p><p>8.Engine将获取的Item发送给Item Pipeline进行相对应的存储、清洗等处理。Item Pipeline处理的过程中，同样可能会生成新的Request，这时候生成的Request会直接放入Scheduler中，从步骤3再次执行下去。</p><h2 id="创建爬虫应用"><a href="#创建爬虫应用" class="headerlink" title="创建爬虫应用"></a>创建爬虫应用</h2><ol><li>先切换到爬虫文件夹</li><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider &lt;name&gt; &lt;domain&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img.hipyt.cn/imgs/2022/03/cd1f68ed219fb943.png"></p><p><strong>运行流程</strong></p><p>1.生成的模板中有一个start_urls参数，这是这个Spider的运行入口，Scrapy会自动的将这个参数中的url发送到Downloader进行下载，并且自动的调用parse方法来处理获得的response。</p><p>2.在parse方法处理response的过程中，我们一般会有可能获取两种对象，一个是最终我们从网页上提取的数据，这种数据我们会将其保存为item对象。另一种是我们获取的接下来要访问的url，这一种我们会将其生成为一个Request对象。这两种获得的对象，我们都会使用yield将其返回出去。Scrapy会自动检测对象的类型，如果是item，则会将其发送到item pipeline进行存储等处理，如果是Request对象，则会再次往Downloader发送进行访问。</p><p>3.每一个Request对象，都会在生成的时候绑定一个回调函数，用来处理这个请求返回的响应结果。</p><h2 id="启动爬虫"><a href="#启动爬虫" class="headerlink" title="启动爬虫"></a>启动爬虫</h2><p><strong>方法一</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl 爬虫名</span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><p>在项目文件<strong>scrapy.cfg</strong>的同级建立<strong>main.py</strong>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.cmdline <span class="keyword">import</span> execute</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">sys.path.append(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line">execute([<span class="string">&#x27;scrapy&#x27;</span>, <span class="string">&#x27;crawl&#x27;</span>, <span class="string">&#x27;爬虫名&#x27;</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.crawler <span class="keyword">import</span> CrawlerProcess</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    process = CrawlerProcess(get_project_settings())</span><br><span class="line">    process.crawl(<span class="string">&#x27;爬虫名&#x27;</span>)    <span class="comment">#  你需要将此处的spider_name替换为你自己的爬虫名称</span></span><br><span class="line">    process.start()</span><br></pre></td></tr></table></figure><h2 id="Item"><a href="#Item" class="headerlink" title="Item"></a>Item</h2><p>parse方法一般会返回一个request对象或item对象</p><p>Scrapy中，定义了一个专门的通用数据结构：Item。这个Item对象提供了跟字典相似的API，并且有一个非常方便的语法来声明可用的字段。</p><p>item对象结构的定义在项目录下的items.py文件中定义。以类的方式定义item对象的各个字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    job_name = scrapy.Field()</span><br><span class="line">    job_label = scrapy.Field()</span><br><span class="line">    job_time = scrapy.Field(serializer=<span class="built_in">str</span>)</span><br><span class="line">   </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//先实例化,然后以字典的方式进行传值</span><br><span class="line">item = MyItem()</span><br><span class="line">item[&#x27;job_name&#x27;] = &#x27;语文老师&#x27;</span><br><span class="line">item[&#x27;job_label&#x27;] = &#x27;教师&#x27;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>如果获取没有声名的字段或给其赋值，将会报错。但可以通过get方法给没有声名的字段设置一个默认值。</p><p>实例化item时，可以直接传递一个字典作为参数，但要注意传递字典的key值是已声明的，否则会报错。</p><p>定义的item，还可以给其他item所继承。</p><h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><p>item对象结构的定义在项目录下的pipelines.py文件中定义</p><ol><li>在<code>Spider</code>中返回一个<code>Item</code>后，这个<code>Item</code>将会被发送给<code>Item Pipeline</code>，每个<code>Item Pipeline</code>都是一个Python类，实现了几个简单的方法。其主要有以下几种作用：<ol><li>清洗数据</li><li>验证抓取下来的数据（检查是否含有某些字段）</li><li>检查去重</li><li>存储数据</li></ol></li></ol><p><strong>方法</strong></p><ul><li><p>process_item(self, item, spider)<br>每一个Item Pipeline都会调用这个方法，用来处理Item，返回值为item或dict。</p><p>这个方法还可以抛出一个DropItem异常，这样将会不再继续调用接下来的Pipeline。</p><p>参数item(Item对象或者Dict) 是parse方法传来的。</p><p>参数spider(Spider对象) - 抓取这个Item的Spider。</p></li><li><p>open_spider(self, spider)<br>这个方法将会在Spider打开时调用。</p></li><li><p>close_spider(self, spider)<br>这个方法将会在Spider关闭时调用。</p></li></ul><p><strong>启用pipeline</strong>：在setting文件中配置，demo是项目名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;项目名.pipelines.TanzhouPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Downloader-Middleware"><a href="#Downloader-Middleware" class="headerlink" title="Downloader Middleware"></a>Downloader Middleware</h1><p><strong>作用</strong></p><p>更换代理IP，更换Cookies，更换User-Agent，自动重试 等</p><p><img src="https://img.hipyt.cn/imgs/2022/03/700db5d6f3da0397.jpg"></p><p><strong>启用Downloader Middleware</strong> ：在setting文件中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    &#x27;项目名.middlewares.CustomDownloaderMiddleware&#x27;: 543,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>核心方法</strong></p><p>process_request(request, spider)</p><p>process_response(request, response, spider)</p><p>process_exception(request, exception, spider)</p><p>**process_request() **必须返回以下其中之一：一个 None 、一个 Response 对象、一个 Request 对象或 抛出 IgnoreRequest，返回的类型不同，产生的效果也不一样:</p><p>如果其返回 None ，Scrapy将继续处理该request，执行其他的中间件的相应方法，直到合适的下载器处理函数(download handler)被调用， 该request被执行(其response被下载)。</p><p>如果其返回 Response 对象，Scrapy将不会调用 任何 其他的 process_request() 或 process_exception() 方法，或相应地下载函数； 其将返回该response。 已安装的中间件的 process_response() 方法则会在每个response返回时被调用。</p><p>如果其返回 Request 对象，Scrapy则停止调用 process_request方法并重新调度返回的request。当新返回的request被执行后， 相应地中间件链将会根据下载的response被调用。</p><p>如果其raise一个 IgnoreRequest 异常，则安装的下载中间件的 process_exception() 方法会被调用。如果没有任何一个方法处理该异常， 则request的errback(Request.errback)方法会被调用。如果没有代码处理抛出的异常， 则该异常被忽略且不记录(不同于其他异常那样)。</p><p><strong>process_response(request, response, spider)</strong></p><p>DownLoader获得Response之后，会先经过Downloader Middlewares。</p><ul><li>request (Request 对象) – response所对应的request</li><li>response (Response 对象) – 被处理的response</li><li>spider (Spider 对象) – response所对应的spider</li></ul><p>process_response() 必须返回以下其中之一: 返回一个 Response 对象、 返回一个 Request 对象或raise一个 IgnoreRequest 异常。</p><p>如果其返回一个 Response (可以与传入的response相同，也可以是全新的对象)， 该response会被在链中的其他中间件的 process_response() 方法处理。</p><p>如果其返回一个 Request 对象，则中间件链停止， 返回的request会被重新调度下载。处理类似于 process_request() 返回request所做的那样。</p><p>如果其抛出一个 IgnoreRequest 异常，则调用request的errback(Request.errback)。 如果没有代码处理抛出的异常，则该异常被忽略且不记录(不同于其他异常那样)。</p><p><strong>process_exception(request, exception, spider)</strong></p><p>当下载处理器(download handler)或 process_request() (下载中间件)抛出异常(包括 IgnoreRequest 异常)时，Scrapy调用 process_exception()</p><ul><li>request (Request 对象) – response所对应的request。</li><li>exception (Exception 对象) – 抛出的异常。</li><li>spider (Spider 对象) – response所对应的spider</li></ul><p>process_exception() 也是返回三者中的一个: 返回 None 、 一个 Response 对象、或者一个 Request 对象。</p><p>如果其返回 None，Scrapy将会继续处理该异常，接着调用已安装的其他中间件的 process_exception() 方法，直到所有中间件都被调用完毕，则调用默认的异常处理。</p><p>如果其返回一个 Response 对象，则已安装的中间件链的 process_response() 方法被调用。Scrapy将不会调用任何其他中间件的 process_exception() 方法。</p><p>如果其返回一个 Request 对象， 则返回的request将会被重新调用下载。这将停止中间件的 process_exception() 方法执行，就如返回一个response的那样。 这个是非常有用的，就相当于如果我们失败了可以在这里进行一次失败的重试，例如当我们访问一个网站出现因为频繁爬取被封ip就可以在这里设置增加代理继续访问</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取壁纸</title>
      <link href="/2022/03/17/2022-%E7%88%AC%E5%8F%96%E5%A3%81%E7%BA%B8/"/>
      <url>/2022/03/17/2022-%E7%88%AC%E5%8F%96%E5%A3%81%E7%BA%B8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line">from scrapy import Selector</span><br><span class="line">from concurrent.futures import ThreadPoolExecutor</span><br><span class="line">from queue import Queue</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BoundedThreadPoolExecutor(ThreadPoolExecutor):</span><br><span class="line">    def __init__(self, max_workers=None, thread_name_prefix=&#x27;&#x27;):</span><br><span class="line">        super().__init__(max_workers, thread_name_prefix)</span><br><span class="line">        self._work_queue = Queue(max_workers * 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_href(page):</span><br><span class="line">    hrefs = []</span><br><span class="line">    for a in range(1, page + 1):</span><br><span class="line">        print(&#x27;解析第&#123;0&#125;页&#x27;.format(a))</span><br><span class="line">        url = &#x27;https://www.2717.com/ent/meinvtupian/list_11_&#123;0&#125;.html&#x27;.format(a)</span><br><span class="line">        res = requests.get(url=url, headers=headers)</span><br><span class="line">        res.encoding = &#x27;gb2312&#x27;  # respose重新编码</span><br><span class="line">        html = res.text</span><br><span class="line">        # 获取目录页所有链接</span><br><span class="line">        sel = Selector(text=html)</span><br><span class="line">        lis = sel.xpath(&quot;//div[@class=&#x27;MeinvTuPianBox&#x27;]//li&quot;)</span><br><span class="line">        for li in lis:</span><br><span class="line">            a = li.xpath(&#x27;.//a&#x27;)[0]</span><br><span class="line">            href = a.css(&#x27;::attr(href)&#x27;).extract()[0]</span><br><span class="line">            href = &#x27;https://www.2717.com&#x27; + href</span><br><span class="line">            hrefs.append(href)</span><br><span class="line">    return hrefs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def parser_img(href):</span><br><span class="line">    href = href.replace(&#x27;.html&#x27;, &#x27;&#x27;)</span><br><span class="line">    Flag = True</span><br><span class="line">    i = 1</span><br><span class="line">    title = &#x27;&#x27;</span><br><span class="line">    while Flag:</span><br><span class="line">        url = href + &#x27;_&#123;0&#125;.html&#x27;.format(i)</span><br><span class="line">        res = requests.get(url=url, headers=headers)</span><br><span class="line">        res.encoding = &#x27;gb2312&#x27;  # respose重新编码</span><br><span class="line">        html = res.text</span><br><span class="line">        sel = Selector(text=html)</span><br><span class="line">        title = sel.css(&#x27;#picBody img::attr(alt)&#x27;).extract()[0]</span><br><span class="line">        if i == 1:</span><br><span class="line">            creat_folder(title)</span><br><span class="line">            print(title + &#x27;开始下载&#x27;)</span><br><span class="line">        img_href = sel.css(&#x27;#picBody img::attr(src)&#x27;).extract()[0]</span><br><span class="line">        img = requests.get(img_href, headers=headers, timeout=(5, 5))</span><br><span class="line">        with open(&#x27;./image/&#x27; + title + &#x27;/&#x27; + str(i) + &#x27;.jpg&#x27;, &#x27;wb&#x27;) as f:</span><br><span class="line">            f.write(img.content)</span><br><span class="line">        f.close()</span><br><span class="line">        i += 1</span><br><span class="line">        try:</span><br><span class="line">            next_url = sel.xpath(&#x27;//*[@id=&quot;pop_cl&quot;]&#x27;).extract()[0]</span><br><span class="line">            Flag = False</span><br><span class="line">        except IndexError as e:</span><br><span class="line">            pass</span><br><span class="line">        time.sleep(0.1)</span><br><span class="line">    print(title + &quot;下载结束&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def creat_folder(title):</span><br><span class="line">    # 判断image文件夹是否存在，不存在则创建</span><br><span class="line">    if not os.path.exists(&#x27;image&#x27;):</span><br><span class="line">        os.makedirs(&#x27;image&#x27;)</span><br><span class="line">    if not os.path.exists(&#x27;image/&#x27; + title):</span><br><span class="line">        os.makedirs(&#x27;image/&#x27; + title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    page = int(input(&#x27;请输入要下载的页数:&#x27;))</span><br><span class="line">    hrefs = get_href(page)</span><br><span class="line">    executor = BoundedThreadPoolExecutor(max_workers=8)</span><br><span class="line">    for href in hrefs:</span><br><span class="line">        executor.submit(parser_img, href)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>爬虫假死时</p><ol><li>多print,找出卡死位置</li><li>使用timeout</li><li>urlretrieve可以通过socket来判断超时</li></ol><p>通过url下载图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line">url ＝ &#x27;......&#x27;</span><br><span class="line"></span><br><span class="line">request.urlretrieve(url, path) </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python多线程池</title>
      <link href="/2022/03/17/2022-python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2022/03/17/2022-python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="comment">#导包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BoundedThreadPoolExecutor</span>(<span class="title class_ inherited__">ThreadPoolExecutor</span>):</span><br><span class="line"><span class="comment">#重写线程池类,使创建的任务数量为最大线程的2倍</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, max_workers=<span class="literal">None</span>, thread_name_prefix=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(max_workers, thread_name_prefix)</span><br><span class="line">        self._work_queue = Queue(max_workers * <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">executor = BoundedThreadPoolExecutor(max_workers=<span class="number">8</span>)<span class="comment">#创建实例</span></span><br><span class="line"></span><br><span class="line">hrefs=[<span class="string">&#x27;www.1.com&#x27;</span>,<span class="string">&#x27;www.2.com&#x27;</span>,<span class="string">&#x27;www.2.com&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> href <span class="keyword">in</span> hrefs:</span><br><span class="line">     executor.submit(parser_img, href)</span><br><span class="line"><span class="comment">#submit创建单个线程</span></span><br><span class="line"></span><br><span class="line">executor.submit(parser_img, hrefs)</span><br><span class="line"><span class="comment">#map创建多个线程</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fidder</title>
      <link href="/2022/03/17/2022-Fidder/"/>
      <url>/2022/03/17/2022-Fidder/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Fiddler抓包"><a href="#Fiddler抓包" class="headerlink" title="Fiddler抓包"></a>Fiddler抓包</h1><h2 id="软件界面介绍"><a href="#软件界面介绍" class="headerlink" title="软件界面介绍"></a>软件界面介绍</h2><p><img src="https://s2.loli.net/2022/03/17/qvP3a6el4dJkNCp.png" alt=" "></p><h3 id="1-菜单栏"><a href="#1-菜单栏" class="headerlink" title="1.菜单栏"></a>1.菜单栏</h3><ul><li>Rules  定义一些过滤规则<ul><li>性能&gt;模拟调节器速度,实现弱网调试</li></ul></li><li>Tools<ul><li>Options<ul><li>Connectios 设置Fiddler代理端口,手机连接时设置Allow remote computers to connect</li><li>HTTPS  开启抓取HTTPS的包,通过Actions设置证书</li></ul></li></ul></li><li>View  视图框</li></ul><h3 id="2-工具栏"><a href="#2-工具栏" class="headerlink" title="2.工具栏"></a>2.工具栏</h3><p>*　Replay  重新发送选中的会话,快捷键R,发送多个shift+r<br>*　x  移除不想显示的会话类型<br>*　Go 断点测试<br>*　Stream 不使用Fiddle缓存,服务器发过来,Fiddler收到直接发往应用<br>*　Decode 自动解码<br>*　Keep  维持多少会话<br>*　Any Process  选择抓取进程<br>*　Find  查找相关信息<br>*　Save 将选择的会话保存出去<br>*　Clear Cache 清除缓存<br>*　TextWizard  字符转码<br>*　Tearoff 使标签项浮动</p><h3 id="3-会话列表"><a href="#3-会话列表" class="headerlink" title="3.会话列表"></a>3.会话列表</h3><p>快捷键</p><p>shift+del 清除除选中之外的所有会话</p><p>ctrl+x 清除所有会话</p><h3 id="4-状态栏"><a href="#4-状态栏" class="headerlink" title="4.状态栏"></a>4.状态栏</h3><p>*　QuickExec　命令行<br>  *　bp   request前断点<br>  *　bpafte  response后断点<br>*　Capturing 快捷选择是否抓取<br>*　All Peocesses 选择抓取的进程项<br>*　空白栏 点一下request前断点,点两下response后断点</p><h3 id="5-标签项"><a href="#5-标签项" class="headerlink" title="5.标签项"></a>5.标签项</h3><ul><li>FiddlerScript  脚本文件</li><li>Filters 过滤器</li><li>Composer 代理发包,可拖拽进入<ul><li>Parsed是一项,Scratchpad是多项,三击可选择</li></ul></li><li>AutoResopnder  设置request和response的规则,可直接拖拽进入,勾选Enale rules和Unmatched两项</li><li>Inspectors  查看request和response<ul><li>request:请求行,请求头,空白行,请求体<ul><li>webForm表单查看</li></ul></li><li>response:状态码,响应头,空白行,响应体<ul><li>SyntaxView代码查看</li><li>webview网页视图查看</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Fiddler抓包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fiddler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2022/03/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2022/03/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><ol><li>确定base case</li><li>状态和选择</li><li>dp数组&#x2F;函数的定义</li><li>寻找状态间的关系</li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>一般用来求最值.</li><li>子序列和子数组,子串分清楚</li><li>至少有一个不在最长公共子序列中max((dp(i -1),j),dp(i,j-1);</li><li>注意要求的返回值</li><li>使用函数记得备忘录</li></ol><h2 id="确定base-case"><a href="#确定base-case" class="headerlink" title="确定base case"></a>确定base case</h2><ol><li><p>不止边界条件,还应该有失败条件</p><p>eg:零钱问题,最终n &lt; 0;表示没合适的硬币凑出相对应的金钱.</p></li><li><p>可能需要for循环赋值eg:编辑距离</p></li></ol><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><ol><li><p>题目给的明显的选择</p></li><li><p>要不要,装不装,打不打……</p></li><li><p>开始另立门户</p><p>eg:最大子数组,memo[i] &#x3D; Math.max(nums[i],memo[i - 1]+nums[i]);</p></li><li><p>两个指针一般从里到外</p></li></ol><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><ol><li>单个状态</li><li>前i个状态</li><li>两个指针</li></ol><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p>定义dp数组时数量在前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">       </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt;= V;j++)&#123;</span><br><span class="line">                <span class="comment">//当i = n - 1时,j循环时就代表剩余空间大小</span></span><br><span class="line">                <span class="comment">//eg:j = V表示的是前边一个没装</span></span><br><span class="line">                <span class="keyword">if</span>(vw[i - <span class="number">1</span>][<span class="number">0</span>] &gt; j)&#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> dp[i-<span class="number">1</span>][j-vw[i - <span class="number">1</span>][<span class="number">0</span>]]+vw[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> dp[i-<span class="number">1</span>][j];</span><br><span class="line">                dp[i][j] = Math.max(a,b);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="环形数组"><a href="#环形数组" class="headerlink" title="环形数组"></a>环形数组</h2><p>想着怎么化成子问题,分情况</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
